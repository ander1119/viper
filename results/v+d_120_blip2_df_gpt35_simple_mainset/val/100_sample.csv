answer|groundtruth|id|trope|query|img_path|possible_answers|code|info|reason|compilation_error|runtime_error
no|no|tt1637725_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|yes|tt1637725_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|yes|tt1637725_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 0"": ""the child is directed towards the child's parents"",
  ""Actions towards child in frame 1"": ""a group of people gather around the child"",
  ""Actions towards child in frame 2"": ""person, person, person, person, person"",
  ""Actions towards child in frame 3"": ""person, person, person, person, person"",
  ""Actions towards child in frame 4"": ""hugging, kissing, and hugging"",
  ""Actions towards child in frame 5"": ""he is scolded by his parents"",
  ""Actions towards child in frame 6"": ""he is being scolded"",
  ""Actions towards child in frame 10"": ""person, person, person, person, person"",
  ""Actions towards child in frame 25"": ""he screams at the child"",
  ""Actions towards child in frame 28"": ""he scolds the child"",
  ""Actions towards child in frame 32"": ""person, person, person, person, person"",
  ""Actions towards child in frame 34"": ""person, person, person, person, person"",
  ""Actions towards child in frame 35"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 38"": ""a woman in a red apron"",
  ""Actions towards child in frame 42"": ""person, person, person, person, person"",
  ""Actions towards child in frame 47"": ""hugs, kisses, and affection"",
  ""Actions towards child in frame 50"": ""kissing, hugging, and kissing"",
  ""Actions towards child in frame 57"": ""person, person, person, person, person"",
  ""Actions towards child in frame 59"": ""hugs, kisses, and hugs"",
  ""Actions towards child in frame 61"": ""person, person, person, person, person"",
  ""Actions towards child in frame 65"": ""person, person, person, person, person"",
  ""Actions towards child in frame 66"": ""he tries to get him to sit down"",
  ""Actions towards child in frame 68"": ""he screams and runs away"",
  ""Actions towards child in frame 70"": ""kissing, hugging, and kissing"",
  ""Actions towards child in frame 76"": ""the teddy bear's actions"",
  ""Actions towards child in frame 81"": ""a woman reaches out to the child"",
  ""Actions towards child in frame 85"": ""the crowd claps and cheers"",
  ""Actions towards child in frame 86"": ""the teddy bear's actions"",
  ""Actions towards child in frame 92"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 94"": ""person, person, person, person, person"",
  ""Actions towards child in frame 95"": ""the teddy bear's paws"",
  ""Actions towards child in frame 96"": ""he tries to get him out of the car"",
  ""Actions towards child in frame 104"": ""person, person, person, person, person"",
  ""Actions towards child in frame 111"": ""the child is directed towards a woman who is running"",
  ""Actions towards child in frame 113"": ""he tries to reach out to the child"",
  ""Actions towards child in frame 114"": ""person, person, person, person, person"",
  ""Actions towards child in frame 116"": ""person, person, person, person, person"",
  ""Actions towards child in frame 117"": ""person, person, person, person, person""
}"|There are instances of characters harming children in the video.||
no|yes|tt1637725_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt1637725_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The trope `Determinator` involves a character who never gives up no matter what. If the character in the movie is shown to continuously pursue their goal despite facing numerous obstacles and challenges, then the trope is likely present in the movie.||
no|yes|tt1637725_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt1637725_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The presence of the trope `Too Dumb to Live` would require characters in the movie consistently making incredibly foolish decisions that put their lives in danger. However, the information provided does not indicate such behavior from the characters.||
no|no|tt1637725_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The trope 'Adorkable' involves a character being socially inept, shy, or clumsy, but endearing. There is no information provided about any character in the movie displaying these traits||
yes|no|tt1637725_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 1"": ""a girl is being rescued from the snow"",
  ""Fear element in frame 1"": ""a child's screams"",
  ""Caption of frame 3"": ""a child is standing in a room"",
  ""Fear element in frame 3"": ""a child's presence in the room"",
  ""Caption of frame 4"": ""hugging a teddy bear"",
  ""Fear element in frame 4"": ""a stuffed teddy bear"",
  ""Caption of frame 5"": ""a family is sitting in a kitchen"",
  ""Fear element in frame 5"": ""a child's screams"",
  ""Caption of frame 6"": ""a boy is sleeping in a tent"",
  ""Fear element in frame 6"": ""a boy is hiding in a tent"",
  ""Caption of frame 7"": ""a man is holding a teddy bear"",
  ""Fear element in frame 7"": ""a teddy bear with mushrooms"",
  ""Caption of frame 9"": ""a man is sitting next to a teddy bear"",
  ""Fear element in frame 9"": ""the teddy bear's presence"",
  ""Caption of frame 10"": ""a man is standing next to a car"",
  ""Fear element in frame 10"": ""a bear in a parked car"",
  ""Caption of frame 11"": ""a man is sitting at a desk"",
  ""Fear element in frame 11"": ""a man in a suit and tie"",
  ""Caption of frame 16"": ""a man is sitting on a couch with a teddy bear"",
  ""Fear element in frame 16"": ""a teddy bear in the room"",
  ""Caption of frame 17"": ""a teddy bear is sitting at a table"",
  ""Fear element in frame 17"": ""the presence of a teddy bear"",
  ""Caption of frame 20"": ""a woman is holding a bag in an office"",
  ""Fear element in frame 20"": ""a woman's screams"",
  ""Caption of frame 22"": ""a woman is sitting at a desk"",
  ""Fear element in frame 22"": ""a woman in a blazer"",
  ""Caption of frame 24"": ""people dancing on a dance floor at night"",
  ""Fear element in frame 24"": ""screams and screams"",
  ""Caption of frame 25"": ""a man is sitting at a table"",
  ""Fear element in frame 25"": ""a man in a tux"",
  ""Caption of frame 27"": ""a woman is talking to a man"",
  ""Fear element in frame 27"": ""a woman's screams"",
  ""Caption of frame 28"": ""a man is sitting in a car"",
  ""Fear element in frame 28"": ""a man in a black car driving"",
  ""Caption of frame 29"": ""a woman is walking down a hallway"",
  ""Fear element in frame 29"": ""a woman in a white dress walking down stairs"",
  ""Caption of frame 31"": ""a man is sitting on a bench with a teddy bear"",
  ""Fear element in frame 31"": ""a stuffed teddy bear"",
  ""Caption of frame 32"": ""sitting on a bench with a teddy bear"",
  ""Fear element in frame 32"": ""a stuffed teddy bear"",
  ""Caption of frame 35"": ""a man is talking to a man"",
  ""Fear element in frame 35"": ""the screams of a child"",
  ""Caption of frame 36"": ""a man is standing in a room"",
  ""Fear element in frame 36"": ""a man in a t-shirt"",
  ""Caption of frame 37"": ""a woman is lying on a bed"",
  ""Fear element in frame 37"": ""a woman in a white t-shirt"",
  ""Caption of frame 38"": ""a woman is in a grocery store"",
  ""Fear element in frame 38"": ""a woman in a red apron"",
  ""Caption of frame 39"": ""a man is writing at a desk"",
  ""Fear element in frame 39"": ""a man in a suit and tie"",
  ""Caption of frame 41"": ""a man is sitting at a desk"",
  ""Fear element in frame 41"": ""person, person, person, person, person"",
  ""Caption of frame 44"": ""a man is standing in a store"",
  ""Fear element in frame 44"": ""a man in a suit and tie"",
  ""Caption of frame 45"": ""a person is walking down an alley"",
  ""Fear element in frame 45"": ""the shadow of a teddy bear"",
  ""Caption of frame 46"": ""a teddy bear is walking down the street"",
  ""Fear element in frame 46"": ""the shadow of the teddy bear"",
  ""Caption of frame 48"": ""a woman is sitting at a table"",
  ""Fear element in frame 48"": ""person, person, person, person, person"",
  ""Caption of frame 54"": ""a man is pointing a gun"",
  ""Fear element in frame 54"": ""a man pointing a gun at someone"",
  ""Caption of frame 57"": ""a teddy bear is standing"",
  ""Fear element in frame 57"": ""the presence of a teddy bear"",
  ""Caption of frame 58"": ""a teddy bear is at a party"",
  ""Fear element in frame 58"": ""the teddy bear's presence"",
  ""Caption of frame 60"": ""a teddy bear is holding a microphone"",
  ""Fear element in frame 60"": ""a teddy bear's voice"",
  ""Caption of frame 61"": ""a group of people are watching a teddy bear"",
  ""Fear element in frame 61"": ""the teddy bear's presence"",
  ""Caption of frame 62"": ""a teddy bear is speaking"",
  ""Fear element in frame 62"": ""the teddy bear's voice"",
  ""Caption of frame 64"": ""a teddy bear is sitting on a table"",
  ""Fear element in frame 64"": ""the teddy bear's presence"",
  ""Caption of frame 66"": ""a group of people are at a party"",
  ""Fear element in frame 66"": ""a chair falling on top of a person"",
  ""Caption of frame 68"": ""a group of people are in a bar"",
  ""Fear element in frame 68"": ""the presence of a woman in the room"",
  ""Caption of frame 69"": ""a woman is walking down a hallway"",
  ""Fear element in frame 69"": ""a woman in a red dress in a hallway"",
  ""Caption of frame 71"": ""the teddy bear is standing on the street"",
  ""Fear element in frame 71"": ""a teddy bear in the dark"",
  ""Caption of frame 72"": ""a woman is sitting at a desk"",
  ""Fear element in frame 72"": ""a woman in a black turtleneck"",
  ""Caption of frame 74"": ""a teddy bear is in a room"",
  ""Fear element in frame 74"": ""a teddy bear in the dark"",
  ""Caption of frame 75"": ""a man is standing in a room"",
  ""Fear element in frame 75"": ""a man in a black shirt standing in a room"",
  ""Caption of frame 76"": ""a teddy bear is in bed"",
  ""Fear element in frame 76"": ""the teddy bear in the bed"",
  ""Caption of frame 77"": ""a man is holding a teddy bear"",
  ""Fear element in frame 77"": ""the teddy bear's presence"",
  ""Caption of frame 78"": ""a man is playing with a teddy bear"",
  ""Fear element in frame 78"": ""the teddy bear in the room"",
  ""Caption of frame 79"": ""a man is laying on the floor"",
  ""Fear element in frame 79"": ""the presence of a teddy bear"",
  ""Caption of frame 81"": ""a man and woman are in a room"",
  ""Fear element in frame 81"": ""a woman in a green dress and a bottle of wine"",
  ""Caption of frame 82"": ""a teddy bear is in a room"",
  ""Fear element in frame 82"": ""a stuffed teddy bear"",
  ""Caption of frame 83"": ""a woman is staring at the camera"",
  ""Fear element in frame 83"": ""a woman in a black leather jacket"",
  ""Caption of frame 84"": ""a man is staring at the crowd"",
  ""Fear element in frame 84"": ""fear of the dark, fear of the dark, fear of the dark"",
  ""Caption of frame 86"": ""a woman is looking at a teddy bear"",
  ""Fear element in frame 86"": ""the presence of a teddy bear"",
  ""Caption of frame 88"": ""a teddy bear is standing in a doorway"",
  ""Fear element in frame 88"": ""the teddy bear's presence"",
  ""Caption of frame 89"": ""a man is talking to a woman"",
  ""Fear element in frame 89"": ""person, person, person, person, person"",
  ""Caption of frame 90"": ""a person is walking down a hallway"",
  ""Fear element in frame 90"": ""the light shining through a dark doorway"",
  ""Caption of frame 91"": ""a child is sleeping in a bed"",
  ""Fear element in frame 91"": ""a stuffed teddy bear"",
  ""Caption of frame 92"": ""a man is looking at a teddy bear"",
  ""Fear element in frame 92"": ""a stuffed teddy bear"",
  ""Caption of frame 93"": ""a teddy bear is standing"",
  ""Fear element in frame 93"": ""the teddy bear's presence"",
  ""Caption of frame 94"": ""a person is opening a wooden door"",
  ""Fear element in frame 94"": ""a wooden door with a broken handle"",
  ""Caption of frame 95"": ""a teddy bear is in the closet"",
  ""Fear element in frame 95"": ""a teddy bear,"",
  ""Caption of frame 96"": ""a man gets out of a car"",
  ""Fear element in frame 96"": ""a car parked in a parking lot"",
  ""Caption of frame 97"": ""a man is talking on his cell phone"",
  ""Fear element in frame 97"": ""a cell phone in the backseat"",
  ""Caption of frame 98"": ""a man is talking on his cell phone"",
  ""Fear element in frame 98"": ""a cell phone in the backseat"",
  ""Caption of frame 99"": ""a man is driving his car at night"",
  ""Fear element in frame 99"": ""a car driving down the street at night"",
  ""Caption of frame 100"": ""a car is driving down the street at night"",
  ""Fear element in frame 100"": ""a car driving down the street at night"",
  ""Caption of frame 101"": ""a woman is driving a car on the highway"",
  ""Fear element in frame 101"": ""a woman driving a car in the rain"",
  ""Caption of frame 102"": ""a car is driving down a street"",
  ""Fear element in frame 102"": ""a car driving through a dark tunnel"",
  ""Caption of frame 103"": ""a car drives down the street at night"",
  ""Fear element in frame 103"": ""a car driving down the street at night"",
  ""Caption of frame 104"": ""a teddy bear is crossing the street"",
  ""Fear element in frame 104"": ""the presence of a teddy bear"",
  ""Caption of frame 105"": ""a man is walking down a street"",
  ""Fear element in frame 105"": ""a man walking down the street at night"",
  ""Caption of frame 106"": ""a man and a woman are standing together"",
  ""Fear element in frame 106"": ""a man in a striped shirt"",
  ""Caption of frame 107"": ""a man is walking down a hallway"",
  ""Fear element in frame 107"": ""a man with a knife in his hand"",
  ""Caption of frame 109"": ""a man is running down a hallway"",
  ""Fear element in frame 109"": ""a man in a hoodie"",
  ""Caption of frame 110"": ""a teddy bear is sitting on a baseball field"",
  ""Fear element in frame 110"": ""a teddy bear in a stadium"",
  ""Caption of frame 111"": ""a woman is running in a stadium"",
  ""Fear element in frame 111"": ""a girl running in a dark stadium"",
  ""Caption of frame 112"": ""a man is leaning against a wall"",
  ""Fear element in frame 112"": ""a man leaning on a wall"",
  ""Caption of frame 113"": ""a person is opening a drawer in the dark"",
  ""Fear element in frame 113"": ""the shadow of a person's hand"",
  ""Caption of frame 114"": ""a woman is holding a stuffed animal"",
  ""Fear element in frame 114"": ""a child's screams"",
  ""Caption of frame 115"": ""a person is holding a stuffed animal"",
  ""Fear element in frame 115"": ""a teddy bear in the dark"",
  ""Caption of frame 116"": ""a man is petting a teddy bear"",
  ""Fear element in frame 116"": ""the presence of a teddy bear"",
  ""Caption of frame 117"": ""a man is sitting next to a teddy bear"",
  ""Fear element in frame 117"": ""the teddy bear's presence""
}"|The presence of children's screams, teddy bears, family sitting in a kitchen, and a man holding a teddy bear with mushrooms all suggest themes related to childhood and innocence. These elements can evoke feelings of adult fear, as mature, well-adjusted adults are often concerned about the safety and well-being of children. The juxtaposition of these innocent images with darker elements like a man pointing a gun and people dancing with screams can heighten the sense of unease and tap into adult fears about protecting loved ones from harm.||
no|no|tt1637725_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest any similarity or connection between two characters that would indicate the presence of the trope `Not So Different`||
no|no|tt1637725_32|Eye Scream|"Is the trope ""Eye Scream"", which means ""When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the 
invasion of the eye sockets by a foreign body."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_32(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Eye Scream
    # Definition: When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the invasion of the eye sockets by a foreign body.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential instances of eye-related horror or trauma.
    # 2. Contextual Analysis: Look for visual cues or actions that suggest eye-related scenes.
    # 3. Detecting Eye Scream: Identify scenes where characters' eyes are in danger or being harmed.
    # 4. Answer Selection: Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for eye-related horror or trauma
        eye_horror_query = frame.simple_query(""Is there any eye-related horror or trauma in this scene?"", to_yesno=True)
        
        if ""yes"" in eye_horror_query.lower():
            # If eye-related horror is detected, gather more information
            eye_scene_description = frame.simple_query(""Describe the eye-related scene in detail."")
            info[f""Eye-related scene in frame {i}""] = eye_scene_description

    # Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Eye-related scene in frame 0"": ""the eye-related scene is a montage of eye shots"",
  ""Eye-related scene in frame 1"": ""the scene in which person's eye is injured"",
  ""Eye-related scene in frame 2"": ""the scene in which the teddy bear looks at the camera"",
  ""Eye-related scene in frame 3"": ""the eye-related scene is a scene in which a young boy is standing in a room"",
  ""Eye-related scene in frame 5"": ""the eye-related scene takes place in the kitchen"",
  ""Eye-related scene in frame 6"": ""a boy is hiding in a tent"",
  ""Eye-related scene in frame 7"": ""the eye-related scene is the scene in which celeb is arrested for stealing mushrooms"",
  ""Eye-related scene in frame 8"": ""the eye-related scene is a scene in which a man and woman kiss"",
  ""Eye-related scene in frame 9"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 10"": ""the scene in which the man is looking at his own eye"",
  ""Eye-related scene in frame 11"": ""the eye-related scene takes place in the office of person"",
  ""Eye-related scene in frame 12"": ""the eye-related scene in the movie is a scene in which a man is sitting at a desk"",
  ""Eye-related scene in frame 13"": ""the eye-related scene takes place in a car dealership"",
  ""Eye-related scene in frame 14"": ""the scene in which a man's eye is injured"",
  ""Eye-related scene in frame 16"": ""the scene in which the teddy bear is sitting on the couch"",
  ""Eye-related scene in frame 17"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 18"": ""the eye-related scene is a scene in which a man and a woman are in bed"",
  ""Eye-related scene in frame 19"": ""the eye-related scene is a scene in which a man and woman kiss"",
  ""Eye-related scene in frame 20"": ""person's eye is swollen"",
  ""Eye-related scene in frame 22"": ""the eye-related scene is a scene in the movie the dark knight''"",
  ""Eye-related scene in frame 23"": ""the eye-related scene is a scene in which a man is pouring wine into a glass"",
  ""Eye-related scene in frame 24"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 25"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 26"": ""the eye scene is a scene in which a man and woman dance in a club"",
  ""Eye-related scene in frame 28"": ""the eye-related scene takes place in a car"",
  ""Eye-related scene in frame 29"": ""a woman is walking down a dark hallway"",
  ""Eye-related scene in frame 30"": ""the eye scene is a scene in the movie ted"",
  ""Eye-related scene in frame 31"": ""the eye-related scene is a scene in which a man sits on a bench with a teddy bear"",
  ""Eye-related scene in frame 32"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 34"": ""the scene in which the teddy bear sits by the pond"",
  ""Eye-related scene in frame 35"": ""the eye-related scene takes place in the park"",
  ""Eye-related scene in frame 37"": ""the eye-related scene takes place in a hospital"",
  ""Eye-related scene in frame 38"": ""the scene in which the woman's eye is swollen"",
  ""Eye-related scene in frame 39"": ""the eye-related scene is a scene in which a man sits at a desk"",
  ""Eye-related scene in frame 40"": ""the eye-related scene is a scene in the movie the office''"",
  ""Eye-related scene in frame 41"": ""this is a scene in which a man is sitting at a desk"",
  ""Eye-related scene in frame 42"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 43"": ""in the scene where he is looking at his own eye"",
  ""Eye-related scene in frame 44"": ""the scene in which a man's eye is smashed"",
  ""Eye-related scene in frame 45"": ""the scene in which the teddy bear is looking at the camera"",
  ""Eye-related scene in frame 46"": ""the teddy bear in the street"",
  ""Eye-related scene in frame 48"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 49"": ""the scene in which the teddy bear looks at the woman"",
  ""Eye-related scene in frame 50"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 52"": ""a man in a white suit walks down a staircase"",
  ""Eye-related scene in frame 53"": ""the eye-related scene takes place in a hotel room"",
  ""Eye-related scene in frame 54"": ""the eye-related scene takes place in a hallway"",
  ""Eye-related scene in frame 56"": ""the eye-related scene in the movie is a scene in which a man in a superhero costume tries to get a woman's eye"",
  ""Eye-related scene in frame 57"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 58"": ""the scene where the teddy bear looks at the camera"",
  ""Eye-related scene in frame 59"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 60"": ""the teddy bear's eye"",
  ""Eye-related scene in frame 61"": ""the scene in which a teddy bear is sitting on a table"",
  ""Eye-related scene in frame 62"": ""the scene in which the teddy bear looks at the camera"",
  ""Eye-related scene in frame 63"": ""the eye-related scene takes place in a bathroom"",
  ""Eye-related scene in frame 64"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 65"": ""the eye-related scene is a scene in which a group of people are watching a movie"",
  ""Eye-related scene in frame 68"": ""the eye-related scene takes place in a bar"",
  ""Eye-related scene in frame 69"": ""the eye-related scene is a scene in which a woman is in a room with a mirror"",
  ""Eye-related scene in frame 70"": ""a man and a woman standing on a street at night"",
  ""Eye-related scene in frame 71"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 72"": ""the eye-related scene is a scene in which a woman is sitting at a desk"",
  ""Eye-related scene in frame 73"": ""the scene in which person is reading a book"",
  ""Eye-related scene in frame 74"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 75"": ""the eye-related scene is a scene in which jack nicholson's character is in a room"",
  ""Eye-related scene in frame 77"": ""the scene in which the teddy bear is thrown at person's eye"",
  ""Eye-related scene in frame 79"": ""the scene in which person is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 81"": ""a woman in a green dress and a man in a blue shirt"",
  ""Eye-related scene in frame 82"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 83"": ""the eye-related scene takes place in a bar"",
  ""Eye-related scene in frame 84"": ""the eye-related scene is a scene in which a man stares at a crowd of people"",
  ""Eye-related scene in frame 86"": ""the scene where the teddy bear is looking at the woman's eye"",
  ""Eye-related scene in frame 87"": ""the eye-related scene in 'ted'"",
  ""Eye-related scene in frame 88"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 89"": ""the eye-related scene is a scene in which a man and woman are sitting at a cafe"",
  ""Eye-related scene in frame 90"": ""a man is walking down a dark hallway"",
  ""Eye-related scene in frame 91"": ""the eye-related scene takes place in a bedroom"",
  ""Eye-related scene in frame 92"": ""the eye-related scene is a scene in which a man looks at a teddy bear"",
  ""Eye-related scene in frame 93"": ""the teddy bear's eyes"",
  ""Eye-related scene in frame 94"": ""the eye scene is a scene in which a person's eye is seen through a window"",
  ""Eye-related scene in frame 96"": ""the eye scene is a scene in which a man is driving a red car"",
  ""Eye-related scene in frame 97"": ""the scene in which the man is talking on the phone"",
  ""Eye-related scene in frame 98"": ""the eye-related scene is a scene in which a man is talking on his cell phone"",
  ""Eye-related scene in frame 100"": ""blurry motion of a car in a city"",
  ""Eye-related scene in frame 101"": ""a woman is driving a car with her eyes closed"",
  ""Eye-related scene in frame 102"": ""the eye-related scene is a scene in which a man is driving a car"",
  ""Eye-related scene in frame 103"": ""a car driving down the street at night"",
  ""Eye-related scene in frame 104"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 105"": ""the eye scene is a scene in which a man is walking down the street"",
  ""Eye-related scene in frame 106"": ""the eye-related scene is a scene in which a man and a woman look at each other"",
  ""Eye-related scene in frame 107"": ""the eye-related scene is a scene in which a man is in a dark room"",
  ""Eye-related scene in frame 108"": ""a baseball game is being played at night"",
  ""Eye-related scene in frame 109"": ""the eye-related scene is a blurry shot of person's eyes"",
  ""Eye-related scene in frame 110"": ""a stuffed teddy bear in a baseball stadium"",
  ""Eye-related scene in frame 111"": ""the eye-related scene takes place in a stadium"",
  ""Eye-related scene in frame 112"": ""the eye-related scene is a scene in the movie"",
  ""Eye-related scene in frame 113"": ""the scene in which a person's eye is shattered"",
  ""Eye-related scene in frame 114"": ""the scene in which a woman's eye is pierced"",
  ""Eye-related scene in frame 116"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 117"": ""the eye-related scene in the movie ted""
}"|Although there are multiple scenes involving eyes in the movie, none of them depict the specific trope of 'Eye Scream' where something horrible happens to the eyes, usually involving the invasion of the eye sockets by a foreign body. The scenes described do not match the definition of this trope.||
no|no|tt1637725_46|Screw This, I'm Outta Here!|"Is the trope ""Screw This, I'm Outta Here!"", which means ""Screw you guys, I'm going home."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_46(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Screw This, I'm Outta Here!
    # Definition: A character abruptly leaves a situation, expressing frustration or disinterest.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for signs of a character leaving abruptly.
    # 2. Behavior Analysis: Look for visual cues like walking away or expressions of frustration.
    # 3. Contextual Analysis: Consider the context to determine if the departure aligns with the trope.
    # 4. Answer Selection: Use select_answer to choose the most likely answer based on the analysis.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for signs of a character leaving abruptly
        departure_query = frame.simple_query(""Is there a character leaving abruptly?"", to_yesno=True)
        
        if ""yes"" in departure_query.lower():
            # Collect information about the departure event
            departure_description = frame.simple_query(""Describe the departure event in detail."")
            info[f""Departure in {i} th frame""] = departure_description

    # Answer the query based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Departure in 0 th frame"": ""the departure event is a celebration of the end of the series"",
  ""Departure in 1 th frame"": ""a young man leaves his home in the snow"",
  ""Departure in 2 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 3 th frame"": ""a young boy leaves a room with his mother"",
  ""Departure in 4 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 5 th frame"": ""a man leaves his wife and son in a car"",
  ""Departure in 6 th frame"": ""a young boy leaves his home in a tent"",
  ""Departure in 7 th frame"": ""the teddy bear's departure"",
  ""Departure in 8 th frame"": ""a man and a woman leave a house"",
  ""Departure in 9 th frame"": ""the teddy bear's departure"",
  ""Departure in 10 th frame"": ""the car is parked in the parking lot"",
  ""Departure in 11 th frame"": ""person's departure from the office in person"",
  ""Departure in 12 th frame"": ""he leaves the office in a hurry"",
  ""Departure in 13 th frame"": ""person's departure from a car dealership"",
  ""Departure in 14 th frame"": ""person's character leaves the office in a car"",
  ""Departure in 15 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 16 th frame"": ""a teddy bear leaves the scene"",
  ""Departure in 17 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 18 th frame"": ""person and person's departure from the bedroom"",
  ""Departure in 19 th frame"": ""the couple kisses each other and leaves"",
  ""Departure in 20 th frame"": ""person leaves the office with a handbag"",
  ""Departure in 21 th frame"": ""the departure event is a departure from the office"",
  ""Departure in 22 th frame"": ""the departure event is a scene in the movie"",
  ""Departure in 23 th frame"": ""he leaves a bottle of champagne on the table"",
  ""Departure in 24 th frame"": ""describe the departure event in detail - departure stock videos & royalty-free footage"",
  ""Departure in 25 th frame"": ""a man leaves a restaurant with his wife"",
  ""Departure in 26 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 27 th frame"": ""a woman leaves a restaurant with her boyfriend"",
  ""Departure in 28 th frame"": ""he leaves the car in a hurry"",
  ""Departure in 29 th frame"": ""a woman leaves a house in a white dress"",
  ""Departure in 30 th frame"": ""the teddy bear's departure"",
  ""Departure in 31 th frame"": ""the teddy bear's departure"",
  ""Departure in 32 th frame"": ""the teddy bear's departure"",
  ""Departure in 33 th frame"": ""the teddy bear leaves the office"",
  ""Departure in 34 th frame"": ""the teddy bear's departure"",
  ""Departure in 35 th frame"": ""person's character, person, leaves the park"",
  ""Departure in 36 th frame"": ""the departure event is a departure event in the film"",
  ""Departure in 37 th frame"": ""a man leaves a woman in a car"",
  ""Departure in 38 th frame"": ""the departure of a character from a scene"",
  ""Departure in 39 th frame"": ""person's departure from the company he worked for"",
  ""Departure in 40 th frame"": ""person's departure from the office in the movie"",
  ""Departure in 41 th frame"": ""describe the departure event in detail person, person"",
  ""Departure in 42 th frame"": ""the teddy bear's departure"",
  ""Departure in 43 th frame"": ""the teddy bear's departure"",
  ""Departure in 44 th frame"": ""a man walks into a grocery store"",
  ""Departure in 45 th frame"": ""the teddy bear's departure"",
  ""Departure in 46 th frame"": ""the teddy bear leaves the scene"",
  ""Departure in 47 th frame"": ""the teddy bear's departure"",
  ""Departure in 48 th frame"": ""person, person, person, person, person"",
  ""Departure in 49 th frame"": ""the teddy bear leaves the restaurant"",
  ""Departure in 50 th frame"": ""a man and a woman leave a restaurant"",
  ""Departure in 51 th frame"": ""a group of people leaving a house"",
  ""Departure in 52 th frame"": ""a party is held at a hotel"",
  ""Departure in 53 th frame"": ""a man leaves a room with a woman"",
  ""Departure in 54 th frame"": ""a man and a woman leave a building"",
  ""Departure in 56 th frame"": ""he leaves the party in a red suit"",
  ""Departure in 57 th frame"": ""the teddy bear leaves the party"",
  ""Departure in 58 th frame"": ""the teddy bear leaves the party"",
  ""Departure in 59 th frame"": ""- describe the departure event stock videos & royalty-free footage"",
  ""Departure in 60 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 61 th frame"": ""a teddy bear and a teddy bear"",
  ""Departure in 62 th frame"": ""the teddy bear's departure"",
  ""Departure in 63 th frame"": ""a man leaves a room with a knife"",
  ""Departure in 64 th frame"": ""the teddy bear's departure"",
  ""Departure in 65 th frame"": ""a group of people leave a party"",
  ""Departure in 66 th frame"": ""a group of people are leaving a party"",
  ""Departure in 67 th frame"": ""a teddy bear is placed on a woman's head"",
  ""Departure in 68 th frame"": ""a group of people leave a party"",
  ""Departure in 69 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 70 th frame"": ""a man and a woman standing on a street at night"",
  ""Departure in 71 th frame"": ""the teddy bear's departure"",
  ""Departure in 72 th frame"": ""the departure event is a departure event in the movie"",
  ""Departure in 73 th frame"": ""person's departure from a hotel room"",
  ""Departure in 74 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 75 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 76 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 77 th frame"": ""the teddy bear is thrown out of the window"",
  ""Departure in 78 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 79 th frame"": ""a man is laying on the floor with a suitcase"",
  ""Departure in 80 th frame"": ""describe the departure event in detail, including"",
  ""Departure in 81 th frame"": ""a man and a woman leave a hotel"",
  ""Departure in 82 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 83 th frame"": ""the departure event is a departure event in the movie"",
  ""Departure in 84 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 85 th frame"": ""a group of people leave a concert"",
  ""Departure in 86 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 87 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 88 th frame"": ""the teddy bear leaves the house"",
  ""Departure in 89 th frame"": ""a man leaves a restaurant with a woman"",
  ""Departure in 90 th frame"": ""i'm going to the airport"",
  ""Departure in 91 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 92 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 93 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 94 th frame"": ""the door is opened and a person leaves"",
  ""Departure in 95 th frame"": ""a teddy bear leaves the room"",
  ""Departure in 96 th frame"": ""the car is parked in a parking lot"",
  ""Departure in 97 th frame"": ""a man leaves his car in the middle of the night"",
  ""Departure in 98 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 99 th frame"": ""a man leaves his car in the dark"",
  ""Departure in 100 th frame"": ""a car leaves a city at night"",
  ""Departure in 101 th frame"": ""a woman is driving a car on the highway"",
  ""Departure in 102 th frame"": ""a car drives away from a building"",
  ""Departure in 103 th frame"": ""a car leaves a city at night"",
  ""Departure in 104 th frame"": ""the teddy bear's departure"",
  ""Departure in 105 th frame"": ""a man leaves a bar and walks down the street"",
  ""Departure in 106 th frame"": ""the departure event is the end of the film"",
  ""Departure in 107 th frame"": ""a man is seen leaving a building"",
  ""Departure in 108 th frame"": ""a baseball game at a baseball stadium"",
  ""Departure in 109 th frame"": ""a man leaves a building with a gun"",
  ""Departure in 110 th frame"": ""the teddy bear leaves the stadium"",
  ""Departure in 111 th frame"": ""a young woman leaves a soccer stadium"",
  ""Departure in 112 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 113 th frame"": ""a person leaves a room in a hotel"",
  ""Departure in 114 th frame"": ""a young woman leaves a hotel room"",
  ""Departure in 115 th frame"": ""the teddy bear is thrown into a river"",
  ""Departure in 116 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 117 th frame"": ""a teddy bear leaves the room"",
  ""Departure in 118 th frame"": ""the twilight saga"",
  ""Departure in 119 th frame"": ""the departure event is a farewell party""
}"|The trope `Screw This, I'm Outta Here!` involves a character expressing a sudden decision to abandon a situation or task, often accompanied by a sense of frustration or resignation. The video frames depict various departure scenes but do not specifically show a character expressing a defiant or frustrated departure||
no|no|tt1637725_47|Kick the Dog|"Is the trope ""Kick the Dog"", which means ""When a character does something evil for no apparent gain, because the author wants to demonstrate that he's not a nice guy and shift 
audience sympathy away from him."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_47(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Kick the Dog
    # Definition: An act of cruelty by a character, typically towards a more vulnerable or defenseless entity, to establish the character's malevolence
    # Thought: The trope detection involves three steps:
    # 1. Context Information Collection: To observe attacker's malevolence and victim's defenseless entity, we need to concern action and event in adjacent frames and use them as context to understand the story
    # 2. Event Observation: ""Kick the Dog"" would present in attack event within a frame. Use the context from first step as condition and query more detail in advance    
    # 3. Answer Selection: With information collected from second step, we leave the reasoning and question answering to select_answer api
    video_segment = VideoSegment(video, annotation)
    # Create a info dictionary, which would later pass to select_answer api
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # understanding current frame with context information
        caption_query = ""What is happening in the scene? please answer with at least 10 words""
        caption = frame.simple_query(caption_query)
        # check if there is any potential attack event
        has_attack_event = frame.llm_query(f""Is there any potential attack event in description '{caption}'?"", to_yesno=True)
        if 'yes' in has_attack_event.lower():
            # query the event in detail
            attack_event_query = ""What attack event is in the scene and what action and emotion does attacker and victim have, please answer with at least 40 words""     
            attack_event_description = frame.simple_query(attack_event_query)
            info[f""Attack event in {i} th frame""] = attack_event_description
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Attack event in 45 th frame"": ""the victim is being attacked by a tiger""
}"|The trope `Kick the Dog` involves a character doing something evil for no apparent gain to demonstrate they are not a nice person. In this case, the attack event by a tiger in the 45th frame does not involve a character intentionally doing something evil, but rather a victim being attacked by a wild animal.||
no|yes|tt1637725_62|Blatant Lies|"Is the trope ""Blatant Lies"", which means ""A glaringly obvious lie."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_62(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Blatant Lies
    # Definition: A glaringly obvious lie.
    # Thought Process:
    # 1. Frame Selection: Analyze frames for instances where characters make statements that are clearly false.
    # 2. Contextual Analysis: Look for cues such as character expressions or contradictory actions that indicate a lie.
    # 3. Answer Selection: Determine if the trope is relevant based on the presence of obvious lies in the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        # Check for instances of blatant lies in dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any blatant lies in the dialogue?"", to_yesno=True)
        # Check for visual cues of lies
        visual_cues = frame.simple_query(""Are there any visual cues indicating lies?"", to_yesno=True)
        if ""yes"" in dialogue_analysis or ""yes"" in visual_cues:
            info[f""Blatant lies detected in frame {i}""] = ""Yes""
    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Blatant lies detected in frame 0"": ""Yes"",
  ""Blatant lies detected in frame 1"": ""Yes"",
  ""Blatant lies detected in frame 2"": ""Yes"",
  ""Blatant lies detected in frame 3"": ""Yes"",
  ""Blatant lies detected in frame 5"": ""Yes"",
  ""Blatant lies detected in frame 6"": ""Yes"",
  ""Blatant lies detected in frame 7"": ""Yes"",
  ""Blatant lies detected in frame 8"": ""Yes"",
  ""Blatant lies detected in frame 9"": ""Yes"",
  ""Blatant lies detected in frame 10"": ""Yes"",
  ""Blatant lies detected in frame 11"": ""Yes"",
  ""Blatant lies detected in frame 12"": ""Yes"",
  ""Blatant lies detected in frame 13"": ""Yes"",
  ""Blatant lies detected in frame 14"": ""Yes"",
  ""Blatant lies detected in frame 15"": ""Yes"",
  ""Blatant lies detected in frame 16"": ""Yes"",
  ""Blatant lies detected in frame 17"": ""Yes"",
  ""Blatant lies detected in frame 18"": ""Yes"",
  ""Blatant lies detected in frame 19"": ""Yes"",
  ""Blatant lies detected in frame 20"": ""Yes"",
  ""Blatant lies detected in frame 22"": ""Yes"",
  ""Blatant lies detected in frame 23"": ""Yes"",
  ""Blatant lies detected in frame 24"": ""Yes"",
  ""Blatant lies detected in frame 25"": ""Yes"",
  ""Blatant lies detected in frame 26"": ""Yes"",
  ""Blatant lies detected in frame 27"": ""Yes"",
  ""Blatant lies detected in frame 28"": ""Yes"",
  ""Blatant lies detected in frame 29"": ""Yes"",
  ""Blatant lies detected in frame 30"": ""Yes"",
  ""Blatant lies detected in frame 31"": ""Yes"",
  ""Blatant lies detected in frame 32"": ""Yes"",
  ""Blatant lies detected in frame 34"": ""Yes"",
  ""Blatant lies detected in frame 35"": ""Yes"",
  ""Blatant lies detected in frame 37"": ""Yes"",
  ""Blatant lies detected in frame 38"": ""Yes"",
  ""Blatant lies detected in frame 39"": ""Yes"",
  ""Blatant lies detected in frame 40"": ""Yes"",
  ""Blatant lies detected in frame 41"": ""Yes"",
  ""Blatant lies detected in frame 42"": ""Yes"",
  ""Blatant lies detected in frame 43"": ""Yes"",
  ""Blatant lies detected in frame 44"": ""Yes"",
  ""Blatant lies detected in frame 45"": ""Yes"",
  ""Blatant lies detected in frame 46"": ""Yes"",
  ""Blatant lies detected in frame 47"": ""Yes"",
  ""Blatant lies detected in frame 48"": ""Yes"",
  ""Blatant lies detected in frame 49"": ""Yes"",
  ""Blatant lies detected in frame 50"": ""Yes"",
  ""Blatant lies detected in frame 52"": ""Yes"",
  ""Blatant lies detected in frame 53"": ""Yes"",
  ""Blatant lies detected in frame 54"": ""Yes"",
  ""Blatant lies detected in frame 55"": ""Yes"",
  ""Blatant lies detected in frame 56"": ""Yes"",
  ""Blatant lies detected in frame 57"": ""Yes"",
  ""Blatant lies detected in frame 58"": ""Yes"",
  ""Blatant lies detected in frame 59"": ""Yes"",
  ""Blatant lies detected in frame 60"": ""Yes"",
  ""Blatant lies detected in frame 61"": ""Yes"",
  ""Blatant lies detected in frame 62"": ""Yes"",
  ""Blatant lies detected in frame 63"": ""Yes"",
  ""Blatant lies detected in frame 64"": ""Yes"",
  ""Blatant lies detected in frame 65"": ""Yes"",
  ""Blatant lies detected in frame 66"": ""Yes"",
  ""Blatant lies detected in frame 67"": ""Yes"",
  ""Blatant lies detected in frame 68"": ""Yes"",
  ""Blatant lies detected in frame 69"": ""Yes"",
  ""Blatant lies detected in frame 70"": ""Yes"",
  ""Blatant lies detected in frame 71"": ""Yes"",
  ""Blatant lies detected in frame 72"": ""Yes"",
  ""Blatant lies detected in frame 73"": ""Yes"",
  ""Blatant lies detected in frame 74"": ""Yes"",
  ""Blatant lies detected in frame 75"": ""Yes"",
  ""Blatant lies detected in frame 76"": ""Yes"",
  ""Blatant lies detected in frame 77"": ""Yes"",
  ""Blatant lies detected in frame 78"": ""Yes"",
  ""Blatant lies detected in frame 79"": ""Yes"",
  ""Blatant lies detected in frame 81"": ""Yes"",
  ""Blatant lies detected in frame 82"": ""Yes"",
  ""Blatant lies detected in frame 83"": ""Yes"",
  ""Blatant lies detected in frame 84"": ""Yes"",
  ""Blatant lies detected in frame 85"": ""Yes"",
  ""Blatant lies detected in frame 86"": ""Yes"",
  ""Blatant lies detected in frame 87"": ""Yes"",
  ""Blatant lies detected in frame 88"": ""Yes"",
  ""Blatant lies detected in frame 89"": ""Yes"",
  ""Blatant lies detected in frame 90"": ""Yes"",
  ""Blatant lies detected in frame 91"": ""Yes"",
  ""Blatant lies detected in frame 92"": ""Yes"",
  ""Blatant lies detected in frame 93"": ""Yes"",
  ""Blatant lies detected in frame 94"": ""Yes"",
  ""Blatant lies detected in frame 95"": ""Yes"",
  ""Blatant lies detected in frame 96"": ""Yes"",
  ""Blatant lies detected in frame 97"": ""Yes"",
  ""Blatant lies detected in frame 98"": ""Yes"",
  ""Blatant lies detected in frame 99"": ""Yes"",
  ""Blatant lies detected in frame 100"": ""Yes"",
  ""Blatant lies detected in frame 101"": ""Yes"",
  ""Blatant lies detected in frame 102"": ""Yes"",
  ""Blatant lies detected in frame 103"": ""Yes"",
  ""Blatant lies detected in frame 104"": ""Yes"",
  ""Blatant lies detected in frame 105"": ""Yes"",
  ""Blatant lies detected in frame 106"": ""Yes"",
  ""Blatant lies detected in frame 107"": ""Yes"",
  ""Blatant lies detected in frame 108"": ""Yes"",
  ""Blatant lies detected in frame 109"": ""Yes"",
  ""Blatant lies detected in frame 110"": ""Yes"",
  ""Blatant lies detected in frame 111"": ""Yes"",
  ""Blatant lies detected in frame 112"": ""Yes"",
  ""Blatant lies detected in frame 113"": ""Yes"",
  ""Blatant lies detected in frame 114"": ""Yes"",
  ""Blatant lies detected in frame 115"": ""Yes"",
  ""Blatant lies detected in frame 116"": ""Yes"",
  ""Blatant lies detected in frame 117"": ""Yes""
}"|The presence of blatant lies in frames 0 to 117 does not necessarily mean that the trope 'Blatant Lies' is relevant to the movie as a whole. It could be a specific instance within the movie and not a recurring theme.||
yes|no|tt1637725_71|Irony|"Is the trope ""Irony"", which means ""The intended meaning is an inversion of the plain meaning."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_71(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Irony
    # Definition: The intended meaning is an inversion of the plain meaning.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations where the intended meaning is opposite to the plain meaning.
    # 2. Contextual Analysis: Look for scenarios where actions or events contradict their expected outcomes.
    # 3. Irony Detection: Identify instances where there is a clear discrepancy between what is expected and what actually occurs.
    # 4. Answer Selection: Use the select_answer API to determine if the trope of Irony is relevant to the movie based on the detected instances.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, which can provide context for detecting irony
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # Analyze the dialogue for any ironic statements or situations
        irony_detection = frame.llm_query(subtitles_info + ""Is there any irony in the dialogue?"", to_yesno=True)
        
        # Check for visual cues or actions that suggest irony
        visual_irony_detection = frame.simple_query(""Is there any visual irony?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests irony, collect this information
        if ""yes"" in irony_detection or ""yes"" in visual_irony_detection:
            info[f""Irony in dialogue at frame {i}""] = irony_detection
            info[f""Visual irony at frame {i}""] = visual_irony_detection
    
    # Use the collected information to determine if the trope of Irony is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Irony in dialogue at frame 0"": ""No."",
  ""Visual irony at frame 0"": ""yes - the earth is surrounded by gold"",
  ""Irony in dialogue at frame 1"": ""No"",
  ""Visual irony at frame 1"": ""yes the polar bear''"",
  ""Irony in dialogue at frame 2"": ""No"",
  ""Visual irony at frame 2"": ""yes, he is holding a stuffed bear"",
  ""Irony in dialogue at frame 3"": ""Yes"",
  ""Visual irony at frame 3"": ""yes, the boy is standing in front of the window"",
  ""Irony in dialogue at frame 4"": ""No"",
  ""Visual irony at frame 4"": ""yes - teddy bear in the room"",
  ""Irony in dialogue at frame 5"": ""No"",
  ""Visual irony at frame 5"": ""yes - a family in the kitchen"",
  ""Irony in dialogue at frame 7"": ""Yes"",
  ""Visual irony at frame 7"": ""yes - teddy bears"",
  ""Irony in dialogue at frame 8"": ""Yes"",
  ""Visual irony at frame 8"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 9"": ""Yes"",
  ""Visual irony at frame 9"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 10"": ""No"",
  ""Visual irony at frame 10"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 11"": ""Yes"",
  ""Visual irony at frame 11"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 12"": ""No"",
  ""Visual irony at frame 12"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 13"": ""No"",
  ""Visual irony at frame 13"": ""yes'' yes''"",
  ""Irony in dialogue at frame 14"": ""No."",
  ""Visual irony at frame 14"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 15"": ""Yes"",
  ""Visual irony at frame 15"": ""yes, a man sitting on a couch with a teddy bear"",
  ""Irony in dialogue at frame 16"": ""No"",
  ""Visual irony at frame 16"": ""yes, a teddy bear on a couch"",
  ""Irony in dialogue at frame 17"": ""Yes"",
  ""Visual irony at frame 17"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 18"": ""No"",
  ""Visual irony at frame 18"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 19"": ""No"",
  ""Visual irony at frame 19"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 20"": ""No"",
  ""Visual irony at frame 20"": ""yes the office'', the office'', the office''"",
  ""Irony in dialogue at frame 22"": ""No"",
  ""Visual irony at frame 22"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 23"": ""Yes"",
  ""Visual irony at frame 23"": ""yes, he is pouring the wine"",
  ""Irony in dialogue at frame 24"": ""Yes"",
  ""Visual irony at frame 24"": ""yes - dance stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 25"": ""No"",
  ""Visual irony at frame 25"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 26"": ""Yes"",
  ""Visual irony at frame 26"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 28"": ""No"",
  ""Visual irony at frame 28"": ""yes, he is driving a car"",
  ""Irony in dialogue at frame 29"": ""No"",
  ""Visual irony at frame 29"": ""yes, the woman is wearing a dress"",
  ""Irony in dialogue at frame 30"": ""Yes"",
  ""Visual irony at frame 30"": ""yes person, person, person, person, person, person, person"",
  ""Irony in dialogue at frame 31"": ""Yes"",
  ""Visual irony at frame 31"": ""yes, the man is holding a teddy bear"",
  ""Irony in dialogue at frame 32"": ""Yes"",
  ""Visual irony at frame 32"": ""yes, a teddy bear sitting on a bench"",
  ""Irony in dialogue at frame 34"": ""No"",
  ""Visual irony at frame 34"": ""yes, the teddy bear is sitting on the ground"",
  ""Irony in dialogue at frame 35"": ""Yes"",
  ""Visual irony at frame 35"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 37"": ""No"",
  ""Visual irony at frame 37"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 38"": ""No"",
  ""Visual irony at frame 38"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 39"": ""No"",
  ""Visual irony at frame 39"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 40"": ""No"",
  ""Visual irony at frame 40"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 41"": ""No"",
  ""Visual irony at frame 41"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 42"": ""Yes"",
  ""Visual irony at frame 42"": ""yes, the man is sitting on the couch with a teddy bear"",
  ""Irony in dialogue at frame 43"": ""No"",
  ""Visual irony at frame 43"": ""yes, he is holding a teddy bear"",
  ""Irony in dialogue at frame 44"": ""No"",
  ""Visual irony at frame 44"": ""yes, he's wearing a tie"",
  ""Irony in dialogue at frame 45"": ""No"",
  ""Visual irony at frame 45"": ""yes, the teddy bear is in the dark"",
  ""Irony in dialogue at frame 46"": ""Yes"",
  ""Visual irony at frame 46"": ""yes, there is a teddy bear"",
  ""Irony in dialogue at frame 47"": ""No"",
  ""Visual irony at frame 47"": ""yes, a teddy bear"",
  ""Irony in dialogue at frame 48"": ""Yes"",
  ""Visual irony at frame 48"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 49"": ""Yes"",
  ""Visual irony at frame 49"": ""yes person, person, person, person, person, person"",
  ""Irony in dialogue at frame 50"": ""No"",
  ""Visual irony at frame 50"": ""yes - a man and woman in a restaurant"",
  ""Irony in dialogue at frame 53"": ""No"",
  ""Visual irony at frame 53"": ""yes, a man is standing next to a woman"",
  ""Irony in dialogue at frame 56"": ""No"",
  ""Visual irony at frame 56"": ""yes, he is wearing a superhero costume"",
  ""Irony in dialogue at frame 57"": ""No"",
  ""Visual irony at frame 57"": ""yes, teddy bears, teddy bears, teddy bears, teddy bears"",
  ""Irony in dialogue at frame 58"": ""No"",
  ""Visual irony at frame 58"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 59"": ""No"",
  ""Visual irony at frame 59"": ""yes - no stock videos & footage"",
  ""Irony in dialogue at frame 60"": ""Yes"",
  ""Visual irony at frame 60"": ""yes, ted teddy bear"",
  ""Irony in dialogue at frame 61"": ""No"",
  ""Visual irony at frame 61"": ""yes, the teddy bear is sitting on the table"",
  ""Irony in dialogue at frame 63"": ""No"",
  ""Visual irony at frame 63"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 64"": ""No"",
  ""Visual irony at frame 64"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 65"": ""No"",
  ""Visual irony at frame 65"": ""yes'' yes''"",
  ""Irony in dialogue at frame 67"": ""Yes"",
  ""Visual irony at frame 67"": ""yes, the teddy bear is wearing a shirt"",
  ""Irony in dialogue at frame 69"": ""Yes"",
  ""Visual irony at frame 69"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 70"": ""No"",
  ""Visual irony at frame 70"": ""yes, the couple is standing in the middle of the street"",
  ""Irony in dialogue at frame 71"": ""No"",
  ""Visual irony at frame 71"": ""yes, the teddy bear is standing in the street"",
  ""Irony in dialogue at frame 72"": ""Yes"",
  ""Visual irony at frame 72"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 73"": ""Yes"",
  ""Visual irony at frame 73"": ""yes, the man is reading a book in bed"",
  ""Irony in dialogue at frame 74"": ""Yes"",
  ""Visual irony at frame 74"": ""yes, the teddy bear is standing in front of the window"",
  ""Irony in dialogue at frame 75"": ""Yes"",
  ""Visual irony at frame 75"": ""yes - a man in a black shirt"",
  ""Irony in dialogue at frame 77"": ""Yes"",
  ""Visual irony at frame 77"": ""yes, he is holding a stuffed animal"",
  ""Irony in dialogue at frame 79"": ""Yes"",
  ""Visual irony at frame 79"": ""yes, he is laying on top of a suitcase"",
  ""Irony in dialogue at frame 81"": ""Yes"",
  ""Visual irony at frame 81"": ""yes, the woman is wearing a dress"",
  ""Irony in dialogue at frame 82"": ""No"",
  ""Visual irony at frame 82"": ""yes, a teddy bear in a room"",
  ""Irony in dialogue at frame 83"": ""No"",
  ""Visual irony at frame 83"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 84"": ""Yes"",
  ""Visual irony at frame 84"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 86"": ""Yes"",
  ""Visual irony at frame 86"": ""yes, a teddy bear in a room"",
  ""Irony in dialogue at frame 87"": ""No"",
  ""Visual irony at frame 87"": ""yes - teddy bears"",
  ""Irony in dialogue at frame 88"": ""No"",
  ""Visual irony at frame 88"": ""yes, the teddy bear is standing in the doorway"",
  ""Irony in dialogue at frame 89"": ""Yes"",
  ""Visual irony at frame 89"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 90"": ""No"",
  ""Visual irony at frame 90"": ""yes, the light is coming from the window"",
  ""Irony in dialogue at frame 91"": ""No"",
  ""Visual irony at frame 91"": ""yes - a child's bedroom"",
  ""Irony in dialogue at frame 92"": ""Yes"",
  ""Visual irony at frame 92"": ""yes, a teddy bear"",
  ""Irony in dialogue at frame 94"": ""Yes"",
  ""Visual irony at frame 94"": ""yes, the door has a glass panel"",
  ""Irony in dialogue at frame 95"": ""No"",
  ""Visual irony at frame 95"": ""yes, the teddy bear is wearing a shirt"",
  ""Irony in dialogue at frame 96"": ""Yes"",
  ""Visual irony at frame 96"": ""yes, the car is parked in the street"",
  ""Irony in dialogue at frame 97"": ""No"",
  ""Visual irony at frame 97"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 98"": ""No"",
  ""Visual irony at frame 98"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 100"": ""Yes"",
  ""Visual irony at frame 100"": ""yes - car stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 101"": ""No"",
  ""Visual irony at frame 101"": ""yes - a woman driving a car"",
  ""Irony in dialogue at frame 102"": ""No"",
  ""Visual irony at frame 102"": ""yes - a car driving down the street"",
  ""Irony in dialogue at frame 103"": ""Yes"",
  ""Visual irony at frame 103"": ""yes, the car is parked on the street"",
  ""Irony in dialogue at frame 104"": ""Yes"",
  ""Visual irony at frame 104"": ""yes, the teddy bear is standing on the street"",
  ""Irony in dialogue at frame 105"": ""Yes"",
  ""Visual irony at frame 105"": ""yes, i think there is some irony"",
  ""Irony in dialogue at frame 106"": ""No"",
  ""Visual irony at frame 106"": ""yes, but it's hard to tell"",
  ""Irony in dialogue at frame 107"": ""No"",
  ""Visual irony at frame 107"": ""yes, he's wearing a shirt"",
  ""Irony in dialogue at frame 108"": ""Yes"",
  ""Visual irony at frame 108"": ""yes, the stadium is lit up at night"",
  ""Irony in dialogue at frame 109"": ""Yes"",
  ""Visual irony at frame 109"": ""yes, the man is running down the stairs"",
  ""Irony in dialogue at frame 110"": ""Yes"",
  ""Visual irony at frame 110"": ""yes, the teddy bear is sitting in the stadium"",
  ""Irony in dialogue at frame 111"": ""Yes"",
  ""Visual irony at frame 111"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 112"": ""No"",
  ""Visual irony at frame 112"": ""yes - he's leaning against the wall"",
  ""Irony in dialogue at frame 113"": ""Yes"",
  ""Visual irony at frame 113"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 114"": ""Yes"",
  ""Visual irony at frame 114"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 115"": ""Yes"",
  ""Visual irony at frame 115"": ""yes, a teddy bear in the dark"",
  ""Irony in dialogue at frame 116"": ""Yes"",
  ""Visual irony at frame 116"": ""yes, the man is holding the teddy bear"",
  ""Irony in dialogue at frame 117"": ""No"",
  ""Visual irony at frame 117"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 118"": ""No"",
  ""Visual irony at frame 118"": ""yes - teddy bears""
}"|The presence of instances of irony in both dialogue and visuals throughout the movie suggests that the trope 'Irony' is relevant to the movie. The inversion of plain meaning and the unexpected juxtaposition in various frames indicate the intentional use of irony to create depth and complexity in the storytelling.||
yes|no|tt1637725_73|Stealth Pun|"Is the trope ""Stealth Pun"", which means ""The writers put in a joke (almost always a pun), but never make or put in a Punch Line or explicit statement, hiding it in the set up of the joke. "", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_73(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Stealth Pun
    # Definition: A joke, typically a pun, is included by the writers but is not highlighted with a punchline or explicit statement. It's hidden within the setup of the joke, requiring the audience to notice and interpret it themselves.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential visual or audio cues that might indicate a hidden joke or pun. This requires understanding both the context and the elements present in the scene.
    # 2. Contextual Analysis: Since the essence of a Stealth Pun lies in the setup and requires audience interpretation, we need to look for elements that are inconspicuously out of place or cleverly integrated into the context but might not be immediately obvious.
    # 3. Detecting Puns: This involves analyzing the text or dialogue for play on words, and visual elements for any visual puns or jokes that rely on the visual context but are not explicitly acknowledged in the video.
    # 4. Answer Selection: Use the select_answer API to determine the most probable answer based on the analyzed data, considering the subtlety and clever integration of puns within the video content.
    
    video_segment = VideoSegment(video, annotation)
    
    # Create an info dictionary to hold detected elements that might contribute to a Stealth Pun
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # use llm_query to analyze dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any puns in the dialogue?"", to_yesno=True)
        
        # use simple_query to analyze image
        visual_pun_analysis = frame.simple_query(""Are there any visual puns?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests a pun, collect this information
        if ""yes"" in dialogue_analysis or ""yes"" in visual_pun_analysis:
            info[f""Pun in dialogue at frame {i}""] = dialogue_analysis
            info[f""Visual pun at frame {i}""] = visual_pun_analysis
    
    # Since Stealth Puns are about subtlety and not explicitly pointing out the joke, we need to balance detection with the likelihood of an actual pun being present without explicit acknowledgment.
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Pun in dialogue at frame 0"": ""No"",
  ""Visual pun at frame 0"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 1"": ""No"",
  ""Visual pun at frame 1"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 2"": ""No"",
  ""Visual pun at frame 2"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 3"": ""Yes"",
  ""Visual pun at frame 3"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 5"": ""No"",
  ""Visual pun at frame 5"": ""yes - i think there are some"",
  ""Pun in dialogue at frame 6"": ""No"",
  ""Visual pun at frame 6"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 7"": ""No"",
  ""Visual pun at frame 7"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 8"": ""No"",
  ""Visual pun at frame 8"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 9"": ""No"",
  ""Visual pun at frame 9"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 10"": ""No"",
  ""Visual pun at frame 10"": ""yes, there is a car in the parking lot"",
  ""Pun in dialogue at frame 11"": ""No"",
  ""Visual pun at frame 11"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 12"": ""No"",
  ""Visual pun at frame 12"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 13"": ""Yes"",
  ""Visual pun at frame 13"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 14"": ""No."",
  ""Visual pun at frame 14"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 15"": ""No"",
  ""Visual pun at frame 15"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 16"": ""No"",
  ""Visual pun at frame 16"": ""yes, a teddy bear"",
  ""Pun in dialogue at frame 17"": ""Yes"",
  ""Visual pun at frame 17"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 18"": ""No"",
  ""Visual pun at frame 18"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 19"": ""No"",
  ""Visual pun at frame 19"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 20"": ""No"",
  ""Visual pun at frame 20"": ""yes'' yes''"",
  ""Pun in dialogue at frame 21"": ""No"",
  ""Visual pun at frame 21"": ""yes'' yes"",
  ""Pun in dialogue at frame 22"": ""No"",
  ""Visual pun at frame 22"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 23"": ""Yes"",
  ""Visual pun at frame 23"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 25"": ""No"",
  ""Visual pun at frame 25"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 26"": ""No"",
  ""Visual pun at frame 26"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 27"": ""Yes"",
  ""Visual pun at frame 27"": ""yes - a man and a woman"",
  ""Pun in dialogue at frame 28"": ""No"",
  ""Visual pun at frame 28"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 29"": ""No"",
  ""Visual pun at frame 29"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 30"": ""No"",
  ""Visual pun at frame 30"": ""yes person, person, person, person, person, person, person, person, person"",
  ""Pun in dialogue at frame 31"": ""No"",
  ""Visual pun at frame 31"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 32"": ""No"",
  ""Visual pun at frame 32"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 33"": ""Yes"",
  ""Visual pun at frame 33"": ""yes, there are visual puns throughout the movie"",
  ""Pun in dialogue at frame 34"": ""No"",
  ""Visual pun at frame 34"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 35"": ""No"",
  ""Visual pun at frame 35"": ""yes'' no''"",
  ""Pun in dialogue at frame 36"": ""No"",
  ""Visual pun at frame 36"": ""yes - i'm not sure"",
  ""Pun in dialogue at frame 37"": ""No"",
  ""Visual pun at frame 37"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 38"": ""No"",
  ""Visual pun at frame 38"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 39"": ""No"",
  ""Visual pun at frame 39"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 40"": ""No"",
  ""Visual pun at frame 40"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 41"": ""No"",
  ""Visual pun at frame 41"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 42"": ""No"",
  ""Visual pun at frame 42"": ""yes, ted is a teddy bear"",
  ""Pun in dialogue at frame 43"": ""No"",
  ""Visual pun at frame 43"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 44"": ""No"",
  ""Visual pun at frame 44"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 45"": ""No"",
  ""Visual pun at frame 45"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 46"": ""No"",
  ""Visual pun at frame 46"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 47"": ""No"",
  ""Visual pun at frame 47"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 48"": ""No"",
  ""Visual pun at frame 48"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 49"": ""No"",
  ""Visual pun at frame 49"": ""yes person, person, person, person, person, person, person"",
  ""Pun in dialogue at frame 50"": ""No"",
  ""Visual pun at frame 50"": ""yes - a man and a woman"",
  ""Pun in dialogue at frame 51"": ""No"",
  ""Visual pun at frame 51"": ""i think so yes i think so"",
  ""Pun in dialogue at frame 53"": ""No"",
  ""Visual pun at frame 53"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 54"": ""No"",
  ""Visual pun at frame 54"": ""yes - i think there are a few"",
  ""Pun in dialogue at frame 55"": ""No"",
  ""Visual pun at frame 55"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 56"": ""No"",
  ""Visual pun at frame 56"": ""yes, there are a few visual puns"",
  ""Pun in dialogue at frame 57"": ""No"",
  ""Visual pun at frame 57"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 58"": ""No"",
  ""Visual pun at frame 58"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 59"": ""No"",
  ""Visual pun at frame 59"": ""yes - no stock videos & footage"",
  ""Pun in dialogue at frame 60"": ""No"",
  ""Visual pun at frame 60"": ""yes, there are visual puns, yes"",
  ""Pun in dialogue at frame 61"": ""No"",
  ""Visual pun at frame 61"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 62"": ""No"",
  ""Visual pun at frame 62"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 63"": ""No"",
  ""Visual pun at frame 63"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 64"": ""No"",
  ""Visual pun at frame 64"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 65"": ""No"",
  ""Visual pun at frame 65"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 66"": ""No"",
  ""Visual pun at frame 66"": ""i think so yes, i think so"",
  ""Pun in dialogue at frame 67"": ""No"",
  ""Visual pun at frame 67"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 69"": ""No"",
  ""Visual pun at frame 69"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 70"": ""No"",
  ""Visual pun at frame 70"": ""yes'' yes''"",
  ""Pun in dialogue at frame 71"": ""No"",
  ""Visual pun at frame 71"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 72"": ""No"",
  ""Visual pun at frame 72"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 73"": ""No"",
  ""Visual pun at frame 73"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 74"": ""No"",
  ""Visual pun at frame 74"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 75"": ""Yes"",
  ""Visual pun at frame 75"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 76"": ""No"",
  ""Visual pun at frame 76"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 77"": ""No"",
  ""Visual pun at frame 77"": ""yes ''the teddy bear''"",
  ""Pun in dialogue at frame 78"": ""No"",
  ""Visual pun at frame 78"": ""yes - teddy bears"",
  ""Pun in dialogue at frame 79"": ""No"",
  ""Visual pun at frame 79"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 82"": ""No"",
  ""Visual pun at frame 82"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 83"": ""No"",
  ""Visual pun at frame 83"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 84"": ""No"",
  ""Visual pun at frame 84"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 86"": ""No"",
  ""Visual pun at frame 86"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 87"": ""No"",
  ""Visual pun at frame 87"": ""yes - a teddy bear"",
  ""Pun in dialogue at frame 88"": ""No"",
  ""Visual pun at frame 88"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 89"": ""No"",
  ""Visual pun at frame 89"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 90"": ""No"",
  ""Visual pun at frame 90"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 91"": ""No"",
  ""Visual pun at frame 91"": ""yes - a bed in a room"",
  ""Pun in dialogue at frame 92"": ""No"",
  ""Visual pun at frame 92"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 93"": ""No"",
  ""Visual pun at frame 93"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 94"": ""No"",
  ""Visual pun at frame 94"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 95"": ""No"",
  ""Visual pun at frame 95"": ""yes, there are some visual puns"",
  ""Pun in dialogue at frame 96"": ""No"",
  ""Visual pun at frame 96"": ""yes, there is a car in the scene"",
  ""Pun in dialogue at frame 97"": ""No"",
  ""Visual pun at frame 97"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 98"": ""No"",
  ""Visual pun at frame 98"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 99"": ""No"",
  ""Visual pun at frame 99"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 101"": ""No"",
  ""Visual pun at frame 101"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 102"": ""No"",
  ""Visual pun at frame 102"": ""yes, there is a car in the background"",
  ""Pun in dialogue at frame 103"": ""No"",
  ""Visual pun at frame 103"": ""yes, there is a car in the background"",
  ""Pun in dialogue at frame 104"": ""No"",
  ""Visual pun at frame 104"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 105"": ""No"",
  ""Visual pun at frame 105"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 106"": ""No"",
  ""Visual pun at frame 106"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 107"": ""No"",
  ""Visual pun at frame 107"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 109"": ""No"",
  ""Visual pun at frame 109"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 110"": ""No"",
  ""Visual pun at frame 110"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 111"": ""No"",
  ""Visual pun at frame 111"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 112"": ""No"",
  ""Visual pun at frame 112"": ""yes, there are visual puns throughout the movie"",
  ""Pun in dialogue at frame 113"": ""No"",
  ""Visual pun at frame 113"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 114"": ""No"",
  ""Visual pun at frame 114"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 115"": ""No"",
  ""Visual pun at frame 115"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 116"": ""No"",
  ""Visual pun at frame 116"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 117"": ""No"",
  ""Visual pun at frame 117"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 118"": ""No"",
  ""Visual pun at frame 118"": ""yes - teddy bears"",
  ""Pun in dialogue at frame 119"": ""No"",
  ""Visual pun at frame 119"": ""yes - a man clapping""
}"|The movie contains visual puns throughout the film, including a teddy bear and various objects in different scenes. The puns are not present in the dialogue, but are incorporated creatively in the visuals to engage the audience. This aligns with the definition of the trope 'Stealth Pun', where jokes are hidden in the set up without an explicit punchline.||
|no|tt1637725_74|Bittersweet Ending|"Is the trope ""Bittersweet Ending"", which means ""When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some 
irrevocable loss has happened during the course of the events, and nothing will ever be the same again."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_74(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Bittersweet Ending
    # Definition: When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some irrevocable loss has happened during the course of the events, and nothing will ever be the same again.
    # Thought: To detect the ""Bittersweet Ending"" trope, we need to analyze the emotional and narrative elements of the video segment, focusing on the resolution and aftermath of the story.
    # 1. Emotional Analysis: Look for visual cues of sadness, loss, or sacrifice in the final frames of the video segment.
    # 2. Narrative Examination: Analyze the character arcs and plot developments to identify any significant losses or unfulfilled resolutions.
    # 3. Answer Selection: Use the select_answer API to determine if the video segment aligns with the characteristics of a bittersweet ending.
    
    video_segment = VideoSegment(video, annotation)
    
    # Assuming the last 10% of the video is a reasonable segment to analyze for the ending
    ending_segment_start = int(video_segment.num_frames * 0.9)
    ending_segment = video_segment.trim(start=ending_segment_start)
    
    # Create an info dictionary to store collected information
    info = {}
    
    for i, frame in enumerate(ending_segment.frame_iterator()):
        # Detect visual cues of sadness, tragedy, or loss
        sadness_query = frame.simple_query(""Is there sadness or mourning?"", to_yesno=True)
        tragedy_query = frame.simple_query(""Is there visible tragedy or destruction?"", to_yesno=True)

        if ""yes"" in sadness_query.lower() or ""yes"" in tragedy_query.lower():
            # Caption the frame
            caption = frame.simple_query(""What is in the frame?"")
            sadness_query = frame.simple_query(""What sadness or mourning event is in the frame?"")
            tragedy_query = frame.simple_query(""What visible tragedy or destruction event is in the frame?"")
            info[f""Caption of {ending_segment.start + 1} th frame""] = caption
            info[f""Sadness or mourning event in {ending_segment.start + 1} th frame""] = sadness_query
            info[f""Visible tragedy or destruction event in {ending_segment.start + 1} th frame""] = tragedy_query
    
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|null|||VideoSegment has duration=0
no|no|tt1637725_82|What the Hell, Hero?|"Is the trope ""What the Hell, Hero?"", which means ""When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_82(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: What the Hell, Hero?
    # Definition: When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where a hero's actions are questionable or morally ambiguous.
    # 2. Character Analysis: Identify the hero and the actions that might lead to the trope being relevant.
    # 3. Answer Selection: Use the collected information to determine if the trope is applicable to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with the query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for hero in frame.find(""hero""):
            hero_id = video_segment.face_identify(hero)
            if hero_id is None:
                continue
            hero_action = hero.simple_query(subtitles_info + ""What is the hero doing?"")
            if hero_id not in info:
                info[hero_id] = {}
            info[hero_id].update({
                f""Action in {i} frame"": hero_action
            })

    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|There is no indication in the provided information that any character in the movie calls out one of the heroes for doing something unheroic or heinous||
no|no|tt1637725_89|Chekhov's Gunman|"Is the trope ""Chekhov's Gunman"", which means ""Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_89(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Chekhov's Gunman
    # Definition: Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters introduced early on but seemingly unimportant.
    # 2. Character Analysis: Track the actions and interactions of these characters throughout the video segment.
    # 3. Relevance Assessment: Determine if any of these initially unimportant characters play a significant role later on.
    # 4. Answer Selection: Use the select_answer API to decide if the ""Chekhov's Gunman"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    relevant_characters = []

    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Track the character's actions and interactions
            character_actions = character.simple_query(""What actions is this character performing?"")
            if i < video_segment.num_frames // 2:
                # Characters introduced in the first half are considered for the trope
                relevant_characters.append((character_id, character_actions))

    # Check if any of the initially unimportant characters become significant later
    relevant_characters_info = {}
    for character_id, actions in relevant_characters:
        if actions:
            # If the character has actions, they might become important later
            relevant_characters_info[character_id] = actions

    # Determine if the ""Chekhov's Gunman"" trope is relevant based on the character analysis
    if relevant_characters_info:
        answer = ""yes""
        reason = ""There are characters introduced early on with actions that might become significant later.""
    else:
        answer = ""no""
        reason = ""No characters introduced early on show signs of becoming important later.""

    return answer, reason, relevant_characters_info"|{}|No characters introduced early on show signs of becoming important later.||
no|no|tt1637725_90|Red Herring|"Is the trope ""Red Herring"", which means ""A clue that leads in the wrong direction."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_90(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Red Herring
    # Definition: A clue that leads in the wrong direction.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify any misleading clues or information that could divert the audience's attention.
    # 2. Contextual Analysis: Look for elements that are presented as significant but ultimately turn out to be irrelevant or misleading in the narrative.
    # 3. Detecting Red Herrings: Identify instances where certain characters, objects, or events are highlighted to mislead the audience.
    # 4. Answer Selection: Use the select_answer API to determine if the trope ""Red Herring"" is relevant to the movie based on the collected data.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for potential red herrings
        potential_red_herring = frame.simple_query(""Is there any misleading clue or information in this frame?"", to_yesno=True)
        
        if ""yes"" in potential_red_herring.lower():
            # Collect information about the potential red herring
            caption = frame.simple_query(""What is the misleading clue or information in this frame?"")
            info[f""Red Herring in frame {i}""] = caption

    # Determine if the trope ""Red Herring"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Red Herring in frame 1"": ""person's name is person, not person"",
  ""Red Herring in frame 2"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 3"": ""the boy is standing in front of the window"",
  ""Red Herring in frame 4"": ""the boy is holding a teddy bear"",
  ""Red Herring in frame 5"": ""the man in the red coat is a man"",
  ""Red Herring in frame 7"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 9"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 10"": ""person is standing in front of a car"",
  ""Red Herring in frame 11"": ""person is wearing a white shirt and tie"",
  ""Red Herring in frame 14"": ""person is wearing a white shirt and tie"",
  ""Red Herring in frame 16"": ""person is a teddy bear"",
  ""Red Herring in frame 17"": ""the teddy bear is sitting at the table"",
  ""Red Herring in frame 18"": ""person is in bed with a woman in the background"",
  ""Red Herring in frame 22"": ""person is wearing a black blazer"",
  ""Red Herring in frame 26"": ""person is wearing a white dress and a white shirt"",
  ""Red Herring in frame 27"": ""the woman is wearing a t-shirt"",
  ""Red Herring in frame 28"": ""person is driving a car in this scene"",
  ""Red Herring in frame 29"": ""a woman in a white dress walking down the stairs"",
  ""Red Herring in frame 30"": ""person, person, person, person, person, person"",
  ""Red Herring in frame 31"": ""the teddy bear's name"",
  ""Red Herring in frame 33"": ""the teddy bear is wearing a suit"",
  ""Red Herring in frame 34"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 37"": ""the woman is wearing a white t-shirt"",
  ""Red Herring in frame 38"": ""person is wearing a red apron"",
  ""Red Herring in frame 43"": ""the teddy bear's name"",
  ""Red Herring in frame 45"": ""the teddy bear is in the dark"",
  ""Red Herring in frame 48"": ""person, person, person, person, person"",
  ""Red Herring in frame 49"": ""person, person, person, person, person"",
  ""Red Herring in frame 53"": ""person is wearing a white blazer"",
  ""Red Herring in frame 57"": ""person, person, person, person, person, person"",
  ""Red Herring in frame 58"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 60"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 61"": ""the teddy bear's name"",
  ""Red Herring in frame 62"": ""the teddy bear is holding a microphone"",
  ""Red Herring in frame 65"": ""person's character's name is person"",
  ""Red Herring in frame 69"": ""person, person, person, person, person"",
  ""Red Herring in frame 70"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 71"": ""the teddy bear's name is person"",
  ""Red Herring in frame 72"": ""person, person, person, person, person"",
  ""Red Herring in frame 73"": ""the man is reading a book in bed"",
  ""Red Herring in frame 74"": ""the teddy bear's name"",
  ""Red Herring in frame 76"": ""the teddy bear in the bed"",
  ""Red Herring in frame 78"": ""the teddy bear in the room"",
  ""Red Herring in frame 79"": ""the teddy bear is laying on the floor"",
  ""Red Herring in frame 82"": ""the teddy bear's name"",
  ""Red Herring in frame 83"": ""person, person, person, person, person"",
  ""Red Herring in frame 84"": ""the man in the black shirt is wearing a shirt"",
  ""Red Herring in frame 86"": ""the teddy bear's name is person"",
  ""Red Herring in frame 87"": ""the teddy bear's name"",
  ""Red Herring in frame 88"": ""the teddy bear's name is person"",
  ""Red Herring in frame 89"": ""person, person, person, person, person"",
  ""Red Herring in frame 91"": ""the bed is a king size bed"",
  ""Red Herring in frame 92"": ""the teddy bear in the room"",
  ""Red Herring in frame 94"": ""the door is open and the person is inside"",
  ""Red Herring in frame 96"": ""the car is parked in a garage"",
  ""Red Herring in frame 97"": ""the man is talking on a cell phone"",
  ""Red Herring in frame 98"": ""person, person, person, person, person"",
  ""Red Herring in frame 101"": ""the woman in the car is wearing a white shirt"",
  ""Red Herring in frame 102"": ""the car is parked in a garage"",
  ""Red Herring in frame 103"": ""the car is parked in a garage"",
  ""Red Herring in frame 105"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 109"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 110"": ""the teddy bear is wearing a baseball cap"",
  ""Red Herring in frame 112"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 113"": ""person's face is obscured by shadow"",
  ""Red Herring in frame 114"": ""the woman is wearing a striped shirt"",
  ""Red Herring in frame 116"": ""the teddy bear is not teddy bear"",
  ""Red Herring in frame 117"": ""the teddy bear's name is person""
}"|The presence of red herrings in the video does not necessarily mean the trope 'Red Herring' is relevant to the movie. The trope 'Red Herring' specifically refers to a clue that leads in the wrong direction, which is not clearly demonstrated in the provided information||
no|yes|tt0100157_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|no|tt0100157_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|yes|tt0100157_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 1"": ""a hand is reaching out to the child"",
  ""Actions towards child in frame 4"": ""person, person, person, person, person"",
  ""Actions towards child in frame 5"": ""the child's attention is directed towards the child"",
  ""Actions towards child in frame 9"": ""the child is being pushed into the water"",
  ""Actions towards child in frame 12"": ""the child is placed in a hospital bed"",
  ""Actions towards child in frame 16"": ""a woman is holding a baby in her arms"",
  ""Actions towards child in frame 29"": ""screams and screams"",
  ""Actions towards child in frame 30"": ""person, person, person, person, person"",
  ""Actions towards child in frame 36"": ""water splashed on the child's face"",
  ""Actions towards child in frame 41"": ""person, person, person, person, person"",
  ""Actions towards child in frame 43"": ""person, person, person, person, person"",
  ""Actions towards child in frame 46"": ""the child's actions are directed towards the child"",
  ""Actions towards child in frame 51"": ""a hand is reaching out to the child"",
  ""Actions towards child in frame 54"": ""a penguin and a pig"",
  ""Actions towards child in frame 57"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 58"": ""a woman is walking towards the child in the snow"",
  ""Actions towards child in frame 59"": ""person, person, person, person, person"",
  ""Actions towards child in frame 60"": ""person, person, person, person, person"",
  ""Actions towards child in frame 61"": ""- person stock videos & royalty-free footage"",
  ""Actions towards child in frame 62"": ""the child is screamed at"",
  ""Actions towards child in frame 63"": ""person, person, person, person, person"",
  ""Actions towards child in frame 64"": ""the child is being pushed down a snowy slope"",
  ""Actions towards child in frame 78"": ""the child is being scolded"",
  ""Actions towards child in frame 79"": ""he scolds the child"",
  ""Actions towards child in frame 80"": ""he reaches out to the child with his hand"",
  ""Actions towards child in frame 83"": ""the child is screamed at"",
  ""Actions towards child in frame 84"": ""adolescence and adulthood"",
  ""Actions towards child in frame 91"": ""person, person, person, person, person"",
  ""Actions towards child in frame 92"": ""he screams at the child"",
  ""Actions towards child in frame 94"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 99"": ""the child is screamed at"",
  ""Actions towards child in frame 100"": ""person, person, person, person, person"",
  ""Actions towards child in frame 102"": ""person, person, person, person, person"",
  ""Actions towards child in frame 106"": ""he lays down on the ground and puts his phone down"",
  ""Actions towards child in frame 112"": ""- child stock videos & royalty-free footage""
}"|There are instances of characters harming children in the video.||
no|yes|tt0100157_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt0100157_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The trope `Determinator` involves a character who never gives up no matter what. If the movie features a character who displays unwavering determination and persistence in achieving their goals, then the trope is likely present in the movie.||
no|no|tt0100157_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt0100157_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The presence of the trope `Too Dumb to Live` would require characters consistently making incredibly foolish decisions that put their lives in danger. However, the information provided does not indicate any instances of characters displaying such extreme stupidity that would warrant the application of this trope.||
no|no|tt0100157_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The information provided does not mention any character being socially inept, shy, or clumsy. Therefore, it is unlikely that the trope 'Adorkable' is relevant to the movie.||
no|yes|tt0100157_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 0"": ""a lion is on a screen"",
  ""Fear element in frame 0"": ""a lion's roaring"",
  ""Caption of frame 1"": ""a person is opening a briefcase"",
  ""Fear element in frame 1"": ""a hand reaching into a briefcase"",
  ""Caption of frame 3"": ""driving a car in a snowstorm"",
  ""Fear element in frame 3"": ""driving a car in a snowstorm"",
  ""Caption of frame 4"": ""a man is skiing down a hill"",
  ""Fear element in frame 4"": ""the screams of a child"",
  ""Caption of frame 5"": ""a train is traveling through a tunnel"",
  ""Fear element in frame 5"": ""the blackness of the night and the dark"",
  ""Caption of frame 6"": ""a woman is sitting at a desk"",
  ""Fear element in frame 6"": ""a woman in a striped dress"",
  ""Caption of frame 7"": ""a skier is going down a slope"",
  ""Fear element in frame 7"": ""avalanche - tv"",
  ""Caption of frame 8"": ""a man is laying in the snow with blood on his face"",
  ""Fear element in frame 8"": ""the blood on the face of a man"",
  ""Caption of frame 9"": ""a person is holding a red bag"",
  ""Fear element in frame 9"": ""a slushy pond"",
  ""Caption of frame 10"": ""a woman is sitting in a room"",
  ""Fear element in frame 10"": ""a woman's screams"",
  ""Caption of frame 11"": ""a woman is sitting in a room"",
  ""Fear element in frame 11"": ""a woman in a green sweater stares at the camera"",
  ""Caption of frame 12"": ""a person is sitting on a bed"",
  ""Fear element in frame 12"": ""the bandages on the legs of the victim"",
  ""Caption of frame 13"": ""a woman is talking on a phone"",
  ""Fear element in frame 13"": ""a woman talking on a cell phone"",
  ""Caption of frame 14"": ""a cowboy is talking on the phone"",
  ""Fear element in frame 14"": ""a cowboy in a hat"",
  ""Caption of frame 15"": ""a woman is talking to a man"",
  ""Fear element in frame 15"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 16"": ""a woman is opening the door to a room"",
  ""Fear element in frame 16"": ""a child's fear of the dark"",
  ""Caption of frame 17"": ""a man is in a hospital bed"",
  ""Fear element in frame 17"": ""person, person, person, person, person"",
  ""Caption of frame 18"": ""a man is talking to a woman"",
  ""Fear element in frame 18"": ""a cowboy in a hat"",
  ""Caption of frame 19"": ""a man is lying in a bed"",
  ""Fear element in frame 19"": ""a man in a white robe"",
  ""Caption of frame 20"": ""a man is laying in a bed"",
  ""Fear element in frame 20"": ""person, person, person, person, person, person"",
  ""Caption of frame 21"": ""two people are driving a jeep"",
  ""Fear element in frame 21"": ""person, person, person, person, person"",
  ""Caption of frame 22"": ""a woman is standing on top of snow"",
  ""Fear element in frame 22"": ""a woman in a coat standing in the snow"",
  ""Caption of frame 23"": ""a man is in a hospital bed"",
  ""Fear element in frame 23"": ""a man lying in a hospital bed"",
  ""Caption of frame 24"": ""a woman is holding up a book"",
  ""Fear element in frame 24"": ""person, person, person, person, person"",
  ""Caption of frame 25"": ""a man is in a hospital bed"",
  ""Fear element in frame 25"": ""screams of a dying man"",
  ""Caption of frame 26"": ""a man is laying in a bed"",
  ""Fear element in frame 26"": ""a dog in the bed with the man"",
  ""Caption of frame 28"": ""a woman is holding a glass of milk"",
  ""Fear element in frame 28"": ""the presence of a child in the room"",
  ""Caption of frame 29"": ""a man is standing in a dark room"",
  ""Fear element in frame 29"": ""a man in a dark room with a flashlight"",
  ""Caption of frame 30"": ""a man is standing in a room"",
  ""Fear element in frame 30"": ""ghosts, horror movies, scary movies, scary movies, scary movies, scary movies, scary movies"",
  ""Caption of frame 31"": ""a woman is sitting in a dark room"",
  ""Fear element in frame 31"": ""a woman in a plaid shirt in the dark"",
  ""Caption of frame 32"": ""a man is in a hospital bed"",
  ""Fear element in frame 32"": ""a man in a white hospital gown"",
  ""Caption of frame 33"": ""a man is laying on the floor"",
  ""Fear element in frame 33"": ""a man laying on a bed"",
  ""Caption of frame 34"": ""a man is lying on a bed"",
  ""Fear element in frame 34"": ""a man laying on a bed"",
  ""Caption of frame 35"": ""a woman is talking to a man"",
  ""Fear element in frame 35"": ""a woman in a plaid shirt with her mouth open"",
  ""Caption of frame 36"": ""a book is sitting on a grill"",
  ""Fear element in frame 36"": ""water splashing on a paperback book"",
  ""Caption of frame 37"": ""a woman is staring off into space"",
  ""Fear element in frame 37"": ""person, person, person, person, person"",
  ""Caption of frame 38"": ""a woman is staring at the camera"",
  ""Fear element in frame 38"": ""a woman in a plaid shirt staring into space"",
  ""Caption of frame 39"": ""a man is in a hospital bed"",
  ""Fear element in frame 39"": ""a man in a white hospital gown"",
  ""Caption of frame 40"": ""a woman is holding a can of beer"",
  ""Fear element in frame 40"": ""a candle burning in a jar"",
  ""Caption of frame 41"": ""a woman is standing next to a bed"",
  ""Fear element in frame 41"": ""a woman in a plaid shirt standing in the doorway"",
  ""Caption of frame 42"": ""a man is in a hospital bed"",
  ""Fear element in frame 42"": ""a man in a white hospital gown"",
  ""Caption of frame 44"": ""a man is putting his hand on a mattress"",
  ""Fear element in frame 44"": ""a child's scream"",
  ""Caption of frame 45"": ""a woman is holding a typewriter"",
  ""Fear element in frame 45"": ""a woman holding a typewriter in her hand"",
  ""Caption of frame 46"": ""a light is shining on a wooden floor"",
  ""Fear element in frame 46"": ""the shadow of a knife on the floor"",
  ""Caption of frame 48"": ""a person is writing on a paper"",
  ""Fear element in frame 48"": ""the word betrayal''"",
  ""Caption of frame 49"": ""a man is sitting in a window"",
  ""Fear element in frame 49"": ""a man in a red shirt with a broken arm"",
  ""Caption of frame 50"": ""a door is open in a room"",
  ""Fear element in frame 50"": ""a slammed wooden door"",
  ""Caption of frame 51"": ""a person's finger is on a nail"",
  ""Fear element in frame 51"": ""a nail sticking out of a finger"",
  ""Caption of frame 52"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 52"": ""a man in a wheelchair with a cast"",
  ""Caption of frame 53"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 53"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 55"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 55"": ""a man in a wheelchair in a house"",
  ""Caption of frame 56"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 56"": ""the sound of a door slamming"",
  ""Caption of frame 57"": ""there is a water tower in the snow"",
  ""Fear element in frame 57"": ""a water tower in the middle of the snow"",
  ""Caption of frame 59"": ""a man is walking through the snow with a bag"",
  ""Fear element in frame 59"": ""a child's fear of the dark"",
  ""Caption of frame 60"": ""a man is opening the door of a house"",
  ""Fear element in frame 60"": ""a doorknob with a broken handle"",
  ""Caption of frame 61"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 61"": ""a man in a wheelchair with a broken arm"",
  ""Caption of frame 62"": ""a woman is standing in the doorway"",
  ""Fear element in frame 62"": ""a woman in a blue dress standing in the doorway"",
  ""Caption of frame 63"": ""a woman is in a hospital bed"",
  ""Fear element in frame 63"": ""person, person, person, person, person"",
  ""Caption of frame 65"": ""a man is in a hospital bed"",
  ""Fear element in frame 65"": ""a man in a hospital bed with a knife"",
  ""Caption of frame 67"": ""a man is sitting by a window"",
  ""Fear element in frame 67"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 68"": ""a man is typing on a typewriter"",
  ""Fear element in frame 68"": ""a typewriter - person stock videos & royalty-free footage"",
  ""Caption of frame 69"": ""a woman is talking to a man"",
  ""Fear element in frame 69"": ""a woman's screams"",
  ""Caption of frame 70"": ""a woman is sitting in a chair"",
  ""Fear element in frame 70"": ""a woman sitting alone in a chair"",
  ""Caption of frame 71"": ""a woman is holding a piece of paper"",
  ""Fear element in frame 71"": ""person, person, person, person, person"",
  ""Caption of frame 72"": ""a woman is standing in a doorway"",
  ""Fear element in frame 72"": ""a woman in a gray sweater standing in a doorway"",
  ""Caption of frame 74"": ""a woman is eating at a table"",
  ""Fear element in frame 74"": ""person, person, person, person, person"",
  ""Caption of frame 75"": ""a woman is holding a glass of wine"",
  ""Fear element in frame 75"": ""a woman holding a glass of wine"",
  ""Caption of frame 77"": ""a man is holding a glass of wine"",
  ""Fear element in frame 77"": ""a candle in a glass of wine"",
  ""Caption of frame 78"": ""an old typewriter is writing a letter"",
  ""Fear element in frame 78"": ""a typewriter with a letter on it"",
  ""Caption of frame 79"": ""a man is writing on a typewriter"",
  ""Fear element in frame 79"": ""a typewriter in a dark room"",
  ""Caption of frame 80"": ""a woman is walking into a room"",
  ""Fear element in frame 80"": ""a woman in a red robe"",
  ""Caption of frame 81"": ""a woman in a plaid shirt is staring"",
  ""Fear element in frame 81"": ""person, person, person, person, person"",
  ""Caption of frame 82"": ""a man is staring at the camera"",
  ""Fear element in frame 82"": ""a man in a red plaid shirt"",
  ""Caption of frame 83"": ""there is a water tower in the snow"",
  ""Fear element in frame 83"": ""a water tower in the middle of the night"",
  ""Caption of frame 85"": ""a man is staring at a camera"",
  ""Fear element in frame 85"": ""a man in a red plaid shirt"",
  ""Caption of frame 86"": ""a man is in a hospital bed"",
  ""Fear element in frame 86"": ""a man laying in a bed"",
  ""Caption of frame 87"": ""a man is laying in bed with a knife"",
  ""Fear element in frame 87"": ""person, person, person, person, person, person"",
  ""Caption of frame 88"": ""a man is putting a needle in his arm"",
  ""Fear element in frame 88"": ""a needle being inserted into the arm"",
  ""Caption of frame 89"": ""a woman is making a funny face"",
  ""Fear element in frame 89"": ""a woman's screams"",
  ""Caption of frame 90"": ""a woman is putting her finger in her mouth"",
  ""Fear element in frame 90"": ""a woman's fingernail"",
  ""Caption of frame 91"": ""a person is laying on a bed"",
  ""Fear element in frame 91"": ""a wooden plank on a bed"",
  ""Caption of frame 92"": ""a man is sleeping in a bed"",
  ""Fear element in frame 92"": ""a man in a bed with a knife"",
  ""Caption of frame 94"": ""a man is standing at a desk"",
  ""Fear element in frame 94"": ""a man in a cowboy hat"",
  ""Caption of frame 95"": ""a man is sitting in a library"",
  ""Fear element in frame 95"": ""person, person, person, person, person"",
  ""Caption of frame 96"": ""a man is standing in a store"",
  ""Fear element in frame 96"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 98"": ""a woman is holding a cigarette"",
  ""Fear element in frame 98"": ""person, person, person, person, person"",
  ""Caption of frame 99"": ""a man is standing in a room"",
  ""Fear element in frame 99"": ""the spider webs and spiders in the room"",
  ""Caption of frame 100"": ""a man is talking to a woman"",
  ""Fear element in frame 100"": ""person, person, person, person, person"",
  ""Caption of frame 101"": ""a woman is talking to a man"",
  ""Fear element in frame 101"": ""a woman in a cowboy hat"",
  ""Caption of frame 102"": ""two people are walking down a stairwell"",
  ""Fear element in frame 102"": ""a stairwell with no railing"",
  ""Caption of frame 103"": ""a man is standing in a hallway"",
  ""Fear element in frame 103"": ""a man in a white hat"",
  ""Caption of frame 104"": ""a man is sitting in a room"",
  ""Fear element in frame 104"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 105"": ""a woman is talking to a man"",
  ""Fear element in frame 105"": ""a woman in a brown jacket and a hat"",
  ""Caption of frame 106"": ""a person is laying on the ground"",
  ""Fear element in frame 106"": ""a person laying down on the ground"",
  ""Caption of frame 107"": ""a man is staring at the camera"",
  ""Fear element in frame 107"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 108"": ""a man in a wheelchair is sitting at a desk"",
  ""Fear element in frame 108"": ""a woman in a wheelchair in the dark"",
  ""Caption of frame 109"": ""a hand is holding a revolver"",
  ""Fear element in frame 109"": ""a revolver in a woman's hand"",
  ""Caption of frame 110"": ""a woman is staring at the camera"",
  ""Fear element in frame 110"": ""a woman in a black turtleneck"",
  ""Caption of frame 111"": ""a man is sitting at a table"",
  ""Fear element in frame 111"": ""the presence of a child in the room"",
  ""Caption of frame 112"": ""a woman is crying over a fire"",
  ""Fear element in frame 112"": ""fire - fire stock videos & royalty-free footage"",
  ""Caption of frame 113"": ""a man is making a funny face"",
  ""Fear element in frame 113"": ""a man's screams"",
  ""Caption of frame 115"": ""a man is laying on the floor"",
  ""Fear element in frame 115"": ""a man with a bloody face"",
  ""Caption of frame 116"": ""a man is laying on the floor"",
  ""Fear element in frame 116"": ""person, person, person, person, person"",
  ""Caption of frame 117"": ""a man is laying on the floor"",
  ""Fear element in frame 117"": ""the presence of a dead body in the room"",
  ""Caption of frame 118"": ""a man is laying on the stairs"",
  ""Fear element in frame 118"": ""a dead body on a dark staircase"",
  ""Caption of frame 119"": ""a man is sitting at a table"",
  ""Fear element in frame 119"": ""a man sitting alone at a table""
}"|The series of frames provided do not contain elements that suggest typical adult fears such as financial instability, health issues, or the safety of loved ones. Instead, the frames depict a variety of scenes that do not directly relate to common adult fears.||
no|no|tt0100157_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest that two characters are discovering they have things in common. Therefore, the trope 'Not So Different' is not relevant to the movie.||
yes|no|tt0100157_32|Eye Scream|"Is the trope ""Eye Scream"", which means ""When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the 
invasion of the eye sockets by a foreign body."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_32(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Eye Scream
    # Definition: When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the invasion of the eye sockets by a foreign body.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential instances of eye-related horror or trauma.
    # 2. Contextual Analysis: Look for visual cues or actions that suggest eye-related scenes.
    # 3. Detecting Eye Scream: Identify scenes where characters' eyes are in danger or being harmed.
    # 4. Answer Selection: Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for eye-related horror or trauma
        eye_horror_query = frame.simple_query(""Is there any eye-related horror or trauma in this scene?"", to_yesno=True)
        
        if ""yes"" in eye_horror_query.lower():
            # If eye-related horror is detected, gather more information
            eye_scene_description = frame.simple_query(""Describe the eye-related scene in detail."")
            info[f""Eye-related scene in frame {i}""] = eye_scene_description

    # Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Eye-related scene in frame 0"": ""the eye-related scene is a scene in which a lion's eye is shown"",
  ""Eye-related scene in frame 1"": ""a man is holding a briefcase in his hand"",
  ""Eye-related scene in frame 3"": ""a man is driving a car in the snow"",
  ""Eye-related scene in frame 4"": ""the eye-related scene is a scene in the movie"",
  ""Eye-related scene in frame 5"": ""this is a close up of a person's eye"",
  ""Eye-related scene in frame 6"": ""the eye-related scene in the movie is a scene in which a woman is sitting in a chair and looking at her eye"",
  ""Eye-related scene in frame 8"": ""the eye-related scene takes place in the middle of a snowstorm"",
  ""Eye-related scene in frame 9"": ""a person's eye is covered in snow"",
  ""Eye-related scene in frame 10"": ""the eye-related scene is a scene in which a woman is sitting in a living room"",
  ""Eye-related scene in frame 11"": ""the eye-related scene is a scene in which a woman stares at her own eye"",
  ""Eye-related scene in frame 12"": ""a man is lying on a bed with bandages on his legs"",
  ""Eye-related scene in frame 13"": ""the eye-related scene in the movie is a scene in which person's character, person"",
  ""Eye-related scene in frame 14"": ""the eye-related scene is a scene in which a cowboy is talking on the phone"",
  ""Eye-related scene in frame 15"": ""the eye-related scene is a scene in which a woman is looking at her own eye"",
  ""Eye-related scene in frame 16"": ""a woman in a brown dress is standing in front of a door"",
  ""Eye-related scene in frame 17"": ""the scene in which person is laying in a hospital bed"",
  ""Eye-related scene in frame 18"": ""the eye-related scene takes place in a cabin"",
  ""Eye-related scene in frame 19"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 20"": ""the eye scene is a scene in which a man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 21"": ""the eye scene is a scene in which a man and a woman are driving in a car"",
  ""Eye-related scene in frame 22"": ""a woman is standing on a snowy hill"",
  ""Eye-related scene in frame 23"": ""the scene in which person is laying in a hospital bed"",
  ""Eye-related scene in frame 24"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 25"": ""the eye-related scene is a scene in which a man is in a hospital bed"",
  ""Eye-related scene in frame 26"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 28"": ""the scene in which person's eye is removed"",
  ""Eye-related scene in frame 29"": ""the eye-related scene takes place in a dark room"",
  ""Eye-related scene in frame 30"": ""the eye scene is a scene in which a man is stabbed with a knife"",
  ""Eye-related scene in frame 31"": ""the scene in which the woman's eye is smashed"",
  ""Eye-related scene in frame 32"": ""the eye-related scene involves a man in a hospital bed"",
  ""Eye-related scene in frame 33"": ""the scene in which person is laying on the floor with his eyes bandaged"",
  ""Eye-related scene in frame 34"": ""the scene in which person is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 35"": ""the eye-related scene is a scene in which a woman's eyes are smashed"",
  ""Eye-related scene in frame 36"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 37"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 38"": ""the eye-related scene is a scene in which a woman stares into a mirror"",
  ""Eye-related scene in frame 39"": ""a man is lying in a hospital bed with a broken eye"",
  ""Eye-related scene in frame 40"": ""the scene in which person's eye is burned"",
  ""Eye-related scene in frame 41"": ""the eye scene is a scene in which a woman is in a room with a bed and a mirror"",
  ""Eye-related scene in frame 42"": ""a man is lying in a hospital bed"",
  ""Eye-related scene in frame 43"": ""in the scene, a man is sitting in a chair and a woman is sitting in a chair"",
  ""Eye-related scene in frame 44"": ""close up of a man's eye"",
  ""Eye-related scene in frame 45"": ""the scene in which person tries to open her eyes"",
  ""Eye-related scene in frame 47"": ""the scene in which person's eye is removed"",
  ""Eye-related scene in frame 48"": ""a person's eye is drawn to a piece of paper"",
  ""Eye-related scene in frame 49"": ""the eye-related scene is a scene in which a man is shot in the eye"",
  ""Eye-related scene in frame 50"": ""describe the eye-related scene in detail,"",
  ""Eye-related scene in frame 51"": ""close up of a woman's eye"",
  ""Eye-related scene in frame 52"": ""the eye-related scene is a scene in which a man sits in a chair with a cast on his eye"",
  ""Eye-related scene in frame 53"": ""the eye-related scene is a scene in which a man is sitting in a wheelchair"",
  ""Eye-related scene in frame 54"": ""a penguin and a cow in the snow"",
  ""Eye-related scene in frame 55"": ""a man in a wheelchair sits in a room"",
  ""Eye-related scene in frame 57"": ""the eye scene is a scene in which person's character looks at a snowy scene"",
  ""Eye-related scene in frame 59"": ""the eye-related scene is a scene in which a man is walking in the snow"",
  ""Eye-related scene in frame 60"": ""the scene in which person's eye is smashed"",
  ""Eye-related scene in frame 61"": ""the eye-related scene is a scene in which a man in a wheelchair"",
  ""Eye-related scene in frame 62"": ""the eye-related scene in 'the stranger'"",
  ""Eye-related scene in frame 63"": ""the eye scene in the movie is a scene in which a woman is sitting in a hospital bed"",
  ""Eye-related scene in frame 65"": ""the eye-related scene is a scene in which a man is in a hospital bed"",
  ""Eye-related scene in frame 67"": ""the eye-related scene is a scene in which a man sits in front of a window"",
  ""Eye-related scene in frame 68"": ""the eye-related scene is a scene in which a man sits at a typewriter"",
  ""Eye-related scene in frame 69"": ""the eye-related scene is a scene where a woman is talking to another woman"",
  ""Eye-related scene in frame 70"": ""the eye-related scene is a scene in which a woman is sitting in a chair"",
  ""Eye-related scene in frame 71"": ""the eye-related scene in the movie is a scene in which a woman is sitting in a living room"",
  ""Eye-related scene in frame 72"": ""the scene in which the woman stares at the camera"",
  ""Eye-related scene in frame 73"": ""the scene in which person tries to open his eyes"",
  ""Eye-related scene in frame 74"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 75"": ""the eye-related scene is a scene in which a woman holds a glass of wine"",
  ""Eye-related scene in frame 76"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 77"": ""the eye-related scene in the movie is a scene in which a man is holding a glass of wine"",
  ""Eye-related scene in frame 78"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 79"": ""the eye-related scene is a scene in which a man sits at a typewriter"",
  ""Eye-related scene in frame 80"": ""the scene in which a woman is stabbed in the eye"",
  ""Eye-related scene in frame 81"": ""the scene in which the woman's eye is injured"",
  ""Eye-related scene in frame 82"": ""the eye-related scene is a scene in which a man stares at his own eye"",
  ""Eye-related scene in frame 83"": ""the eye-related scene is a scene in which a character is looking through a window"",
  ""Eye-related scene in frame 84"": ""the eye-related scene is a scene in which a character looks into a mirror"",
  ""Eye-related scene in frame 85"": ""the eye-related scene is a scene in which a man stares at his own eye"",
  ""Eye-related scene in frame 86"": ""the scene in which the man is laying in a hospital bed"",
  ""Eye-related scene in frame 87"": ""the eye-related scene is a scene in which a man lies in bed with a knife"",
  ""Eye-related scene in frame 89"": ""the eye-related scene is a scene in which a woman's eyes are swollen"",
  ""Eye-related scene in frame 90"": ""the eye-related scene in the movie is a scene in which a woman is looking at her eye"",
  ""Eye-related scene in frame 91"": ""the eye-related scene is a scene in which a person's eye is removed"",
  ""Eye-related scene in frame 92"": ""a man is lying on a bed with his eyes closed"",
  ""Eye-related scene in frame 93"": ""the scene in which a man is shot in the eye"",
  ""Eye-related scene in frame 94"": ""the eye scene is a scene in which a man is in a hotel room"",
  ""Eye-related scene in frame 95"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 96"": ""the eye scene is a scene in which a man is in a store looking at a woman's eye"",
  ""Eye-related scene in frame 97"": ""the scene in which the old man's eye is removed"",
  ""Eye-related scene in frame 98"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 99"": ""the eye-related scene is a scene in which a man is stabbed with a knife"",
  ""Eye-related scene in frame 100"": ""the eye-related scene is a scene in which a man and a woman look at each other"",
  ""Eye-related scene in frame 101"": ""the eye-related scene in the movie is a scene in which a man and a woman look at each other"",
  ""Eye-related scene in frame 102"": ""the eye-related scene is a scene in which person and person are in a house"",
  ""Eye-related scene in frame 103"": ""the eye scene is a scene in which a man in a cowboy hat and a cowboy hat is in a room with a door"",
  ""Eye-related scene in frame 104"": ""the eye-related scene is a scene in which a man is sitting in a room"",
  ""Eye-related scene in frame 105"": ""the eye-related scene is a scene in which a woman stares into the camera"",
  ""Eye-related scene in frame 106"": ""a man laying on the ground with his eyes closed"",
  ""Eye-related scene in frame 107"": ""the eye-related scene is a scene in the film where a character looks at his own eye"",
  ""Eye-related scene in frame 108"": ""the scene in which person's eye is removed"",
  ""Eye-related scene in frame 109"": ""a woman's hand holding a revolver"",
  ""Eye-related scene in frame 110"": ""the eye-related scene is a scene in which a woman stares into the camera"",
  ""Eye-related scene in frame 111"": ""the eye-related scene is a scene in which a man slits his own eye"",
  ""Eye-related scene in frame 112"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 113"": ""a man in a green shirt is laying on the floor with his eyes wide open"",
  ""Eye-related scene in frame 115"": ""a man is stabbed in the eye with a knife"",
  ""Eye-related scene in frame 116"": ""the scene in which the man is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 117"": ""the eye-related scene is a scene in which a man is laying on the floor in a room"",
  ""Eye-related scene in frame 118"": ""the eye scene is a scene in which a man is laying on a staircase"",
  ""Eye-related scene in frame 119"": ""the scene in which the man is looking at his own eye""
}"|The presence of multiple scenes depicting eye-related injuries and traumas such as a man being stabbed in the eye with a knife suggests that the trope 'Eye Scream' is relevant to the movie. The various settings and characters involved in these scenes further support the likelihood of this trope being present in the movie.||
no|no|tt0100157_46|Screw This, I'm Outta Here!|"Is the trope ""Screw This, I'm Outta Here!"", which means ""Screw you guys, I'm going home."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_46(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Screw This, I'm Outta Here!
    # Definition: A character abruptly leaves a situation, expressing frustration or disinterest.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for signs of a character leaving abruptly.
    # 2. Behavior Analysis: Look for visual cues like walking away or expressions of frustration.
    # 3. Contextual Analysis: Consider the context to determine if the departure aligns with the trope.
    # 4. Answer Selection: Use select_answer to choose the most likely answer based on the analysis.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for signs of a character leaving abruptly
        departure_query = frame.simple_query(""Is there a character leaving abruptly?"", to_yesno=True)
        
        if ""yes"" in departure_query.lower():
            # Collect information about the departure event
            departure_description = frame.simple_query(""Describe the departure event in detail."")
            info[f""Departure in {i} th frame""] = departure_description

    # Answer the query based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Departure in 0 th frame"": ""describe the departure event in detail - metro goldwyn mayer"",
  ""Departure in 1 th frame"": ""a man opens a brown briefcase"",
  ""Departure in 2 th frame"": ""a plane takes off from a runway"",
  ""Departure in 3 th frame"": ""a man is driving a car in the snow"",
  ""Departure in 4 th frame"": ""describe the departure event in detail person, person, person"",
  ""Departure in 5 th frame"": ""describe the departure event in detail, including:"",
  ""Departure in 6 th frame"": ""the departure event in detail''"",
  ""Departure in 7 th frame"": ""i was able to get out of the snow"",
  ""Departure in 8 th frame"": ""a man is thrown out of a plane"",
  ""Departure in 9 th frame"": ""a man is leaving a boat in the snow"",
  ""Departure in 10 th frame"": ""a woman leaves a room in a house"",
  ""Departure in 11 th frame"": ""a woman leaves a room in the film"",
  ""Departure in 12 th frame"": ""i woke up in the middle of the night in a hospital"",
  ""Departure in 13 th frame"": ""person's character leaves the office in person's car"",
  ""Departure in 14 th frame"": ""person leaves the office in person's truck"",
  ""Departure in 15 th frame"": ""the departure'' is a scene in the movie the departure''"",
  ""Departure in 16 th frame"": ""a woman leaves a room in a house"",
  ""Departure in 17 th frame"": ""person leaves the hospital in a hospital bed"",
  ""Departure in 18 th frame"": ""person and person leave the cabin in the woods"",
  ""Departure in 19 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 20 th frame"": ""person, person, person, person, person"",
  ""Departure in 21 th frame"": ""person and person drive away in a truck"",
  ""Departure in 22 th frame"": ""a woman is seen standing in the snow"",
  ""Departure in 23 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 24 th frame"": ""person leaves the house in a cab"",
  ""Departure in 25 th frame"": ""he leaves the hospital in a wheelchair"",
  ""Departure in 26 th frame"": ""a man leaves a hospital with a dog"",
  ""Departure in 27 th frame"": ""i'm leaving a cabin"",
  ""Departure in 28 th frame"": ""person's character, person, leaves the house"",
  ""Departure in 29 th frame"": ""a man leaves a room in the house"",
  ""Departure in 30 th frame"": ""the departure event'' is a scene in the film where a man leaves a room"",
  ""Departure in 31 th frame"": ""person, person, person, person, person"",
  ""Departure in 32 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 33 th frame"": ""a man leaves a room with a knife"",
  ""Departure in 34 th frame"": ""a man leaves a room with a woman"",
  ""Departure in 35 th frame"": ""a man leaves a woman in a car"",
  ""Departure in 36 th frame"": ""describe the departure event in detail - departure stock videos & royalty-free footage"",
  ""Departure in 37 th frame"": ""person, person, person, person, person"",
  ""Departure in 38 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 39 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 40 th frame"": ""person's character, person, leaves the house"",
  ""Departure in 41 th frame"": ""person leaves the room and walks to the door"",
  ""Departure in 42 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 43 th frame"": ""person's departure from the tv show"",
  ""Departure in 44 th frame"": ""describe the departure event in detail, in detail"",
  ""Departure in 45 th frame"": ""person leaves the house with a typewriter"",
  ""Departure in 46 th frame"": ""i woke up in the middle of the night to find the door open"",
  ""Departure in 47 th frame"": ""person's departure is a departure from her life"",
  ""Departure in 48 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 49 th frame"": ""he leaves his wife and daughter in the car"",
  ""Departure in 50 th frame"": ""describe the departure event in detail - wikipedia"",
  ""Departure in 51 th frame"": ""a person leaves a room in a wheelchair"",
  ""Departure in 52 th frame"": ""a man leaves a room in a wheelchair"",
  ""Departure in 53 th frame"": ""he leaves the house in a wheelchair"",
  ""Departure in 54 th frame"": ""a penguin and a cow are seen on a bed"",
  ""Departure in 55 th frame"": ""a man in a wheelchair leaves the house"",
  ""Departure in 56 th frame"": ""a man in a wheelchair leaves a house"",
  ""Departure in 57 th frame"": ""describe the departure event in detail person, person, person"",
  ""Departure in 58 th frame"": ""a woman leaves a cabin in the snow"",
  ""Departure in 59 th frame"": ""a young man leaves his home in the snow"",
  ""Departure in 60 th frame"": ""the door is opened and person leaves the house"",
  ""Departure in 61 th frame"": ""- person stock videos & royalty-free footage"",
  ""Departure in 62 th frame"": ""a woman leaves a room in the house"",
  ""Departure in 63 th frame"": ""person, person, person, person, person"",
  ""Departure in 64 th frame"": ""a skier leaves a ski lodge"",
  ""Departure in 65 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 66 th frame"": ""describe the departure event in detail, in detail"",
  ""Departure in 67 th frame"": ""a man leaves a room in a hotel"",
  ""Departure in 68 th frame"": ""the departure event is described in detail in the film"",
  ""Departure in 69 th frame"": ""a man leaves a woman in a car"",
  ""Departure in 70 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 71 th frame"": ""person leaves the house in a limo"",
  ""Departure in 72 th frame"": ""a woman leaves a room in the house"",
  ""Departure in 73 th frame"": ""person and person leave the house in a helicopter"",
  ""Departure in 74 th frame"": ""person, person, person, person, person"",
  ""Departure in 75 th frame"": ""the departure event is a departure event in the film"",
  ""Departure in 76 th frame"": ""a dinner party at a mansion"",
  ""Departure in 77 th frame"": ""he leaves a glass of wine on the table"",
  ""Departure in 78 th frame"": ""- describe the departure event in detail stock videos & royalty-free footage"",
  ""Departure in 79 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 80 th frame"": ""person leaves the house in a robe"",
  ""Departure in 81 th frame"": ""person, person, person, person, person"",
  ""Departure in 82 th frame"": ""the departure event is a scene in the film"",
  ""Departure in 83 th frame"": ""a train leaves a station at night"",
  ""Departure in 84 th frame"": ""describe the details of the departure event in detail"",
  ""Departure in 85 th frame"": ""he leaves his wife and daughter in the car"",
  ""Departure in 86 th frame"": ""he leaves the hospital in a wheelchair"",
  ""Departure in 87 th frame"": ""a man is stabbed with a knife"",
  ""Departure in 89 th frame"": ""the departure event is a departure event in which a person leaves a city"",
  ""Departure in 90 th frame"": ""the departure'' is a scene in the movie the departure''"",
  ""Departure in 91 th frame"": ""a man leaves a room with a wooden board"",
  ""Departure in 92 th frame"": ""a man leaves a hospital in a wheelchair"",
  ""Departure in 93 th frame"": ""the departure event'' is a departure event in the movie the sheriff''"",
  ""Departure in 94 th frame"": ""person leaves the office and walks to the door"",
  ""Departure in 95 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 96 th frame"": ""a man leaves a shop with a suitcase"",
  ""Departure in 97 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 98 th frame"": ""person, person, person, person, person"",
  ""Departure in 99 th frame"": ""he leaves the house in a boat"",
  ""Departure in 100 th frame"": ""the departure event in detail''"",
  ""Departure in 101 th frame"": ""a man and a woman leave a house"",
  ""Departure in 102 th frame"": ""person and person leave the house in a car"",
  ""Departure in 103 th frame"": ""the departure event in detail''"",
  ""Departure in 104 th frame"": ""a man leaves a building in a helicopter"",
  ""Departure in 105 th frame"": ""the departure event is a scene in the movie"",
  ""Departure in 106 th frame"": ""a man is laying on the ground"",
  ""Departure in 107 th frame"": ""describe the departure event in detail person, person"",
  ""Departure in 108 th frame"": ""a man in a wheelchair leaves the room"",
  ""Departure in 109 th frame"": ""a woman's hand holding a revolver"",
  ""Departure in 110 th frame"": ""describe the departure event in detail - the departure"",
  ""Departure in 111 th frame"": ""a man leaves a restaurant with a woman"",
  ""Departure in 112 th frame"": ""a young woman leaves a hotel room"",
  ""Departure in 113 th frame"": ""describe the departure event in detail - departure stock videos"",
  ""Departure in 114 th frame"": ""a person leaves a place of employment"",
  ""Departure in 115 th frame"": ""he screams and runs away"",
  ""Departure in 116 th frame"": ""he tries to leave but he can't"",
  ""Departure in 117 th frame"": ""a group of people leave a building"",
  ""Departure in 118 th frame"": ""he leaves the house and walks down the stairs"",
  ""Departure in 119 th frame"": ""he leaves his wife and daughter at the airport""
}"|The trope `Screw This, I'm Outta Here!` involves a character expressing a sudden decision to abandon a situation or task, often accompanied by a sense of frustration or resignation. The events depicted in the frames do not specifically show a character expressing this sentiment, but rather show various forms of departure without the specific context of frustration or resignation.||
no|no|tt0100157_47|Kick the Dog|"Is the trope ""Kick the Dog"", which means ""When a character does something evil for no apparent gain, because the author wants to demonstrate that he's not a nice guy and shift 
audience sympathy away from him."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_47(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Kick the Dog
    # Definition: An act of cruelty by a character, typically towards a more vulnerable or defenseless entity, to establish the character's malevolence
    # Thought: The trope detection involves three steps:
    # 1. Context Information Collection: To observe attacker's malevolence and victim's defenseless entity, we need to concern action and event in adjacent frames and use them as context to understand the story
    # 2. Event Observation: ""Kick the Dog"" would present in attack event within a frame. Use the context from first step as condition and query more detail in advance    
    # 3. Answer Selection: With information collected from second step, we leave the reasoning and question answering to select_answer api
    video_segment = VideoSegment(video, annotation)
    # Create a info dictionary, which would later pass to select_answer api
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # understanding current frame with context information
        caption_query = ""What is happening in the scene? please answer with at least 10 words""
        caption = frame.simple_query(caption_query)
        # check if there is any potential attack event
        has_attack_event = frame.llm_query(f""Is there any potential attack event in description '{caption}'?"", to_yesno=True)
        if 'yes' in has_attack_event.lower():
            # query the event in detail
            attack_event_query = ""What attack event is in the scene and what action and emotion does attacker and victim have, please answer with at least 40 words""     
            attack_event_description = frame.simple_query(attack_event_query)
            info[f""Attack event in {i} th frame""] = attack_event_description
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Attack event in 87 th frame"": ""the victim is stabbed with a knife"",
  ""Attack event in 88 th frame"": ""a man is cutting a man's arm"",
  ""Attack event in 109 th frame"": ""a woman is shot with a gun""
}"|The trope `Kick the Dog` involves a character doing something evil for no apparent gain to demonstrate they are not a nice person. The violent attacks depicted in the frames involve the use of weapons and result in harm to the victims, but there is no indication that the perpetrators are doing so for no apparent gain or to shift audience sympathy away from them. The actions seem to be driven by a different motive, such as revenge or self-defense.||
no|no|tt0100157_62|Blatant Lies|"Is the trope ""Blatant Lies"", which means ""A glaringly obvious lie."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_62(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Blatant Lies
    # Definition: A glaringly obvious lie.
    # Thought Process:
    # 1. Frame Selection: Analyze frames for instances where characters make statements that are clearly false.
    # 2. Contextual Analysis: Look for cues such as character expressions or contradictory actions that indicate a lie.
    # 3. Answer Selection: Determine if the trope is relevant based on the presence of obvious lies in the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        # Check for instances of blatant lies in dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any blatant lies in the dialogue?"", to_yesno=True)
        # Check for visual cues of lies
        visual_cues = frame.simple_query(""Are there any visual cues indicating lies?"", to_yesno=True)
        if ""yes"" in dialogue_analysis or ""yes"" in visual_cues:
            info[f""Blatant lies detected in frame {i}""] = ""Yes""
    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Blatant lies detected in frame 0"": ""Yes"",
  ""Blatant lies detected in frame 1"": ""Yes"",
  ""Blatant lies detected in frame 2"": ""Yes"",
  ""Blatant lies detected in frame 3"": ""Yes"",
  ""Blatant lies detected in frame 4"": ""Yes"",
  ""Blatant lies detected in frame 5"": ""Yes"",
  ""Blatant lies detected in frame 6"": ""Yes"",
  ""Blatant lies detected in frame 8"": ""Yes"",
  ""Blatant lies detected in frame 9"": ""Yes"",
  ""Blatant lies detected in frame 10"": ""Yes"",
  ""Blatant lies detected in frame 11"": ""Yes"",
  ""Blatant lies detected in frame 12"": ""Yes"",
  ""Blatant lies detected in frame 13"": ""Yes"",
  ""Blatant lies detected in frame 14"": ""Yes"",
  ""Blatant lies detected in frame 15"": ""Yes"",
  ""Blatant lies detected in frame 16"": ""Yes"",
  ""Blatant lies detected in frame 17"": ""Yes"",
  ""Blatant lies detected in frame 18"": ""Yes"",
  ""Blatant lies detected in frame 19"": ""Yes"",
  ""Blatant lies detected in frame 20"": ""Yes"",
  ""Blatant lies detected in frame 21"": ""Yes"",
  ""Blatant lies detected in frame 22"": ""Yes"",
  ""Blatant lies detected in frame 23"": ""Yes"",
  ""Blatant lies detected in frame 24"": ""Yes"",
  ""Blatant lies detected in frame 25"": ""Yes"",
  ""Blatant lies detected in frame 26"": ""Yes"",
  ""Blatant lies detected in frame 28"": ""Yes"",
  ""Blatant lies detected in frame 29"": ""Yes"",
  ""Blatant lies detected in frame 30"": ""Yes"",
  ""Blatant lies detected in frame 31"": ""Yes"",
  ""Blatant lies detected in frame 32"": ""Yes"",
  ""Blatant lies detected in frame 33"": ""Yes"",
  ""Blatant lies detected in frame 34"": ""Yes"",
  ""Blatant lies detected in frame 35"": ""Yes"",
  ""Blatant lies detected in frame 36"": ""Yes"",
  ""Blatant lies detected in frame 37"": ""Yes"",
  ""Blatant lies detected in frame 38"": ""Yes"",
  ""Blatant lies detected in frame 39"": ""Yes"",
  ""Blatant lies detected in frame 40"": ""Yes"",
  ""Blatant lies detected in frame 41"": ""Yes"",
  ""Blatant lies detected in frame 42"": ""Yes"",
  ""Blatant lies detected in frame 43"": ""Yes"",
  ""Blatant lies detected in frame 44"": ""Yes"",
  ""Blatant lies detected in frame 45"": ""Yes"",
  ""Blatant lies detected in frame 46"": ""Yes"",
  ""Blatant lies detected in frame 47"": ""Yes"",
  ""Blatant lies detected in frame 48"": ""Yes"",
  ""Blatant lies detected in frame 49"": ""Yes"",
  ""Blatant lies detected in frame 50"": ""Yes"",
  ""Blatant lies detected in frame 51"": ""Yes"",
  ""Blatant lies detected in frame 52"": ""Yes"",
  ""Blatant lies detected in frame 53"": ""Yes"",
  ""Blatant lies detected in frame 54"": ""Yes"",
  ""Blatant lies detected in frame 55"": ""Yes"",
  ""Blatant lies detected in frame 56"": ""Yes"",
  ""Blatant lies detected in frame 57"": ""Yes"",
  ""Blatant lies detected in frame 58"": ""Yes"",
  ""Blatant lies detected in frame 59"": ""Yes"",
  ""Blatant lies detected in frame 60"": ""Yes"",
  ""Blatant lies detected in frame 61"": ""Yes"",
  ""Blatant lies detected in frame 62"": ""Yes"",
  ""Blatant lies detected in frame 63"": ""Yes"",
  ""Blatant lies detected in frame 65"": ""Yes"",
  ""Blatant lies detected in frame 66"": ""Yes"",
  ""Blatant lies detected in frame 67"": ""Yes"",
  ""Blatant lies detected in frame 68"": ""Yes"",
  ""Blatant lies detected in frame 69"": ""Yes"",
  ""Blatant lies detected in frame 70"": ""Yes"",
  ""Blatant lies detected in frame 71"": ""Yes"",
  ""Blatant lies detected in frame 72"": ""Yes"",
  ""Blatant lies detected in frame 73"": ""Yes"",
  ""Blatant lies detected in frame 74"": ""Yes"",
  ""Blatant lies detected in frame 75"": ""Yes"",
  ""Blatant lies detected in frame 76"": ""Yes"",
  ""Blatant lies detected in frame 77"": ""Yes"",
  ""Blatant lies detected in frame 78"": ""Yes"",
  ""Blatant lies detected in frame 79"": ""Yes"",
  ""Blatant lies detected in frame 80"": ""Yes"",
  ""Blatant lies detected in frame 81"": ""Yes"",
  ""Blatant lies detected in frame 82"": ""Yes"",
  ""Blatant lies detected in frame 83"": ""Yes"",
  ""Blatant lies detected in frame 84"": ""Yes"",
  ""Blatant lies detected in frame 85"": ""Yes"",
  ""Blatant lies detected in frame 86"": ""Yes"",
  ""Blatant lies detected in frame 87"": ""Yes"",
  ""Blatant lies detected in frame 88"": ""Yes"",
  ""Blatant lies detected in frame 89"": ""Yes"",
  ""Blatant lies detected in frame 90"": ""Yes"",
  ""Blatant lies detected in frame 91"": ""Yes"",
  ""Blatant lies detected in frame 92"": ""Yes"",
  ""Blatant lies detected in frame 93"": ""Yes"",
  ""Blatant lies detected in frame 94"": ""Yes"",
  ""Blatant lies detected in frame 95"": ""Yes"",
  ""Blatant lies detected in frame 96"": ""Yes"",
  ""Blatant lies detected in frame 97"": ""Yes"",
  ""Blatant lies detected in frame 98"": ""Yes"",
  ""Blatant lies detected in frame 99"": ""Yes"",
  ""Blatant lies detected in frame 100"": ""Yes"",
  ""Blatant lies detected in frame 101"": ""Yes"",
  ""Blatant lies detected in frame 102"": ""Yes"",
  ""Blatant lies detected in frame 103"": ""Yes"",
  ""Blatant lies detected in frame 104"": ""Yes"",
  ""Blatant lies detected in frame 105"": ""Yes"",
  ""Blatant lies detected in frame 106"": ""Yes"",
  ""Blatant lies detected in frame 107"": ""Yes"",
  ""Blatant lies detected in frame 108"": ""Yes"",
  ""Blatant lies detected in frame 109"": ""Yes"",
  ""Blatant lies detected in frame 110"": ""Yes"",
  ""Blatant lies detected in frame 111"": ""Yes"",
  ""Blatant lies detected in frame 112"": ""Yes"",
  ""Blatant lies detected in frame 113"": ""Yes"",
  ""Blatant lies detected in frame 115"": ""Yes"",
  ""Blatant lies detected in frame 116"": ""Yes"",
  ""Blatant lies detected in frame 117"": ""Yes"",
  ""Blatant lies detected in frame 118"": ""Yes"",
  ""Blatant lies detected in frame 119"": ""Yes""
}"|The information provided states that blatant lies were detected in frames 0 to 119, which means the trope is not relevant to the movie as a whole||
yes|yes|tt0100157_71|Irony|"Is the trope ""Irony"", which means ""The intended meaning is an inversion of the plain meaning."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_71(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Irony
    # Definition: The intended meaning is an inversion of the plain meaning.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations where the intended meaning is opposite to the plain meaning.
    # 2. Contextual Analysis: Look for scenarios where actions or events contradict their expected outcomes.
    # 3. Irony Detection: Identify instances where there is a clear discrepancy between what is expected and what actually occurs.
    # 4. Answer Selection: Use the select_answer API to determine if the trope of Irony is relevant to the movie based on the detected instances.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, which can provide context for detecting irony
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # Analyze the dialogue for any ironic statements or situations
        irony_detection = frame.llm_query(subtitles_info + ""Is there any irony in the dialogue?"", to_yesno=True)
        
        # Check for visual cues or actions that suggest irony
        visual_irony_detection = frame.simple_query(""Is there any visual irony?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests irony, collect this information
        if ""yes"" in irony_detection or ""yes"" in visual_irony_detection:
            info[f""Irony in dialogue at frame {i}""] = irony_detection
            info[f""Visual irony at frame {i}""] = visual_irony_detection
    
    # Use the collected information to determine if the trope of Irony is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Irony in dialogue at frame 0"": ""Yes"",
  ""Visual irony at frame 0"": ""yes - a lion in a movie theater"",
  ""Irony in dialogue at frame 1"": ""Yes"",
  ""Visual irony at frame 1"": ""'yes ', 'no"",
  ""Irony in dialogue at frame 3"": ""Yes"",
  ""Visual irony at frame 3"": ""yes - a man driving a car"",
  ""Irony in dialogue at frame 4"": ""Yes"",
  ""Visual irony at frame 4"": ""yes, there is irony in the title"",
  ""Irony in dialogue at frame 5"": ""Yes"",
  ""Visual irony at frame 5"": ""yes - i think there is a visual irony"",
  ""Irony in dialogue at frame 6"": ""Yes"",
  ""Visual irony at frame 6"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 7"": ""Yes"",
  ""Visual irony at frame 7"": ""ii. yes ii. no"",
  ""Irony in dialogue at frame 8"": ""Yes"",
  ""Visual irony at frame 8"": ""yes, he is laying in the snow"",
  ""Irony in dialogue at frame 9"": ""Yes"",
  ""Visual irony at frame 9"": ""'yes ', 'no"",
  ""Irony in dialogue at frame 10"": ""No"",
  ""Visual irony at frame 10"": ""yes - a woman in a grey sweater"",
  ""Irony in dialogue at frame 11"": ""No"",
  ""Visual irony at frame 11"": ""yes, the woman is wearing a sweater"",
  ""Irony in dialogue at frame 13"": ""Yes"",
  ""Visual irony at frame 13"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 14"": ""No"",
  ""Visual irony at frame 14"": ""yes, he is wearing a hat"",
  ""Irony in dialogue at frame 15"": ""Yes"",
  ""Visual irony at frame 15"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 16"": ""No"",
  ""Visual irony at frame 16"": ""yes, the woman is wearing a dress"",
  ""Irony in dialogue at frame 17"": ""Yes"",
  ""Visual irony at frame 17"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 18"": ""No"",
  ""Visual irony at frame 18"": ""yes, the man is wearing a hat"",
  ""Irony in dialogue at frame 19"": ""Yes"",
  ""Visual irony at frame 19"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 20"": ""No"",
  ""Visual irony at frame 20"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 21"": ""No"",
  ""Visual irony at frame 21"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 23"": ""Yes"",
  ""Visual irony at frame 23"": ""yes, a man in a hospital bed"",
  ""Irony in dialogue at frame 24"": ""Yes"",
  ""Visual irony at frame 24"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 25"": ""Yes"",
  ""Visual irony at frame 25"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 26"": ""No"",
  ""Visual irony at frame 26"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 27"": ""Yes"",
  ""Visual irony at frame 27"": ""yes, the house is covered in snow"",
  ""Irony in dialogue at frame 28"": ""Yes"",
  ""Visual irony at frame 28"": ""yes, the woman is holding a glass of milk"",
  ""Irony in dialogue at frame 29"": ""Yes"",
  ""Visual irony at frame 29"": ""yes - a man in a dark room"",
  ""Irony in dialogue at frame 30"": ""No"",
  ""Visual irony at frame 30"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 31"": ""Yes"",
  ""Visual irony at frame 31"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 32"": ""Yes"",
  ""Visual irony at frame 32"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 33"": ""Yes"",
  ""Visual irony at frame 33"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 34"": ""No"",
  ""Visual irony at frame 34"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 35"": ""No"",
  ""Visual irony at frame 35"": ""yes, the woman is wearing a plaid shirt"",
  ""Irony in dialogue at frame 36"": ""Yes"",
  ""Visual irony at frame 36"": ""yes - no stock videos & footage"",
  ""Irony in dialogue at frame 37"": ""No"",
  ""Visual irony at frame 37"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 38"": ""Yes"",
  ""Visual irony at frame 38"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 39"": ""Yes"",
  ""Visual irony at frame 39"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 40"": ""No"",
  ""Visual irony at frame 40"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 41"": ""Yes"",
  ""Visual irony at frame 41"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 42"": ""No"",
  ""Visual irony at frame 42"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 43"": ""No."",
  ""Visual irony at frame 43"": ""yes, a man is sitting on a television set"",
  ""Irony in dialogue at frame 45"": ""No"",
  ""Visual irony at frame 45"": ""yes, the woman is holding a typewriter"",
  ""Irony in dialogue at frame 46"": ""Yes"",
  ""Visual irony at frame 46"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 47"": ""No"",
  ""Visual irony at frame 47"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 48"": ""Yes"",
  ""Visual irony at frame 48"": ""yes, but it's hard to tell"",
  ""Irony in dialogue at frame 49"": ""Yes"",
  ""Visual irony at frame 49"": ""yes, he is wearing a red shirt"",
  ""Irony in dialogue at frame 51"": ""Yes"",
  ""Visual irony at frame 51"": ""yes - a person in a wheelchair"",
  ""Irony in dialogue at frame 52"": ""Yes"",
  ""Visual irony at frame 52"": ""yes, he is in a wheelchair"",
  ""Irony in dialogue at frame 53"": ""Yes"",
  ""Visual irony at frame 53"": ""yes, he is in a wheelchair"",
  ""Irony in dialogue at frame 54"": ""Yes"",
  ""Visual irony at frame 54"": ""yes, a penguin and a cow"",
  ""Irony in dialogue at frame 55"": ""Yes"",
  ""Visual irony at frame 55"": ""yes, the man is in a wheelchair"",
  ""Irony in dialogue at frame 56"": ""Yes"",
  ""Visual irony at frame 56"": ""yes, he is in a wheelchair"",
  ""Irony in dialogue at frame 57"": ""Yes"",
  ""Visual irony at frame 57"": ""yes, there is irony in the scene"",
  ""Irony in dialogue at frame 59"": ""Yes"",
  ""Visual irony at frame 59"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 60"": ""Yes"",
  ""Visual irony at frame 60"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 61"": ""No"",
  ""Visual irony at frame 61"": ""yes - person stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 62"": ""Yes"",
  ""Visual irony at frame 62"": ""yes, but it isn't obvious"",
  ""Irony in dialogue at frame 63"": ""Yes"",
  ""Visual irony at frame 63"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 65"": ""Yes"",
  ""Visual irony at frame 65"": ""yes, he is wearing a scarf"",
  ""Irony in dialogue at frame 67"": ""Yes"",
  ""Visual irony at frame 67"": ""yes, he is wearing a scarf"",
  ""Irony in dialogue at frame 68"": ""No"",
  ""Visual irony at frame 68"": ""yes - person stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 69"": ""Yes"",
  ""Visual irony at frame 69"": ""yes, the woman is wearing a jacket"",
  ""Irony in dialogue at frame 70"": ""No"",
  ""Visual irony at frame 70"": ""yes, the woman is sitting in the chair"",
  ""Irony in dialogue at frame 71"": ""Yes"",
  ""Visual irony at frame 71"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 72"": ""Yes"",
  ""Visual irony at frame 72"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 73"": ""Yes"",
  ""Visual irony at frame 73"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 74"": ""No"",
  ""Visual irony at frame 74"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 75"": ""Yes"",
  ""Visual irony at frame 75"": ""yes, the woman is holding a glass"",
  ""Irony in dialogue at frame 76"": ""Yes"",
  ""Visual irony at frame 76"": ""yes - a man is sitting at a table"",
  ""Irony in dialogue at frame 77"": ""Yes"",
  ""Visual irony at frame 77"": ""yes, he is holding a glass of wine"",
  ""Irony in dialogue at frame 78"": ""Yes"",
  ""Visual irony at frame 78"": ""yes - yes - yes - yes"",
  ""Irony in dialogue at frame 79"": ""Yes"",
  ""Visual irony at frame 79"": ""yes - a man writing on a typewriter"",
  ""Irony in dialogue at frame 80"": ""Yes"",
  ""Visual irony at frame 80"": ""yes, the woman is wearing a robe"",
  ""Irony in dialogue at frame 81"": ""No"",
  ""Visual irony at frame 81"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 82"": ""Yes"",
  ""Visual irony at frame 82"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 83"": ""Yes"",
  ""Visual irony at frame 83"": ""yes, there is a water tower in the background"",
  ""Irony in dialogue at frame 84"": ""Yes"",
  ""Visual irony at frame 84"": ""yes - a red book with gold lettering"",
  ""Irony in dialogue at frame 85"": ""Yes"",
  ""Visual irony at frame 85"": ""yes, he is wearing a plaid shirt"",
  ""Irony in dialogue at frame 86"": ""Yes"",
  ""Visual irony at frame 86"": ""yes, the man is in a hospital bed"",
  ""Irony in dialogue at frame 87"": ""Yes"",
  ""Visual irony at frame 87"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 89"": ""No"",
  ""Visual irony at frame 89"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 90"": ""No"",
  ""Visual irony at frame 90"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 91"": ""Yes"",
  ""Visual irony at frame 91"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 92"": ""Yes"",
  ""Visual irony at frame 92"": ""yes, a man in a hospital bed"",
  ""Irony in dialogue at frame 93"": ""Yes"",
  ""Visual irony at frame 93"": ""yes person is wearing a cowboy hat"",
  ""Irony in dialogue at frame 94"": ""No"",
  ""Visual irony at frame 94"": ""yes, there is a visual irony"",
  ""Irony in dialogue at frame 95"": ""Yes"",
  ""Visual irony at frame 95"": ""yes, he wears a hat"",
  ""Irony in dialogue at frame 96"": ""No"",
  ""Visual irony at frame 96"": ""yes, the man is standing in front of a store"",
  ""Irony in dialogue at frame 97"": ""No"",
  ""Visual irony at frame 97"": ""yes, he is wearing a hat"",
  ""Irony in dialogue at frame 98"": ""Yes"",
  ""Visual irony at frame 98"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 99"": ""Yes"",
  ""Visual irony at frame 99"": ""yes, there is some irony in the scene"",
  ""Irony in dialogue at frame 100"": ""Yes"",
  ""Visual irony at frame 100"": ""yes, he is wearing a hat"",
  ""Irony in dialogue at frame 101"": ""No"",
  ""Visual irony at frame 101"": ""yes, the woman is wearing a hat"",
  ""Irony in dialogue at frame 102"": ""No"",
  ""Visual irony at frame 102"": ""yes, the man is wearing a cowboy hat"",
  ""Irony in dialogue at frame 103"": ""No"",
  ""Visual irony at frame 103"": ""yes person in a cowboy hat"",
  ""Irony in dialogue at frame 104"": ""Yes"",
  ""Visual irony at frame 104"": ""yes, the man is wearing a green shirt"",
  ""Irony in dialogue at frame 105"": ""No"",
  ""Visual irony at frame 105"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 106"": ""Yes"",
  ""Visual irony at frame 106"": ""yes - a person laying on the ground"",
  ""Irony in dialogue at frame 107"": ""Yes"",
  ""Visual irony at frame 107"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 108"": ""Yes"",
  ""Visual irony at frame 108"": ""yes person in a wheelchair in a dark room"",
  ""Irony in dialogue at frame 109"": ""Yes"",
  ""Visual irony at frame 109"": ""yes, the woman's hand is holding a gun"",
  ""Irony in dialogue at frame 110"": ""Yes"",
  ""Visual irony at frame 110"": ""yes - yes - yes - yes"",
  ""Irony in dialogue at frame 111"": ""Yes"",
  ""Visual irony at frame 111"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 112"": ""Yes"",
  ""Visual irony at frame 112"": ""yes - fire stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 113"": ""Yes"",
  ""Visual irony at frame 113"": ""yes - no stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 115"": ""Yes"",
  ""Visual irony at frame 115"": ""yes, the man in the green shirt is laughing"",
  ""Irony in dialogue at frame 116"": ""Yes"",
  ""Visual irony at frame 116"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 117"": ""Yes"",
  ""Visual irony at frame 117"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 118"": ""Yes"",
  ""Visual irony at frame 118"": ""yes, there is irony in the scene"",
  ""Irony in dialogue at frame 119"": ""No"",
  ""Visual irony at frame 119"": ""yes, he's wearing a tie""
}"|The video frames depict various instances of irony in dialogue and visuals, such as a lion in a movie theater, a man driving a car, a person in a wheelchair, a man in a hospital bed, a woman holding a glass of milk, a person wearing a cowboy hat, a man standing in front of a store, a woman wearing a hat, a man writing on a typewriter, a woman in a grey sweater, a man wearing a red shirt, a water tower in the background, and a red book with gold lettering. The presence of irony is noted in different scenes, confirming the relevance of the trope 'Irony' to the movie.||
yes|yes|tt0100157_73|Stealth Pun|"Is the trope ""Stealth Pun"", which means ""The writers put in a joke (almost always a pun), but never make or put in a Punch Line or explicit statement, hiding it in the set up of the joke. "", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_73(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Stealth Pun
    # Definition: A joke, typically a pun, is included by the writers but is not highlighted with a punchline or explicit statement. It's hidden within the setup of the joke, requiring the audience to notice and interpret it themselves.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential visual or audio cues that might indicate a hidden joke or pun. This requires understanding both the context and the elements present in the scene.
    # 2. Contextual Analysis: Since the essence of a Stealth Pun lies in the setup and requires audience interpretation, we need to look for elements that are inconspicuously out of place or cleverly integrated into the context but might not be immediately obvious.
    # 3. Detecting Puns: This involves analyzing the text or dialogue for play on words, and visual elements for any visual puns or jokes that rely on the visual context but are not explicitly acknowledged in the video.
    # 4. Answer Selection: Use the select_answer API to determine the most probable answer based on the analyzed data, considering the subtlety and clever integration of puns within the video content.
    
    video_segment = VideoSegment(video, annotation)
    
    # Create an info dictionary to hold detected elements that might contribute to a Stealth Pun
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # use llm_query to analyze dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any puns in the dialogue?"", to_yesno=True)
        
        # use simple_query to analyze image
        visual_pun_analysis = frame.simple_query(""Are there any visual puns?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests a pun, collect this information
        if ""yes"" in dialogue_analysis or ""yes"" in visual_pun_analysis:
            info[f""Pun in dialogue at frame {i}""] = dialogue_analysis
            info[f""Visual pun at frame {i}""] = visual_pun_analysis
    
    # Since Stealth Puns are about subtlety and not explicitly pointing out the joke, we need to balance detection with the likelihood of an actual pun being present without explicit acknowledgment.
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Pun in dialogue at frame 0"": ""Yes"",
  ""Visual pun at frame 0"": ""yes, there is a lion in the logo"",
  ""Pun in dialogue at frame 1"": ""No"",
  ""Visual pun at frame 1"": ""'yes, no, no"",
  ""Pun in dialogue at frame 4"": ""No"",
  ""Visual pun at frame 4"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 5"": ""No"",
  ""Visual pun at frame 5"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 6"": ""No"",
  ""Visual pun at frame 6"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 8"": ""No"",
  ""Visual pun at frame 8"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 9"": ""No"",
  ""Visual pun at frame 9"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 10"": ""No"",
  ""Visual pun at frame 10"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 11"": ""No"",
  ""Visual pun at frame 11"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 12"": ""No"",
  ""Visual pun at frame 12"": ""'yes ', 'yes"",
  ""Pun in dialogue at frame 13"": ""No"",
  ""Visual pun at frame 13"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 14"": ""No"",
  ""Visual pun at frame 14"": ""yes'' yes''"",
  ""Pun in dialogue at frame 15"": ""No"",
  ""Visual pun at frame 15"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 17"": ""No"",
  ""Visual pun at frame 17"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 18"": ""No"",
  ""Visual pun at frame 18"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 19"": ""No"",
  ""Visual pun at frame 19"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 20"": ""No"",
  ""Visual pun at frame 20"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 21"": ""No"",
  ""Visual pun at frame 21"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 23"": ""No"",
  ""Visual pun at frame 23"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 24"": ""No"",
  ""Visual pun at frame 24"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 25"": ""No"",
  ""Visual pun at frame 25"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 26"": ""No"",
  ""Visual pun at frame 26"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 28"": ""No"",
  ""Visual pun at frame 28"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 29"": ""No"",
  ""Visual pun at frame 29"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 30"": ""No"",
  ""Visual pun at frame 30"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 31"": ""No"",
  ""Visual pun at frame 31"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 32"": ""No"",
  ""Visual pun at frame 32"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 33"": ""No"",
  ""Visual pun at frame 33"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 34"": ""No"",
  ""Visual pun at frame 34"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 35"": ""No"",
  ""Visual pun at frame 35"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 36"": ""No"",
  ""Visual pun at frame 36"": ""yes - no stock videos & footage"",
  ""Pun in dialogue at frame 37"": ""No"",
  ""Visual pun at frame 37"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 38"": ""No"",
  ""Visual pun at frame 38"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 39"": ""No"",
  ""Visual pun at frame 39"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 40"": ""No"",
  ""Visual pun at frame 40"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 41"": ""No"",
  ""Visual pun at frame 41"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 42"": ""No"",
  ""Visual pun at frame 42"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 43"": ""No"",
  ""Visual pun at frame 43"": ""yes, there are many visual puns in this episode"",
  ""Pun in dialogue at frame 44"": ""No"",
  ""Visual pun at frame 44"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 45"": ""No"",
  ""Visual pun at frame 45"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 46"": ""No"",
  ""Visual pun at frame 46"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 47"": ""No"",
  ""Visual pun at frame 47"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 48"": ""No"",
  ""Visual pun at frame 48"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 49"": ""No"",
  ""Visual pun at frame 49"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 51"": ""No"",
  ""Visual pun at frame 51"": ""yes - no - yes - no"",
  ""Pun in dialogue at frame 52"": ""No"",
  ""Visual pun at frame 52"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 53"": ""No"",
  ""Visual pun at frame 53"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 54"": ""No"",
  ""Visual pun at frame 54"": ""yes, a penguin and a cow"",
  ""Pun in dialogue at frame 55"": ""No"",
  ""Visual pun at frame 55"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 56"": ""No"",
  ""Visual pun at frame 56"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 57"": ""No"",
  ""Visual pun at frame 57"": ""yes, there is a water tower in the snow"",
  ""Pun in dialogue at frame 58"": ""No"",
  ""Visual pun at frame 58"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 59"": ""No"",
  ""Visual pun at frame 59"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 60"": ""No"",
  ""Visual pun at frame 60"": ""yes, there is a doorknob"",
  ""Pun in dialogue at frame 61"": ""No"",
  ""Visual pun at frame 61"": ""yes - person stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 62"": ""No"",
  ""Visual pun at frame 62"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 63"": ""No"",
  ""Visual pun at frame 63"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 64"": ""No"",
  ""Visual pun at frame 64"": ""i think so yes i think so"",
  ""Pun in dialogue at frame 65"": ""No"",
  ""Visual pun at frame 65"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 66"": ""No"",
  ""Visual pun at frame 66"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 67"": ""No"",
  ""Visual pun at frame 67"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 68"": ""No"",
  ""Visual pun at frame 68"": ""yes - yes - yes - yes"",
  ""Pun in dialogue at frame 69"": ""No"",
  ""Visual pun at frame 69"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 70"": ""No"",
  ""Visual pun at frame 70"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 71"": ""No"",
  ""Visual pun at frame 71"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 72"": ""No"",
  ""Visual pun at frame 72"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 73"": ""No"",
  ""Visual pun at frame 73"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 74"": ""Yes"",
  ""Visual pun at frame 74"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 75"": ""No"",
  ""Visual pun at frame 75"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 76"": ""Yes"",
  ""Visual pun at frame 76"": ""yes - a man in a red jacket"",
  ""Pun in dialogue at frame 77"": ""No"",
  ""Visual pun at frame 77"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 78"": ""No"",
  ""Visual pun at frame 78"": ""yes - yes - yes - yes"",
  ""Pun in dialogue at frame 79"": ""No"",
  ""Visual pun at frame 79"": ""yes - a typewriter in a desk"",
  ""Pun in dialogue at frame 80"": ""No"",
  ""Visual pun at frame 80"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 81"": ""No"",
  ""Visual pun at frame 81"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 82"": ""No"",
  ""Visual pun at frame 82"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 83"": ""Yes"",
  ""Visual pun at frame 83"": ""yes, there is a water tower in the background"",
  ""Pun in dialogue at frame 84"": ""No"",
  ""Visual pun at frame 84"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 85"": ""No"",
  ""Visual pun at frame 85"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 86"": ""No"",
  ""Visual pun at frame 86"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 87"": ""No"",
  ""Visual pun at frame 87"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 89"": ""No"",
  ""Visual pun at frame 89"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 90"": ""No"",
  ""Visual pun at frame 90"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 91"": ""No"",
  ""Visual pun at frame 91"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 92"": ""No"",
  ""Visual pun at frame 92"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 93"": ""No"",
  ""Visual pun at frame 93"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 94"": ""No"",
  ""Visual pun at frame 94"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 95"": ""No"",
  ""Visual pun at frame 95"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 96"": ""No"",
  ""Visual pun at frame 96"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 97"": ""No"",
  ""Visual pun at frame 97"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 98"": ""No"",
  ""Visual pun at frame 98"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 99"": ""No"",
  ""Visual pun at frame 99"": "" yes ''  no"",
  ""Pun in dialogue at frame 100"": ""No"",
  ""Visual pun at frame 100"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 101"": ""No"",
  ""Visual pun at frame 101"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 102"": ""No"",
  ""Visual pun at frame 102"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 103"": ""No"",
  ""Visual pun at frame 103"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 104"": ""No"",
  ""Visual pun at frame 104"": ""yes, there are a few visual puns"",
  ""Pun in dialogue at frame 105"": ""No"",
  ""Visual pun at frame 105"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 106"": ""No"",
  ""Visual pun at frame 106"": ""yes - a person laying on the ground"",
  ""Pun in dialogue at frame 107"": ""No"",
  ""Visual pun at frame 107"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 108"": ""No"",
  ""Visual pun at frame 108"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 109"": ""No"",
  ""Visual pun at frame 109"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 110"": ""No"",
  ""Visual pun at frame 110"": ""yes - a woman in a turtleneck"",
  ""Pun in dialogue at frame 111"": ""No"",
  ""Visual pun at frame 111"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 113"": ""No"",
  ""Visual pun at frame 113"": ""yes - no stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 115"": ""No"",
  ""Visual pun at frame 115"": ""yes, there are many visual puns"",
  ""Pun in dialogue at frame 116"": ""No"",
  ""Visual pun at frame 116"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 117"": ""No"",
  ""Visual pun at frame 117"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 118"": ""No"",
  ""Visual pun at frame 118"": ""yes, there is a stairway to hell"",
  ""Pun in dialogue at frame 119"": ""No"",
  ""Visual pun at frame 119"": ""yes, there are visual puns in the movie""
}"|The movie contains various visual puns throughout, adding a playful and creative element to the viewing experience. The frames from the video segment also include multiple instances of visual puns, such as a person lying on the ground, a woman in a turtleneck, and a stairway to hell. The consistent presence of visual puns in both the movie and the video segment suggests that the trope 'Stealth Pun' is relevant to the film.||
|no|tt0100157_74|Bittersweet Ending|"Is the trope ""Bittersweet Ending"", which means ""When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some 
irrevocable loss has happened during the course of the events, and nothing will ever be the same again."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_74(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Bittersweet Ending
    # Definition: When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some irrevocable loss has happened during the course of the events, and nothing will ever be the same again.
    # Thought: To detect the ""Bittersweet Ending"" trope, we need to analyze the emotional and narrative elements of the video segment, focusing on the resolution and aftermath of the story.
    # 1. Emotional Analysis: Look for visual cues of sadness, loss, or sacrifice in the final frames of the video segment.
    # 2. Narrative Examination: Analyze the character arcs and plot developments to identify any significant losses or unfulfilled resolutions.
    # 3. Answer Selection: Use the select_answer API to determine if the video segment aligns with the characteristics of a bittersweet ending.
    
    video_segment = VideoSegment(video, annotation)
    
    # Assuming the last 10% of the video is a reasonable segment to analyze for the ending
    ending_segment_start = int(video_segment.num_frames * 0.9)
    ending_segment = video_segment.trim(start=ending_segment_start)
    
    # Create an info dictionary to store collected information
    info = {}
    
    for i, frame in enumerate(ending_segment.frame_iterator()):
        # Detect visual cues of sadness, tragedy, or loss
        sadness_query = frame.simple_query(""Is there sadness or mourning?"", to_yesno=True)
        tragedy_query = frame.simple_query(""Is there visible tragedy or destruction?"", to_yesno=True)

        if ""yes"" in sadness_query.lower() or ""yes"" in tragedy_query.lower():
            # Caption the frame
            caption = frame.simple_query(""What is in the frame?"")
            sadness_query = frame.simple_query(""What sadness or mourning event is in the frame?"")
            tragedy_query = frame.simple_query(""What visible tragedy or destruction event is in the frame?"")
            info[f""Caption of {ending_segment.start + 1} th frame""] = caption
            info[f""Sadness or mourning event in {ending_segment.start + 1} th frame""] = sadness_query
            info[f""Visible tragedy or destruction event in {ending_segment.start + 1} th frame""] = tragedy_query
    
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|null|||VideoSegment has duration=0
no|no|tt0100157_82|What the Hell, Hero?|"Is the trope ""What the Hell, Hero?"", which means ""When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_82(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: What the Hell, Hero?
    # Definition: When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where a hero's actions are questionable or morally ambiguous.
    # 2. Character Analysis: Identify the hero and the actions that might lead to the trope being relevant.
    # 3. Answer Selection: Use the collected information to determine if the trope is applicable to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with the query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for hero in frame.find(""hero""):
            hero_id = video_segment.face_identify(hero)
            if hero_id is None:
                continue
            hero_action = hero.simple_query(subtitles_info + ""What is the hero doing?"")
            if hero_id not in info:
                info[hero_id] = {}
            info[hero_id].update({
                f""Action in {i} frame"": hero_action
            })

    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|There is no indication in the provided information that any character in the movie calls out one of the heroes for doing something unheroic or heinous||
no|no|tt0100157_89|Chekhov's Gunman|"Is the trope ""Chekhov's Gunman"", which means ""Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_89(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Chekhov's Gunman
    # Definition: Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters introduced early on but seemingly unimportant.
    # 2. Character Analysis: Track the actions and interactions of these characters throughout the video segment.
    # 3. Relevance Assessment: Determine if any of these initially unimportant characters play a significant role later on.
    # 4. Answer Selection: Use the select_answer API to decide if the ""Chekhov's Gunman"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    relevant_characters = []

    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Track the character's actions and interactions
            character_actions = character.simple_query(""What actions is this character performing?"")
            if i < video_segment.num_frames // 2:
                # Characters introduced in the first half are considered for the trope
                relevant_characters.append((character_id, character_actions))

    # Check if any of the initially unimportant characters become significant later
    relevant_characters_info = {}
    for character_id, actions in relevant_characters:
        if actions:
            # If the character has actions, they might become important later
            relevant_characters_info[character_id] = actions

    # Determine if the ""Chekhov's Gunman"" trope is relevant based on the character analysis
    if relevant_characters_info:
        answer = ""yes""
        reason = ""There are characters introduced early on with actions that might become significant later.""
    else:
        answer = ""no""
        reason = ""No characters introduced early on show signs of becoming important later.""

    return answer, reason, relevant_characters_info"|{}|No characters introduced early on show signs of becoming important later.||
no|yes|tt0100157_90|Red Herring|"Is the trope ""Red Herring"", which means ""A clue that leads in the wrong direction."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_90(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Red Herring
    # Definition: A clue that leads in the wrong direction.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify any misleading clues or information that could divert the audience's attention.
    # 2. Contextual Analysis: Look for elements that are presented as significant but ultimately turn out to be irrelevant or misleading in the narrative.
    # 3. Detecting Red Herrings: Identify instances where certain characters, objects, or events are highlighted to mislead the audience.
    # 4. Answer Selection: Use the select_answer API to determine if the trope ""Red Herring"" is relevant to the movie based on the collected data.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for potential red herrings
        potential_red_herring = frame.simple_query(""Is there any misleading clue or information in this frame?"", to_yesno=True)
        
        if ""yes"" in potential_red_herring.lower():
            # Collect information about the potential red herring
            caption = frame.simple_query(""What is the misleading clue or information in this frame?"")
            info[f""Red Herring in frame {i}""] = caption

    # Determine if the trope ""Red Herring"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Red Herring in frame 0"": ""metro goldenwyn mayer trade mark"",
  ""Red Herring in frame 3"": ""the man is driving a car in the snow"",
  ""Red Herring in frame 4"": ""the title of the film is screenplay by person"",
  ""Red Herring in frame 6"": ""person, person, person, person, person"",
  ""Red Herring in frame 8"": ""the man's face is covered in blood"",
  ""Red Herring in frame 14"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 15"": ""person, person, person, person, person"",
  ""Red Herring in frame 17"": ""person, person, person, person, person"",
  ""Red Herring in frame 19"": ""person's face is not in the frame"",
  ""Red Herring in frame 20"": ""person, person, person, person, person"",
  ""Red Herring in frame 21"": ""person, person, person, person, person"",
  ""Red Herring in frame 23"": ""person is laying in a hospital bed"",
  ""Red Herring in frame 24"": ""person, person, person, person, person"",
  ""Red Herring in frame 25"": ""person is laying in a hospital bed"",
  ""Red Herring in frame 26"": ""person is laying in bed with the dog"",
  ""Red Herring in frame 28"": ""person, person, person, person, person"",
  ""Red Herring in frame 30"": ""person is standing in the middle of the room"",
  ""Red Herring in frame 31"": ""person, person, person, person, person"",
  ""Red Herring in frame 32"": ""the man in the bed is a doctor"",
  ""Red Herring in frame 33"": ""person is laying on the floor in a bed"",
  ""Red Herring in frame 34"": ""person is laying on the floor of the bed"",
  ""Red Herring in frame 35"": ""person, person, person, person, person"",
  ""Red Herring in frame 36"": ""the book is on a bbq"",
  ""Red Herring in frame 37"": ""person, person, person, person, person"",
  ""Red Herring in frame 39"": ""the man in the bed is a doctor"",
  ""Red Herring in frame 40"": ""person, person, person, person, person"",
  ""Red Herring in frame 41"": ""person, person, person, person, person"",
  ""Red Herring in frame 42"": ""the man is laying in a hospital bed"",
  ""Red Herring in frame 43"": ""the man is wearing a suit and tie"",
  ""Red Herring in frame 45"": ""person's name is person, not person"",
  ""Red Herring in frame 46"": ""the light is coming from a light fixture"",
  ""Red Herring in frame 47"": ""person, person, person, person, person"",
  ""Red Herring in frame 51"": ""the woman's hand is on the floor"",
  ""Red Herring in frame 52"": ""the man is sitting in a wheelchair with a cast"",
  ""Red Herring in frame 53"": ""person, person, person, person, person"",
  ""Red Herring in frame 54"": ""the penguin is wearing a hat"",
  ""Red Herring in frame 55"": ""the man in the wheelchair is not in a wheelchair"",
  ""Red Herring in frame 57"": ""the water tower is not a water tower"",
  ""Red Herring in frame 59"": ""person is wearing a jacket and hat"",
  ""Red Herring in frame 60"": ""person's name is person''"",
  ""Red Herring in frame 61"": ""- person stock videos & royalty-free footage"",
  ""Red Herring in frame 62"": ""the woman in the blue dress is a woman"",
  ""Red Herring in frame 63"": ""person, person, person, person, person"",
  ""Red Herring in frame 65"": ""the man in the blue shirt is wearing a shirt"",
  ""Red Herring in frame 68"": ""person is sitting in a chair with a typewriter"",
  ""Red Herring in frame 70"": ""person is sitting in a chair with a book"",
  ""Red Herring in frame 71"": ""person, person, person, person, person"",
  ""Red Herring in frame 72"": ""the woman in the gray sweater is a woman"",
  ""Red Herring in frame 73"": ""person, person, person, person, person"",
  ""Red Herring in frame 74"": ""person, person, person, person, person"",
  ""Red Herring in frame 76"": ""the man in the red coat is not the actor"",
  ""Red Herring in frame 77"": ""the man is holding a glass of wine"",
  ""Red Herring in frame 80"": ""the woman is wearing a red robe"",
  ""Red Herring in frame 81"": ""person, person, person, person, person"",
  ""Red Herring in frame 82"": ""person, person, person, person, person"",
  ""Red Herring in frame 85"": ""the man in the plaid shirt is a man"",
  ""Red Herring in frame 86"": ""the man is wearing a bandage on his arm"",
  ""Red Herring in frame 87"": ""person, person, person, person, person"",
  ""Red Herring in frame 88"": ""a person's arm is being cut"",
  ""Red Herring in frame 89"": ""person, person, person, person, person"",
  ""Red Herring in frame 90"": ""person, person, person, person, person"",
  ""Red Herring in frame 91"": ""person's foot is on the wooden board"",
  ""Red Herring in frame 92"": ""the man is sleeping in a hospital bed"",
  ""Red Herring in frame 93"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 94"": ""person is standing in front of a window"",
  ""Red Herring in frame 95"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 96"": ""person is standing in front of a store"",
  ""Red Herring in frame 97"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 98"": ""person, person, person, person, person"",
  ""Red Herring in frame 99"": ""person is standing in the middle of the room"",
  ""Red Herring in frame 100"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 101"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 102"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 103"": ""the man is wearing a white hat"",
  ""Red Herring in frame 104"": ""person, person, person, person, person"",
  ""Red Herring in frame 105"": ""person, person, person, person, person"",
  ""Red Herring in frame 108"": ""person, person, person, person, person"",
  ""Red Herring in frame 109"": ""person is holding a revolver in her hand"",
  ""Red Herring in frame 111"": ""the man in the green sweater is a man"",
  ""Red Herring in frame 112"": ""- woman stock videos & royalty-free footage"",
  ""Red Herring in frame 116"": ""person, person, person, person, person"",
  ""Red Herring in frame 118"": ""the stairwell is not a staircase"",
  ""Red Herring in frame 119"": ""the man is wearing a suit and tie""
}"|The presence of various red herrings in the movie does not necessarily mean that the trope 'Red Herring' is relevant to the overall plot or narrative structure of the film. The examples provided are simply elements within the movie that may mislead or distract the audience, but do not necessarily constitute the specific storytelling device of a 'Red Herring'||
no|no|tt0105695_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|no|tt0105695_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|no|tt0105695_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 0"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 1"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 3"": ""person, person, person, person, person"",
  ""Actions towards child in frame 9"": ""person, person, person, person, person"",
  ""Actions towards child in frame 11"": ""person, person, person, person, person"",
  ""Actions towards child in frame 12"": ""person, person, person, person, person"",
  ""Actions towards child in frame 14"": ""person, person, person, person, person"",
  ""Actions towards child in frame 17"": ""the child's attention is directed towards the fence post"",
  ""Actions towards child in frame 19"": ""the child is thrown from the horse's back"",
  ""Actions towards child in frame 20"": ""a man on a horse approaches the child"",
  ""Actions towards child in frame 21"": ""person, person, person, person, person"",
  ""Actions towards child in frame 26"": ""he is being scolded"",
  ""Actions towards child in frame 31"": ""person, person, person, person, person"",
  ""Actions towards child in frame 33"": ""person, person, person, person, person"",
  ""Actions towards child in frame 40"": ""he tries to get the child away"",
  ""Actions towards child in frame 41"": ""person, person, person, person, person"",
  ""Actions towards child in frame 42"": ""person, person, person, person, person"",
  ""Actions towards child in frame 46"": ""person, person, person, person, person"",
  ""Actions towards child in frame 51"": ""a child is reflected in the water"",
  ""Actions towards child in frame 52"": ""the child is being chased by the dog"",
  ""Actions towards child in frame 57"": ""he screams at the child"",
  ""Actions towards child in frame 59"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 60"": ""hugs, kisses, hugs"",
  ""Actions towards child in frame 61"": ""he screams at the child"",
  ""Actions towards child in frame 66"": ""horseback riding, horseback riding, horse riding"",
  ""Actions towards child in frame 68"": ""person, person, person, person, person"",
  ""Actions towards child in frame 71"": ""person, person, person, person, person"",
  ""Actions towards child in frame 75"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 78"": ""he screams and runs away"",
  ""Actions towards child in frame 82"": ""person, person, person, person, person"",
  ""Actions towards child in frame 83"": ""he looks at the child and smiles"",
  ""Actions towards child in frame 85"": ""person, person, person, person, person"",
  ""Actions towards child in frame 86"": ""person, person, person, person, person"",
  ""Actions towards child in frame 93"": ""he screams at the child"",
  ""Actions towards child in frame 94"": ""screams and screams"",
  ""Actions towards child in frame 95"": ""he is escorted away from the child"",
  ""Actions towards child in frame 96"": ""hugs, kisses, and affection"",
  ""Actions towards child in frame 97"": ""person, person, person, person, person"",
  ""Actions towards child in frame 101"": ""person, person, person, person, person"",
  ""Actions towards child in frame 107"": ""person, person, person, person, person"",
  ""Actions towards child in frame 110"": ""he screams and runs away"",
  ""Actions towards child in frame 111"": ""he screams and runs away"",
  ""Actions towards child in frame 113"": ""the child is being pushed down the stairs"",
  ""Actions towards child in frame 119"": ""the child is screamed at""
}"|There are instances of characters harming children in the video.||
no|no|tt0105695_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt0105695_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The trope `Determinator` involves a character who never gives up, no matter what. If the character in the movie is shown to continuously persevere and overcome obstacles despite facing challenges, then the trope is likely present in the movie.||
no|no|tt0105695_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt0105695_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The presence of the trope `Too Dumb to Live` would require characters in the movie to consistently make incredibly foolish decisions that put their lives in danger. However, the information provided does not indicate such behavior from the characters.||
no|no|tt0105695_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The information provided does not mention any character being socially inept, shy, or clumsy. Therefore, it is unlikely that the trope 'Adorkable' is relevant to the movie.||
yes|no|tt0105695_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 0"": ""silhouette of a shack at sunset"",
  ""Fear element in frame 0"": ""the silhouette of a lone tree"",
  ""Caption of frame 1"": ""a woman is in a dark room"",
  ""Fear element in frame 1"": ""screams of a young girl"",
  ""Caption of frame 2"": ""people are walking down a street at night"",
  ""Fear element in frame 2"": ""a dark alleyway with no light"",
  ""Caption of frame 3"": ""a group of men in a bar"",
  ""Fear element in frame 3"": ""the screams of a woman"",
  ""Caption of frame 4"": ""a woman is standing in front of stairs"",
  ""Fear element in frame 4"": ""a woman's screams"",
  ""Caption of frame 5"": ""a man is kissing a woman"",
  ""Fear element in frame 5"": ""a woman's screams"",
  ""Caption of frame 6"": ""a snow storm is threatening the town"",
  ""Fear element in frame 6"": ""a spooky fog and snow"",
  ""Caption of frame 7"": ""a woman is sitting in a chair"",
  ""Fear element in frame 7"": ""the screams of a woman"",
  ""Caption of frame 8"": ""a man is laying on the ground"",
  ""Fear element in frame 8"": ""cowboys, cowboy boots, cowboy boots, cowboy boots, cowboy boots"",
  ""Caption of frame 9"": ""a man is standing in a barn"",
  ""Fear element in frame 9"": ""cowboys, cowboys, cowboys, cowboys, cowboys, cowboys, cowboys, cowboys"",
  ""Caption of frame 10"": ""a man is talking to a woman"",
  ""Fear element in frame 10"": ""a dead body in a dark room"",
  ""Caption of frame 11"": ""a man is standing in the doorway"",
  ""Fear element in frame 11"": ""a child's fear of the dark"",
  ""Caption of frame 12"": ""a man is standing in front of a door"",
  ""Fear element in frame 12"": ""person, person, person, person, person"",
  ""Caption of frame 16"": ""a woman is looking at a sign"",
  ""Fear element in frame 16"": ""a woman in a cowboy hat"",
  ""Caption of frame 19"": ""a cowboy is riding a horse"",
  ""Fear element in frame 19"": ""a horse's hooves"",
  ""Caption of frame 20"": ""a man is riding a horse in a field"",
  ""Fear element in frame 20"": ""a cowboy riding a horse in a field"",
  ""Caption of frame 21"": ""a man is building a wooden house"",
  ""Fear element in frame 21"": ""person, person, person, person, person"",
  ""Caption of frame 22"": ""a man is standing in a field"",
  ""Fear element in frame 22"": ""a cowboy in a hat"",
  ""Caption of frame 23"": ""a woman is standing in a field"",
  ""Fear element in frame 23"": ""a woman in a kimono"",
  ""Caption of frame 24"": ""a man is talking to a woman"",
  ""Fear element in frame 24"": ""person, person, person, person, person"",
  ""Caption of frame 25"": ""a man is standing in a room"",
  ""Fear element in frame 25"": ""person, person, person, person, person"",
  ""Caption of frame 28"": ""a man is staring into the dark"",
  ""Fear element in frame 28"": ""the blackness of the night and the darkness"",
  ""Caption of frame 29"": ""two cowboys are talking to each other"",
  ""Fear element in frame 29"": ""a cowboy's scream"",
  ""Caption of frame 30"": ""a train is coming down a hill"",
  ""Fear element in frame 30"": ""a train roaring past the scene"",
  ""Caption of frame 31"": ""a woman is looking out a window"",
  ""Fear element in frame 31"": ""a horse drawn buggy in the distance"",
  ""Caption of frame 32"": ""a man in a cowboy hat"",
  ""Fear element in frame 32"": ""the cowboy's cowboy hat"",
  ""Caption of frame 33"": ""a man is standing at a desk"",
  ""Fear element in frame 33"": ""ghosts, ghosts, ghosts, ghosts, ghosts, ghosts"",
  ""Caption of frame 34"": ""a man is talking to a man"",
  ""Fear element in frame 34"": ""a wolf in a hat"",
  ""Caption of frame 35"": ""a man is standing in a room"",
  ""Fear element in frame 35"": ""a man in a striped shirt"",
  ""Caption of frame 36"": ""a man is standing in a bar"",
  ""Fear element in frame 36"": ""a man in a tux"",
  ""Caption of frame 37"": ""a group of cowboys are shooting guns"",
  ""Fear element in frame 37"": ""a gunshot to the back of the head"",
  ""Caption of frame 39"": ""a group of men are standing outside a store"",
  ""Fear element in frame 39"": ""a gun in the hands of a man"",
  ""Caption of frame 42"": ""a group of people are walking down the street"",
  ""Fear element in frame 42"": ""person, person, person, person, person"",
  ""Caption of frame 44"": ""a woman is standing outside a house"",
  ""Fear element in frame 44"": ""person, person, person, person, person"",
  ""Caption of frame 45"": ""a man is laying on the ground"",
  ""Fear element in frame 45"": ""a man in a suit and tie"",
  ""Caption of frame 46"": ""a group of people are standing in front of a building"",
  ""Fear element in frame 46"": ""a cowboy in a hat"",
  ""Caption of frame 47"": ""a man is laying on the ground"",
  ""Fear element in frame 47"": ""a man falling off a cliff"",
  ""Caption of frame 50"": ""a man is smoking a cigarette"",
  ""Fear element in frame 50"": ""the shadow of a tree in the distance"",
  ""Caption of frame 52"": ""a dog is running through the grasses"",
  ""Fear element in frame 52"": ""the sound of a wolf howling"",
  ""Caption of frame 54"": ""a man is in a jail cell"",
  ""Fear element in frame 54"": ""a man in a suit and tie"",
  ""Caption of frame 55"": ""a man is reading a book at a table"",
  ""Fear element in frame 55"": ""a lamp in a darkened room"",
  ""Caption of frame 56"": ""a man is standing in a jail cell"",
  ""Fear element in frame 56"": ""a prisoner in a prison cell"",
  ""Caption of frame 57"": ""a man is in a jail cell"",
  ""Fear element in frame 57"": ""a man in a suit and tie"",
  ""Caption of frame 58"": ""a man is sleeping by a fire"",
  ""Fear element in frame 58"": ""screams of a young girl"",
  ""Caption of frame 59"": ""a man is sitting by a fire"",
  ""Fear element in frame 59"": ""fire stock videos & royalty-free footage"",
  ""Caption of frame 60"": ""a man is lying down in the dark"",
  ""Fear element in frame 60"": ""screams and screams"",
  ""Caption of frame 61"": ""two men are talking in a dark room"",
  ""Fear element in frame 61"": ""a man in a dark room with a flashlight"",
  ""Caption of frame 62"": ""a man is in a jail cell"",
  ""Fear element in frame 62"": ""a man in a tuxedo"",
  ""Caption of frame 63"": ""a man is standing in a dark room"",
  ""Fear element in frame 63"": ""the shadow of a man in the dark"",
  ""Caption of frame 64"": ""a man is standing in a dark room"",
  ""Fear element in frame 64"": ""a dark, spooky room"",
  ""Caption of frame 65"": ""a man is in a jail cell"",
  ""Fear element in frame 65"": ""a man in a prison cell holding a gun"",
  ""Caption of frame 66"": ""people riding horses in a foggy night"",
  ""Fear element in frame 66"": ""the spooky, eerie atmosphere"",
  ""Caption of frame 68"": ""a group of cowboys riding horses"",
  ""Fear element in frame 68"": ""the shadow of a horse in the dark"",
  ""Caption of frame 69"": ""a man is sitting at a table"",
  ""Fear element in frame 69"": ""a candle burning in a dark room"",
  ""Caption of frame 70"": ""two men are sitting at a table talking"",
  ""Fear element in frame 70"": ""person, person, person, person, person"",
  ""Caption of frame 71"": ""a group of people are in a bar"",
  ""Fear element in frame 71"": ""a man in a black hat"",
  ""Caption of frame 72"": ""a man is sitting at a table"",
  ""Fear element in frame 72"": ""a man in a cowboy hat"",
  ""Caption of frame 73"": ""a man is in a dark room"",
  ""Fear element in frame 73"": ""a man in a cowboy hat"",
  ""Caption of frame 74"": ""two men are talking in a dark room"",
  ""Fear element in frame 74"": ""the shadow of a man's face"",
  ""Caption of frame 75"": ""a man is standing on a staircase"",
  ""Fear element in frame 75"": ""a stairwell with a candle"",
  ""Caption of frame 76"": ""a man is standing in a dark room"",
  ""Fear element in frame 76"": ""a man in a black hat"",
  ""Caption of frame 77"": ""a man is laying on the floor"",
  ""Fear element in frame 77"": ""a man crouching on the floor"",
  ""Caption of frame 78"": ""a man riding a horse in the dark"",
  ""Fear element in frame 78"": ""a dark, dreary street"",
  ""Caption of frame 79"": ""a man is sleeping in a bed"",
  ""Fear element in frame 79"": ""sleeping in a hayloft"",
  ""Caption of frame 80"": ""a man is looking at something in the dark"",
  ""Fear element in frame 80"": ""a man in a cowboy hat"",
  ""Caption of frame 81"": ""a man is sitting by a fire"",
  ""Fear element in frame 81"": ""- fire stock videos & royalty-free footage"",
  ""Caption of frame 82"": ""a woman is talking to a man"",
  ""Fear element in frame 82"": ""a woman's screams"",
  ""Caption of frame 83"": ""a woman is talking to a man"",
  ""Fear element in frame 83"": ""a woman's screams"",
  ""Caption of frame 84"": ""a man is looking at a mountain"",
  ""Fear element in frame 84"": ""a solitary figure in the distance"",
  ""Caption of frame 85"": ""a group of people are crossing a river"",
  ""Fear element in frame 85"": ""person, person, person, person, person"",
  ""Caption of frame 86"": ""two cowboys are standing on a hill"",
  ""Fear element in frame 86"": ""the presence of a saber"",
  ""Caption of frame 87"": ""a man is aiming a gun"",
  ""Fear element in frame 87"": ""a shotgun aimed at the man"",
  ""Caption of frame 88"": ""a cowboy is holding a gun"",
  ""Fear element in frame 88"": ""a saber-tooth"",
  ""Caption of frame 90"": ""a man is laying in the grass"",
  ""Fear element in frame 90"": ""person, person, person, person, person"",
  ""Caption of frame 91"": ""a man is laying on the ground"",
  ""Fear element in frame 91"": ""the screams of a child"",
  ""Caption of frame 92"": ""a man in a cowboy hat"",
  ""Fear element in frame 92"": ""a cowboy in a hat"",
  ""Caption of frame 93"": ""a man is carrying wood to a house"",
  ""Fear element in frame 93"": ""a shivering man with a knife"",
  ""Caption of frame 94"": ""three women are sitting in a dark room"",
  ""Fear element in frame 94"": ""a woman's bare breasts"",
  ""Caption of frame 97"": ""a group of men are sitting around a table"",
  ""Fear element in frame 97"": ""the screams of a child"",
  ""Caption of frame 98"": ""a cowboy is opening a door"",
  ""Fear element in frame 98"": ""a gun in the man's hand"",
  ""Caption of frame 99"": ""a man is reaching for a gun"",
  ""Fear element in frame 99"": ""a man's hand reaching out of the door"",
  ""Caption of frame 100"": ""a cowboy is holding a gun"",
  ""Fear element in frame 100"": ""a gun in a cowboy hat"",
  ""Caption of frame 101"": ""a group of men are running through the woods"",
  ""Fear element in frame 101"": ""a gunshot is heard in the background"",
  ""Caption of frame 103"": ""a man is looking at a stormy sky"",
  ""Fear element in frame 103"": ""a dark sky with a storm cloud"",
  ""Caption of frame 104"": ""two men are standing next to a tree"",
  ""Fear element in frame 104"": ""the presence of a large tree in the distance"",
  ""Caption of frame 105"": ""a man is looking at a man"",
  ""Fear element in frame 105"": ""the screams of the old man"",
  ""Caption of frame 106"": ""two men are talking in the middle of the desert"",
  ""Fear element in frame 106"": ""person, person, person, person, person"",
  ""Caption of frame 108"": ""a car drives down a dark road"",
  ""Fear element in frame 108"": ""the dripping water on the road surface"",
  ""Caption of frame 109"": ""a cowboy is holding a gun"",
  ""Fear element in frame 109"": ""a man in a cowboy hat"",
  ""Caption of frame 110"": ""a group of men are standing in the dark"",
  ""Fear element in frame 110"": ""the shadow of a man in the dark"",
  ""Caption of frame 111"": ""a group of men are standing in the dark"",
  ""Fear element in frame 111"": ""the shadows of the stairwells"",
  ""Caption of frame 112"": ""a man is staring at the camera"",
  ""Fear element in frame 112"": ""a man in a suit and tie"",
  ""Caption of frame 113"": ""a person is walking down a staircase"",
  ""Fear element in frame 113"": ""a stairwell with a ladder"",
  ""Caption of frame 114"": ""a person is laying on the floor"",
  ""Fear element in frame 114"": ""the shadow of a person on the floor"",
  ""Caption of frame 115"": ""a man is holding a gun in his hand"",
  ""Fear element in frame 115"": ""a gun in the man's hand"",
  ""Caption of frame 116"": ""a man is laying in the dark"",
  ""Fear element in frame 116"": ""the screams of a woman"",
  ""Caption of frame 117"": ""a man is laying on the ground"",
  ""Fear element in frame 117"": ""the screams of a woman"",
  ""Caption of frame 118"": ""a man is opening a door in the dark"",
  ""Fear element in frame 118"": ""the shadow of the man in the doorway"",
  ""Caption of frame 119"": ""a woman is standing in a dark room"",
  ""Fear element in frame 119"": ""a woman in a dark room standing alone""
}"|The presence of fear elements such as screams, dark rooms, spooky atmospheres, cowboys, gunshots, eerie settings, and characters exhibiting fear through their actions and expressions suggest that the trope 'Adult Fear' may be relevant to the movie. The various scenes and characters depicted in the frames evoke a sense of mature, well-adjusted adults being concerned about realistic and relatable fears.||
no|yes|tt0105695_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest that two characters discover they have things in common. Therefore, the trope 'Not So Different' is not relevant to the movie.||
no|no|tt1637725_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|yes|tt1637725_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|yes|tt1637725_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 0"": ""the child is directed towards the child's parents"",
  ""Actions towards child in frame 1"": ""a group of people gather around the child"",
  ""Actions towards child in frame 2"": ""person, person, person, person, person"",
  ""Actions towards child in frame 3"": ""person, person, person, person, person"",
  ""Actions towards child in frame 4"": ""hugging, kissing, and hugging"",
  ""Actions towards child in frame 5"": ""he is scolded by his parents"",
  ""Actions towards child in frame 6"": ""he is being scolded"",
  ""Actions towards child in frame 10"": ""person, person, person, person, person"",
  ""Actions towards child in frame 25"": ""he screams at the child"",
  ""Actions towards child in frame 28"": ""he scolds the child"",
  ""Actions towards child in frame 32"": ""person, person, person, person, person"",
  ""Actions towards child in frame 34"": ""person, person, person, person, person"",
  ""Actions towards child in frame 35"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 38"": ""a woman in a red apron"",
  ""Actions towards child in frame 42"": ""person, person, person, person, person"",
  ""Actions towards child in frame 47"": ""hugs, kisses, and affection"",
  ""Actions towards child in frame 50"": ""kissing, hugging, and kissing"",
  ""Actions towards child in frame 57"": ""person, person, person, person, person"",
  ""Actions towards child in frame 59"": ""hugs, kisses, and hugs"",
  ""Actions towards child in frame 61"": ""person, person, person, person, person"",
  ""Actions towards child in frame 65"": ""person, person, person, person, person"",
  ""Actions towards child in frame 66"": ""he tries to get him to sit down"",
  ""Actions towards child in frame 68"": ""he screams and runs away"",
  ""Actions towards child in frame 70"": ""kissing, hugging, and kissing"",
  ""Actions towards child in frame 76"": ""the teddy bear's actions"",
  ""Actions towards child in frame 81"": ""a woman reaches out to the child"",
  ""Actions towards child in frame 85"": ""the crowd claps and cheers"",
  ""Actions towards child in frame 86"": ""the teddy bear's actions"",
  ""Actions towards child in frame 92"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 94"": ""person, person, person, person, person"",
  ""Actions towards child in frame 95"": ""the teddy bear's paws"",
  ""Actions towards child in frame 96"": ""he tries to get him out of the car"",
  ""Actions towards child in frame 104"": ""person, person, person, person, person"",
  ""Actions towards child in frame 111"": ""the child is directed towards a woman who is running"",
  ""Actions towards child in frame 113"": ""he tries to reach out to the child"",
  ""Actions towards child in frame 114"": ""person, person, person, person, person"",
  ""Actions towards child in frame 116"": ""person, person, person, person, person"",
  ""Actions towards child in frame 117"": ""person, person, person, person, person""
}"|There are instances of characters harming children in the video.||
no|yes|tt1637725_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt1637725_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The character in the movie is shown to never give up, no matter the obstacles they face. This determination aligns with the trope of 'Determinator'||
no|yes|tt1637725_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt1637725_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest that the characters in the movie are so stupid that they do not deserve to survive. Without any indication of extreme stupidity leading to life-threatening situations, the trope 'Too Dumb to Live' is not relevant to the movie.||
no|no|tt1637725_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The information provided does not mention any character displaying socially inept, shy, or clumsy behavior that would make them endearing or vulnerable. Therefore, the trope 'Adorkable' is not relevant to the movie.||
yes|no|tt1637725_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 1"": ""a girl is being rescued from the snow"",
  ""Fear element in frame 1"": ""a child's screams"",
  ""Caption of frame 3"": ""a child is standing in a room"",
  ""Fear element in frame 3"": ""a child's presence in the room"",
  ""Caption of frame 4"": ""hugging a teddy bear"",
  ""Fear element in frame 4"": ""a stuffed teddy bear"",
  ""Caption of frame 5"": ""a family is sitting in a kitchen"",
  ""Fear element in frame 5"": ""a child's screams"",
  ""Caption of frame 6"": ""a boy is sleeping in a tent"",
  ""Fear element in frame 6"": ""a boy is hiding in a tent"",
  ""Caption of frame 7"": ""a man is holding a teddy bear"",
  ""Fear element in frame 7"": ""a teddy bear with mushrooms"",
  ""Caption of frame 9"": ""a man is sitting next to a teddy bear"",
  ""Fear element in frame 9"": ""the teddy bear's presence"",
  ""Caption of frame 10"": ""a man is standing next to a car"",
  ""Fear element in frame 10"": ""a bear in a parked car"",
  ""Caption of frame 11"": ""a man is sitting at a desk"",
  ""Fear element in frame 11"": ""a man in a suit and tie"",
  ""Caption of frame 16"": ""a man is sitting on a couch with a teddy bear"",
  ""Fear element in frame 16"": ""a teddy bear in the room"",
  ""Caption of frame 17"": ""a teddy bear is sitting at a table"",
  ""Fear element in frame 17"": ""the presence of a teddy bear"",
  ""Caption of frame 20"": ""a woman is holding a bag in an office"",
  ""Fear element in frame 20"": ""a woman's screams"",
  ""Caption of frame 22"": ""a woman is sitting at a desk"",
  ""Fear element in frame 22"": ""a woman in a blazer"",
  ""Caption of frame 24"": ""people dancing on a dance floor at night"",
  ""Fear element in frame 24"": ""screams and screams"",
  ""Caption of frame 25"": ""a man is sitting at a table"",
  ""Fear element in frame 25"": ""a man in a tux"",
  ""Caption of frame 27"": ""a woman is talking to a man"",
  ""Fear element in frame 27"": ""a woman's screams"",
  ""Caption of frame 28"": ""a man is sitting in a car"",
  ""Fear element in frame 28"": ""a man in a black car driving"",
  ""Caption of frame 29"": ""a woman is walking down a hallway"",
  ""Fear element in frame 29"": ""a woman in a white dress walking down stairs"",
  ""Caption of frame 31"": ""a man is sitting on a bench with a teddy bear"",
  ""Fear element in frame 31"": ""a stuffed teddy bear"",
  ""Caption of frame 32"": ""sitting on a bench with a teddy bear"",
  ""Fear element in frame 32"": ""a stuffed teddy bear"",
  ""Caption of frame 35"": ""a man is talking to a man"",
  ""Fear element in frame 35"": ""the screams of a child"",
  ""Caption of frame 36"": ""a man is standing in a room"",
  ""Fear element in frame 36"": ""a man in a t-shirt"",
  ""Caption of frame 37"": ""a woman is lying on a bed"",
  ""Fear element in frame 37"": ""a woman in a white t-shirt"",
  ""Caption of frame 38"": ""a woman is in a grocery store"",
  ""Fear element in frame 38"": ""a woman in a red apron"",
  ""Caption of frame 39"": ""a man is writing at a desk"",
  ""Fear element in frame 39"": ""a man in a suit and tie"",
  ""Caption of frame 41"": ""a man is sitting at a desk"",
  ""Fear element in frame 41"": ""person, person, person, person, person"",
  ""Caption of frame 44"": ""a man is standing in a store"",
  ""Fear element in frame 44"": ""a man in a suit and tie"",
  ""Caption of frame 45"": ""a person is walking down an alley"",
  ""Fear element in frame 45"": ""the shadow of a teddy bear"",
  ""Caption of frame 46"": ""a teddy bear is walking down the street"",
  ""Fear element in frame 46"": ""the shadow of the teddy bear"",
  ""Caption of frame 48"": ""a woman is sitting at a table"",
  ""Fear element in frame 48"": ""person, person, person, person, person"",
  ""Caption of frame 54"": ""a man is pointing a gun"",
  ""Fear element in frame 54"": ""a man pointing a gun at someone"",
  ""Caption of frame 57"": ""a teddy bear is standing"",
  ""Fear element in frame 57"": ""the presence of a teddy bear"",
  ""Caption of frame 58"": ""a teddy bear is at a party"",
  ""Fear element in frame 58"": ""the teddy bear's presence"",
  ""Caption of frame 60"": ""a teddy bear is holding a microphone"",
  ""Fear element in frame 60"": ""a teddy bear's voice"",
  ""Caption of frame 61"": ""a group of people are watching a teddy bear"",
  ""Fear element in frame 61"": ""the teddy bear's presence"",
  ""Caption of frame 62"": ""a teddy bear is speaking"",
  ""Fear element in frame 62"": ""the teddy bear's voice"",
  ""Caption of frame 64"": ""a teddy bear is sitting on a table"",
  ""Fear element in frame 64"": ""the teddy bear's presence"",
  ""Caption of frame 66"": ""a group of people are at a party"",
  ""Fear element in frame 66"": ""a chair falling on top of a person"",
  ""Caption of frame 68"": ""a group of people are in a bar"",
  ""Fear element in frame 68"": ""the presence of a woman in the room"",
  ""Caption of frame 69"": ""a woman is walking down a hallway"",
  ""Fear element in frame 69"": ""a woman in a red dress in a hallway"",
  ""Caption of frame 71"": ""the teddy bear is standing on the street"",
  ""Fear element in frame 71"": ""a teddy bear in the dark"",
  ""Caption of frame 72"": ""a woman is sitting at a desk"",
  ""Fear element in frame 72"": ""a woman in a black turtleneck"",
  ""Caption of frame 74"": ""a teddy bear is in a room"",
  ""Fear element in frame 74"": ""a teddy bear in the dark"",
  ""Caption of frame 75"": ""a man is standing in a room"",
  ""Fear element in frame 75"": ""a man in a black shirt standing in a room"",
  ""Caption of frame 76"": ""a teddy bear is in bed"",
  ""Fear element in frame 76"": ""the teddy bear in the bed"",
  ""Caption of frame 77"": ""a man is holding a teddy bear"",
  ""Fear element in frame 77"": ""the teddy bear's presence"",
  ""Caption of frame 78"": ""a man is playing with a teddy bear"",
  ""Fear element in frame 78"": ""the teddy bear in the room"",
  ""Caption of frame 79"": ""a man is laying on the floor"",
  ""Fear element in frame 79"": ""the presence of a teddy bear"",
  ""Caption of frame 81"": ""a man and woman are in a room"",
  ""Fear element in frame 81"": ""a woman in a green dress and a bottle of wine"",
  ""Caption of frame 82"": ""a teddy bear is in a room"",
  ""Fear element in frame 82"": ""a stuffed teddy bear"",
  ""Caption of frame 83"": ""a woman is staring at the camera"",
  ""Fear element in frame 83"": ""a woman in a black leather jacket"",
  ""Caption of frame 84"": ""a man is staring at the crowd"",
  ""Fear element in frame 84"": ""fear of the dark, fear of the dark, fear of the dark"",
  ""Caption of frame 86"": ""a woman is looking at a teddy bear"",
  ""Fear element in frame 86"": ""the presence of a teddy bear"",
  ""Caption of frame 88"": ""a teddy bear is standing in a doorway"",
  ""Fear element in frame 88"": ""the teddy bear's presence"",
  ""Caption of frame 89"": ""a man is talking to a woman"",
  ""Fear element in frame 89"": ""person, person, person, person, person"",
  ""Caption of frame 90"": ""a person is walking down a hallway"",
  ""Fear element in frame 90"": ""the light shining through a dark doorway"",
  ""Caption of frame 91"": ""a child is sleeping in a bed"",
  ""Fear element in frame 91"": ""a stuffed teddy bear"",
  ""Caption of frame 92"": ""a man is looking at a teddy bear"",
  ""Fear element in frame 92"": ""a stuffed teddy bear"",
  ""Caption of frame 93"": ""a teddy bear is standing"",
  ""Fear element in frame 93"": ""the teddy bear's presence"",
  ""Caption of frame 94"": ""a person is opening a wooden door"",
  ""Fear element in frame 94"": ""a wooden door with a broken handle"",
  ""Caption of frame 95"": ""a teddy bear is in the closet"",
  ""Fear element in frame 95"": ""a teddy bear,"",
  ""Caption of frame 96"": ""a man gets out of a car"",
  ""Fear element in frame 96"": ""a car parked in a parking lot"",
  ""Caption of frame 97"": ""a man is talking on his cell phone"",
  ""Fear element in frame 97"": ""a cell phone in the backseat"",
  ""Caption of frame 98"": ""a man is talking on his cell phone"",
  ""Fear element in frame 98"": ""a cell phone in the backseat"",
  ""Caption of frame 99"": ""a man is driving his car at night"",
  ""Fear element in frame 99"": ""a car driving down the street at night"",
  ""Caption of frame 100"": ""a car is driving down the street at night"",
  ""Fear element in frame 100"": ""a car driving down the street at night"",
  ""Caption of frame 101"": ""a woman is driving a car on the highway"",
  ""Fear element in frame 101"": ""a woman driving a car in the rain"",
  ""Caption of frame 102"": ""a car is driving down a street"",
  ""Fear element in frame 102"": ""a car driving through a dark tunnel"",
  ""Caption of frame 103"": ""a car drives down the street at night"",
  ""Fear element in frame 103"": ""a car driving down the street at night"",
  ""Caption of frame 104"": ""a teddy bear is crossing the street"",
  ""Fear element in frame 104"": ""the presence of a teddy bear"",
  ""Caption of frame 105"": ""a man is walking down a street"",
  ""Fear element in frame 105"": ""a man walking down the street at night"",
  ""Caption of frame 106"": ""a man and a woman are standing together"",
  ""Fear element in frame 106"": ""a man in a striped shirt"",
  ""Caption of frame 107"": ""a man is walking down a hallway"",
  ""Fear element in frame 107"": ""a man with a knife in his hand"",
  ""Caption of frame 109"": ""a man is running down a hallway"",
  ""Fear element in frame 109"": ""a man in a hoodie"",
  ""Caption of frame 110"": ""a teddy bear is sitting on a baseball field"",
  ""Fear element in frame 110"": ""a teddy bear in a stadium"",
  ""Caption of frame 111"": ""a woman is running in a stadium"",
  ""Fear element in frame 111"": ""a girl running in a dark stadium"",
  ""Caption of frame 112"": ""a man is leaning against a wall"",
  ""Fear element in frame 112"": ""a man leaning on a wall"",
  ""Caption of frame 113"": ""a person is opening a drawer in the dark"",
  ""Fear element in frame 113"": ""the shadow of a person's hand"",
  ""Caption of frame 114"": ""a woman is holding a stuffed animal"",
  ""Fear element in frame 114"": ""a child's screams"",
  ""Caption of frame 115"": ""a person is holding a stuffed animal"",
  ""Fear element in frame 115"": ""a teddy bear in the dark"",
  ""Caption of frame 116"": ""a man is petting a teddy bear"",
  ""Fear element in frame 116"": ""the presence of a teddy bear"",
  ""Caption of frame 117"": ""a man is sitting next to a teddy bear"",
  ""Fear element in frame 117"": ""the teddy bear's presence""
}"|The presence of child's screams, teddy bears, and the overall eerie atmosphere in the scenes suggest a theme of childhood fears and anxieties, which aligns with the trope of 'Adult Fear' - things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.||
no|no|tt1637725_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The trope `Not So Different` involves characters realizing they have more in common than they initially thought. The information provided does not suggest any similarities being discovered between characters in the movie.||
no|no|tt1637725_32|Eye Scream|"Is the trope ""Eye Scream"", which means ""When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the 
invasion of the eye sockets by a foreign body."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_32(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Eye Scream
    # Definition: When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the invasion of the eye sockets by a foreign body.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential instances of eye-related horror or trauma.
    # 2. Contextual Analysis: Look for visual cues or actions that suggest eye-related scenes.
    # 3. Detecting Eye Scream: Identify scenes where characters' eyes are in danger or being harmed.
    # 4. Answer Selection: Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for eye-related horror or trauma
        eye_horror_query = frame.simple_query(""Is there any eye-related horror or trauma in this scene?"", to_yesno=True)
        
        if ""yes"" in eye_horror_query.lower():
            # If eye-related horror is detected, gather more information
            eye_scene_description = frame.simple_query(""Describe the eye-related scene in detail."")
            info[f""Eye-related scene in frame {i}""] = eye_scene_description

    # Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Eye-related scene in frame 0"": ""the eye-related scene is a montage of eye shots"",
  ""Eye-related scene in frame 1"": ""the scene in which person's eye is injured"",
  ""Eye-related scene in frame 2"": ""the scene in which the teddy bear looks at the camera"",
  ""Eye-related scene in frame 3"": ""the eye-related scene is a scene in which a young boy is standing in a room"",
  ""Eye-related scene in frame 5"": ""the eye-related scene takes place in the kitchen"",
  ""Eye-related scene in frame 6"": ""a boy is hiding in a tent"",
  ""Eye-related scene in frame 7"": ""the eye-related scene is the scene in which celeb is arrested for stealing mushrooms"",
  ""Eye-related scene in frame 8"": ""the eye-related scene is a scene in which a man and woman kiss"",
  ""Eye-related scene in frame 9"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 10"": ""the scene in which the man is looking at his own eye"",
  ""Eye-related scene in frame 11"": ""the eye-related scene takes place in the office of person"",
  ""Eye-related scene in frame 12"": ""the eye-related scene in the movie is a scene in which a man is sitting at a desk"",
  ""Eye-related scene in frame 13"": ""the eye-related scene takes place in a car dealership"",
  ""Eye-related scene in frame 14"": ""the scene in which a man's eye is injured"",
  ""Eye-related scene in frame 16"": ""the scene in which the teddy bear is sitting on the couch"",
  ""Eye-related scene in frame 17"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 18"": ""the eye-related scene is a scene in which a man and a woman are in bed"",
  ""Eye-related scene in frame 19"": ""the eye-related scene is a scene in which a man and woman kiss"",
  ""Eye-related scene in frame 20"": ""person's eye is swollen"",
  ""Eye-related scene in frame 22"": ""the eye-related scene is a scene in the movie the dark knight''"",
  ""Eye-related scene in frame 23"": ""the eye-related scene is a scene in which a man is pouring wine into a glass"",
  ""Eye-related scene in frame 24"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 25"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 26"": ""the eye scene is a scene in which a man and woman dance in a club"",
  ""Eye-related scene in frame 28"": ""the eye-related scene takes place in a car"",
  ""Eye-related scene in frame 29"": ""a woman is walking down a dark hallway"",
  ""Eye-related scene in frame 30"": ""the eye scene is a scene in the movie ted"",
  ""Eye-related scene in frame 31"": ""the eye-related scene is a scene in which a man sits on a bench with a teddy bear"",
  ""Eye-related scene in frame 32"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 34"": ""the scene in which the teddy bear sits by the pond"",
  ""Eye-related scene in frame 35"": ""the eye-related scene takes place in the park"",
  ""Eye-related scene in frame 37"": ""the eye-related scene takes place in a hospital"",
  ""Eye-related scene in frame 38"": ""the scene in which the woman's eye is swollen"",
  ""Eye-related scene in frame 39"": ""the eye-related scene is a scene in which a man sits at a desk"",
  ""Eye-related scene in frame 40"": ""the eye-related scene is a scene in the movie the office''"",
  ""Eye-related scene in frame 41"": ""this is a scene in which a man is sitting at a desk"",
  ""Eye-related scene in frame 42"": ""the eye-related scene in the movie ted"",
  ""Eye-related scene in frame 43"": ""in the scene where he is looking at his own eye"",
  ""Eye-related scene in frame 44"": ""the scene in which a man's eye is smashed"",
  ""Eye-related scene in frame 45"": ""the scene in which the teddy bear is looking at the camera"",
  ""Eye-related scene in frame 46"": ""the teddy bear in the street"",
  ""Eye-related scene in frame 48"": ""the eye-related scene takes place in a restaurant"",
  ""Eye-related scene in frame 49"": ""the scene in which the teddy bear looks at the woman"",
  ""Eye-related scene in frame 50"": ""the eye-related scene in the vampire diaries"",
  ""Eye-related scene in frame 52"": ""a man in a white tuxedo walks up a staircase"",
  ""Eye-related scene in frame 53"": ""the eye-related scene takes place in a hotel room"",
  ""Eye-related scene in frame 54"": ""the eye-related scene is a scene in which a man and woman are in a hallway"",
  ""Eye-related scene in frame 56"": ""the eye-related scene in the movie is a scene in which a man wearing a red and black tuxedo is surrounded by a group of people"",
  ""Eye-related scene in frame 57"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 58"": ""the scene where the teddy bear looks at the camera"",
  ""Eye-related scene in frame 59"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 60"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 61"": ""the scene in which a teddy bear is thrown into a crowd of people"",
  ""Eye-related scene in frame 62"": ""the scene in which the teddy bear looks at the camera"",
  ""Eye-related scene in frame 63"": ""the eye-related scene takes place in a bathroom"",
  ""Eye-related scene in frame 64"": ""the scene where the teddy bear looks at the camera"",
  ""Eye-related scene in frame 65"": ""the eye scene is a scene in which a group of people are sitting in a room"",
  ""Eye-related scene in frame 66"": ""the eye scene is a scene in which a man is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 68"": ""the eye-related scene takes place in a bar"",
  ""Eye-related scene in frame 69"": ""the eye-related scene in the movie is a scene in which a woman in a red dress walks down a hallway"",
  ""Eye-related scene in frame 70"": ""a man and a woman standing on a street at night"",
  ""Eye-related scene in frame 71"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 72"": ""the eye-related scene is a scene in which a woman is sitting at a desk"",
  ""Eye-related scene in frame 73"": ""the scene in which person is reading a book"",
  ""Eye-related scene in frame 74"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 75"": ""the eye-related scene is a scene in which a man is in a room"",
  ""Eye-related scene in frame 76"": ""the eye-related scene in 'ted'"",
  ""Eye-related scene in frame 77"": ""the scene in which the teddy bear is pushed into the bed"",
  ""Eye-related scene in frame 79"": ""the scene in which person is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 81"": ""a woman in a green dress is standing in a room"",
  ""Eye-related scene in frame 82"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 83"": ""the eye-related scene takes place in a bar"",
  ""Eye-related scene in frame 84"": ""the eye-related scene is a scene in which a man stares at a crowd of people"",
  ""Eye-related scene in frame 86"": ""the scene where the teddy bear is looking at the woman's eye"",
  ""Eye-related scene in frame 87"": ""the eye-related scene in 'ted'"",
  ""Eye-related scene in frame 88"": ""the scene in which the teddy bear's eye is removed"",
  ""Eye-related scene in frame 89"": ""the eye-related scene is a scene in which a man is talking to a woman"",
  ""Eye-related scene in frame 90"": ""a woman is walking down a dark hallway"",
  ""Eye-related scene in frame 91"": ""the eye-related scene takes place in a bedroom"",
  ""Eye-related scene in frame 92"": ""the eye-related scene is a scene in which a man is looking at a teddy bear"",
  ""Eye-related scene in frame 93"": ""the teddy bear's eyes"",
  ""Eye-related scene in frame 94"": ""the eye scene is a scene in which a person's eye is drained"",
  ""Eye-related scene in frame 95"": ""the teddy bear's eyes"",
  ""Eye-related scene in frame 96"": ""the eye scene is a scene in which a man is driving a car"",
  ""Eye-related scene in frame 97"": ""the scene in the car where person is talking on the phone"",
  ""Eye-related scene in frame 98"": ""the scene in the car where person is talking on the phone"",
  ""Eye-related scene in frame 99"": ""a man driving a car at night"",
  ""Eye-related scene in frame 101"": ""a woman is driving a car with her eyes closed"",
  ""Eye-related scene in frame 102"": ""the eye-related scene is a scene in which a man is driving a car"",
  ""Eye-related scene in frame 103"": ""a car is driving down the street at night"",
  ""Eye-related scene in frame 104"": ""the scene in which the teddy bear stares at the camera"",
  ""Eye-related scene in frame 105"": ""the eye scene is a scene in which a man is walking down the street"",
  ""Eye-related scene in frame 106"": ""the eye-related scene is a scene in which a man and a woman look at each other"",
  ""Eye-related scene in frame 107"": ""the scene in which a man is shot in the eye"",
  ""Eye-related scene in frame 108"": ""a baseball game is being played at night"",
  ""Eye-related scene in frame 109"": ""the eye scene is a blurry shot of person's eyes"",
  ""Eye-related scene in frame 110"": ""a stuffed teddy bear in a baseball stadium"",
  ""Eye-related scene in frame 111"": ""the eye-related scene takes place in a stadium"",
  ""Eye-related scene in frame 112"": ""the eye-related scene takes place in the middle of the movie"",
  ""Eye-related scene in frame 113"": ""the eye scene is a scene in which a person's eye is drained"",
  ""Eye-related scene in frame 114"": ""the scene in which a woman's eye is pierced"",
  ""Eye-related scene in frame 115"": ""the scene in which the teddy bear's eyes are removed"",
  ""Eye-related scene in frame 116"": ""the eye-related scene is a scene in the movie ted"",
  ""Eye-related scene in frame 117"": ""the scene in which the teddy bear looks at the camera""
}"|Although there are many eye-related scenes in the movie, none of them involve the specific trope of 'Eye Scream' where a foreign object invades the eye socket to evoke a primal fear. The scenes described do not match the definition of the trope||
no|no|tt1637725_46|Screw This, I'm Outta Here!|"Is the trope ""Screw This, I'm Outta Here!"", which means ""Screw you guys, I'm going home."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_46(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Screw This, I'm Outta Here!
    # Definition: A character abruptly leaves a situation, expressing frustration or disinterest.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for signs of a character leaving abruptly.
    # 2. Behavior Analysis: Look for visual cues like walking away or expressions of frustration.
    # 3. Contextual Analysis: Consider the context to determine if the departure aligns with the trope.
    # 4. Answer Selection: Use select_answer to choose the most likely answer based on the analysis.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for signs of a character leaving abruptly
        departure_query = frame.simple_query(""Is there a character leaving abruptly?"", to_yesno=True)
        
        if ""yes"" in departure_query.lower():
            # Collect information about the departure event
            departure_description = frame.simple_query(""Describe the departure event in detail."")
            info[f""Departure in {i} th frame""] = departure_description

    # Answer the query based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Departure in 0 th frame"": ""the departure event is a celebration of the end of the series"",
  ""Departure in 1 th frame"": ""a young man leaves his home in the snow"",
  ""Departure in 2 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 3 th frame"": ""a young boy leaves a room with his mother"",
  ""Departure in 4 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 5 th frame"": ""a man leaves his wife and son in a car"",
  ""Departure in 6 th frame"": ""a young boy leaves his home in a tent"",
  ""Departure in 7 th frame"": ""the teddy bear's departure"",
  ""Departure in 8 th frame"": ""a man and a woman leave a house"",
  ""Departure in 9 th frame"": ""the teddy bear's departure"",
  ""Departure in 10 th frame"": ""the car is parked in the parking lot"",
  ""Departure in 11 th frame"": ""person's departure from the office in person"",
  ""Departure in 12 th frame"": ""he leaves the office in a hurry"",
  ""Departure in 13 th frame"": ""person's departure from a car dealership"",
  ""Departure in 14 th frame"": ""person's character leaves the office in a car"",
  ""Departure in 15 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 16 th frame"": ""a teddy bear leaves the scene"",
  ""Departure in 17 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 18 th frame"": ""person and person's departure from the bedroom"",
  ""Departure in 19 th frame"": ""the couple kisses each other and leaves"",
  ""Departure in 20 th frame"": ""person leaves the office with a handbag"",
  ""Departure in 21 th frame"": ""the departure event is a departure from the office"",
  ""Departure in 22 th frame"": ""the departure event is a scene in the movie"",
  ""Departure in 23 th frame"": ""he leaves a bottle of champagne on the table"",
  ""Departure in 24 th frame"": ""describe the departure event in detail - departure stock videos & royalty-free footage"",
  ""Departure in 25 th frame"": ""a man leaves a restaurant with his wife"",
  ""Departure in 26 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 27 th frame"": ""a woman leaves a restaurant with her boyfriend"",
  ""Departure in 28 th frame"": ""he leaves the car in a hurry"",
  ""Departure in 29 th frame"": ""a woman leaves a house in a white dress"",
  ""Departure in 30 th frame"": ""the teddy bear's departure"",
  ""Departure in 31 th frame"": ""the teddy bear's departure"",
  ""Departure in 32 th frame"": ""the teddy bear's departure"",
  ""Departure in 33 th frame"": ""the teddy bear leaves the office"",
  ""Departure in 34 th frame"": ""the teddy bear's departure"",
  ""Departure in 35 th frame"": ""person's character, person, leaves the park"",
  ""Departure in 36 th frame"": ""the departure event is a departure event in the film"",
  ""Departure in 37 th frame"": ""a man leaves a woman in a car"",
  ""Departure in 38 th frame"": ""the departure of a character from a scene"",
  ""Departure in 39 th frame"": ""person's departure from the company he worked for"",
  ""Departure in 40 th frame"": ""person's departure from the office in the movie"",
  ""Departure in 41 th frame"": ""describe the departure event in detail person, person"",
  ""Departure in 42 th frame"": ""the teddy bear's departure"",
  ""Departure in 43 th frame"": ""the teddy bear's departure"",
  ""Departure in 44 th frame"": ""a man walks into a grocery store"",
  ""Departure in 45 th frame"": ""the teddy bear's departure"",
  ""Departure in 46 th frame"": ""the teddy bear leaves the scene"",
  ""Departure in 47 th frame"": ""the teddy bear's departure"",
  ""Departure in 48 th frame"": ""person, person, person, person, person"",
  ""Departure in 49 th frame"": ""the teddy bear leaves the restaurant"",
  ""Departure in 50 th frame"": ""a man and a woman leave a restaurant"",
  ""Departure in 51 th frame"": ""a group of people leaving a house"",
  ""Departure in 52 th frame"": ""a party is held at a hotel"",
  ""Departure in 53 th frame"": ""a man leaves a room with a woman"",
  ""Departure in 54 th frame"": ""a man and a woman leave a building"",
  ""Departure in 56 th frame"": ""he leaves the party in a helicopter"",
  ""Departure in 57 th frame"": ""the teddy bear leaves the party"",
  ""Departure in 58 th frame"": ""the teddy bear leaves the party"",
  ""Departure in 59 th frame"": ""- describe the departure event stock videos & royalty-free footage"",
  ""Departure in 60 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 61 th frame"": ""a teddy bear is brought to the party"",
  ""Departure in 62 th frame"": ""the teddy bear's departure"",
  ""Departure in 63 th frame"": ""a man is seen leaving a room"",
  ""Departure in 64 th frame"": ""the teddy bear's departure"",
  ""Departure in 65 th frame"": ""a group of people leave a party"",
  ""Departure in 66 th frame"": ""a group of people are leaving a party"",
  ""Departure in 67 th frame"": ""a teddy bear is placed on a woman's head"",
  ""Departure in 68 th frame"": ""a group of people leave a party"",
  ""Departure in 69 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 70 th frame"": ""a man and a woman standing on a street at night"",
  ""Departure in 71 th frame"": ""the teddy bear's departure"",
  ""Departure in 72 th frame"": ""person's character leaves the office in a helicopter"",
  ""Departure in 73 th frame"": ""person's departure from a hotel room"",
  ""Departure in 74 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 75 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 76 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 77 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 78 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 79 th frame"": ""a man is laying on the floor with a suitcase"",
  ""Departure in 80 th frame"": ""describe the departure event in detail, if applicable"",
  ""Departure in 81 th frame"": ""a man and woman leave a hotel room"",
  ""Departure in 82 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 83 th frame"": ""the departure event'' is a departure event"",
  ""Departure in 84 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 85 th frame"": ""a group of people leave a concert"",
  ""Departure in 86 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 87 th frame"": ""the teddy bear's departure"",
  ""Departure in 88 th frame"": ""the teddy bear leaves the house"",
  ""Departure in 89 th frame"": ""a man leaves a restaurant with his girlfriend"",
  ""Departure in 90 th frame"": ""i'm going to the airport"",
  ""Departure in 91 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 92 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 93 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 94 th frame"": ""the door is opened and a person leaves"",
  ""Departure in 95 th frame"": ""a teddy bear leaves a room"",
  ""Departure in 96 th frame"": ""the car is parked in a parking lot"",
  ""Departure in 97 th frame"": ""a man leaves a car in the middle of the road"",
  ""Departure in 98 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 99 th frame"": ""a man leaves his car in the dark"",
  ""Departure in 100 th frame"": ""a car leaves a city at night"",
  ""Departure in 101 th frame"": ""a woman is driving a car on the highway"",
  ""Departure in 102 th frame"": ""a car drives away from a building"",
  ""Departure in 103 th frame"": ""a car leaves a city at night"",
  ""Departure in 104 th frame"": ""the teddy bear's departure"",
  ""Departure in 105 th frame"": ""a man leaves a bar and walks down the street"",
  ""Departure in 106 th frame"": ""the departure event is the end of the movie"",
  ""Departure in 107 th frame"": ""a man is seen leaving a building"",
  ""Departure in 108 th frame"": ""a plane takes off from a stadium"",
  ""Departure in 109 th frame"": ""a man leaves a building with a gun"",
  ""Departure in 110 th frame"": ""the teddy bear leaves the stadium"",
  ""Departure in 111 th frame"": ""a young woman leaves a soccer stadium"",
  ""Departure in 112 th frame"": ""the departure event is a scene in the movie"",
  ""Departure in 113 th frame"": ""a person leaves a room with a suitcase"",
  ""Departure in 114 th frame"": ""a young woman leaves a hotel room"",
  ""Departure in 115 th frame"": ""the teddy bear is thrown into a river"",
  ""Departure in 116 th frame"": ""the teddy bear leaves the room"",
  ""Departure in 117 th frame"": ""a teddy bear leaves the living room"",
  ""Departure in 118 th frame"": ""the twilight saga"",
  ""Departure in 119 th frame"": ""the departure event is a farewell party""
}"|The trope `Screw This, I'm Outta Here!` specifically involves a character expressing a sudden decision to abandon a situation or task, often accompanied by a sense of frustration or resignation. The scenes described in the frames do not necessarily depict characters leaving out of frustration or resignation, but rather depict various types of departures in different settings and contexts.||
no|no|tt1637725_47|Kick the Dog|"Is the trope ""Kick the Dog"", which means ""When a character does something evil for no apparent gain, because the author wants to demonstrate that he's not a nice guy and shift 
audience sympathy away from him."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_47(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Kick the Dog
    # Definition: An act of cruelty by a character, typically towards a more vulnerable or defenseless entity, to establish the character's malevolence
    # Thought: The trope detection involves three steps:
    # 1. Context Information Collection: To observe attacker's malevolence and victim's defenseless entity, we need to concern action and event in adjacent frames and use them as context to understand the story
    # 2. Event Observation: ""Kick the Dog"" would present in attack event within a frame. Use the context from first step as condition and query more detail in advance    
    # 3. Answer Selection: With information collected from second step, we leave the reasoning and question answering to select_answer api
    video_segment = VideoSegment(video, annotation)
    # Create a info dictionary, which would later pass to select_answer api
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # understanding current frame with context information
        caption_query = ""What is happening in the scene? please answer with at least 10 words""
        caption = frame.simple_query(caption_query)
        # check if there is any potential attack event
        has_attack_event = frame.llm_query(f""Is there any potential attack event in description '{caption}'?"", to_yesno=True)
        if 'yes' in has_attack_event.lower():
            # query the event in detail
            attack_event_query = ""What attack event is in the scene and what action and emotion does attacker and victim have, please answer with at least 40 words""     
            attack_event_description = frame.simple_query(attack_event_query)
            info[f""Attack event in {i} th frame""] = attack_event_description
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not indicate any character doing something evil for no apparent gain in order to demonstrate they are not a nice person. Therefore, the trope 'Kick the Dog' is not relevant to the movie.||
yes|yes|tt1637725_62|Blatant Lies|"Is the trope ""Blatant Lies"", which means ""A glaringly obvious lie."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_62(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Blatant Lies
    # Definition: A glaringly obvious lie.
    # Thought Process:
    # 1. Frame Selection: Analyze frames for instances where characters make statements that are clearly false.
    # 2. Contextual Analysis: Look for cues such as character expressions or contradictory actions that indicate a lie.
    # 3. Answer Selection: Determine if the trope is relevant based on the presence of obvious lies in the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        # Check for instances of blatant lies in dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any blatant lies in the dialogue?"", to_yesno=True)
        # Check for visual cues of lies
        visual_cues = frame.simple_query(""Are there any visual cues indicating lies?"", to_yesno=True)
        if ""yes"" in dialogue_analysis or ""yes"" in visual_cues:
            info[f""Blatant lies detected in frame {i}""] = ""Yes""
    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Blatant lies detected in frame 0"": ""Yes"",
  ""Blatant lies detected in frame 1"": ""Yes"",
  ""Blatant lies detected in frame 2"": ""Yes"",
  ""Blatant lies detected in frame 3"": ""Yes"",
  ""Blatant lies detected in frame 5"": ""Yes"",
  ""Blatant lies detected in frame 6"": ""Yes"",
  ""Blatant lies detected in frame 7"": ""Yes"",
  ""Blatant lies detected in frame 8"": ""Yes"",
  ""Blatant lies detected in frame 9"": ""Yes"",
  ""Blatant lies detected in frame 10"": ""Yes"",
  ""Blatant lies detected in frame 11"": ""Yes"",
  ""Blatant lies detected in frame 12"": ""Yes"",
  ""Blatant lies detected in frame 13"": ""Yes"",
  ""Blatant lies detected in frame 14"": ""Yes"",
  ""Blatant lies detected in frame 15"": ""Yes"",
  ""Blatant lies detected in frame 16"": ""Yes"",
  ""Blatant lies detected in frame 17"": ""Yes"",
  ""Blatant lies detected in frame 18"": ""Yes"",
  ""Blatant lies detected in frame 19"": ""Yes"",
  ""Blatant lies detected in frame 20"": ""Yes"",
  ""Blatant lies detected in frame 22"": ""Yes"",
  ""Blatant lies detected in frame 23"": ""Yes"",
  ""Blatant lies detected in frame 24"": ""Yes"",
  ""Blatant lies detected in frame 25"": ""Yes"",
  ""Blatant lies detected in frame 26"": ""Yes"",
  ""Blatant lies detected in frame 27"": ""Yes"",
  ""Blatant lies detected in frame 28"": ""Yes"",
  ""Blatant lies detected in frame 29"": ""Yes"",
  ""Blatant lies detected in frame 30"": ""Yes"",
  ""Blatant lies detected in frame 31"": ""Yes"",
  ""Blatant lies detected in frame 32"": ""Yes"",
  ""Blatant lies detected in frame 34"": ""Yes"",
  ""Blatant lies detected in frame 35"": ""Yes"",
  ""Blatant lies detected in frame 37"": ""Yes"",
  ""Blatant lies detected in frame 38"": ""Yes"",
  ""Blatant lies detected in frame 39"": ""Yes"",
  ""Blatant lies detected in frame 40"": ""Yes"",
  ""Blatant lies detected in frame 41"": ""Yes"",
  ""Blatant lies detected in frame 42"": ""Yes"",
  ""Blatant lies detected in frame 43"": ""Yes"",
  ""Blatant lies detected in frame 44"": ""Yes"",
  ""Blatant lies detected in frame 45"": ""Yes"",
  ""Blatant lies detected in frame 46"": ""Yes"",
  ""Blatant lies detected in frame 47"": ""Yes"",
  ""Blatant lies detected in frame 48"": ""Yes"",
  ""Blatant lies detected in frame 49"": ""Yes"",
  ""Blatant lies detected in frame 53"": ""Yes"",
  ""Blatant lies detected in frame 54"": ""Yes"",
  ""Blatant lies detected in frame 55"": ""Yes"",
  ""Blatant lies detected in frame 56"": ""Yes"",
  ""Blatant lies detected in frame 57"": ""Yes"",
  ""Blatant lies detected in frame 58"": ""Yes"",
  ""Blatant lies detected in frame 59"": ""Yes"",
  ""Blatant lies detected in frame 60"": ""Yes"",
  ""Blatant lies detected in frame 61"": ""Yes"",
  ""Blatant lies detected in frame 62"": ""Yes"",
  ""Blatant lies detected in frame 63"": ""Yes"",
  ""Blatant lies detected in frame 64"": ""Yes"",
  ""Blatant lies detected in frame 65"": ""Yes"",
  ""Blatant lies detected in frame 66"": ""Yes"",
  ""Blatant lies detected in frame 67"": ""Yes"",
  ""Blatant lies detected in frame 68"": ""Yes"",
  ""Blatant lies detected in frame 69"": ""Yes"",
  ""Blatant lies detected in frame 70"": ""Yes"",
  ""Blatant lies detected in frame 71"": ""Yes"",
  ""Blatant lies detected in frame 72"": ""Yes"",
  ""Blatant lies detected in frame 73"": ""Yes"",
  ""Blatant lies detected in frame 74"": ""Yes"",
  ""Blatant lies detected in frame 75"": ""Yes"",
  ""Blatant lies detected in frame 76"": ""Yes"",
  ""Blatant lies detected in frame 77"": ""Yes"",
  ""Blatant lies detected in frame 78"": ""Yes"",
  ""Blatant lies detected in frame 79"": ""Yes"",
  ""Blatant lies detected in frame 81"": ""Yes"",
  ""Blatant lies detected in frame 82"": ""Yes"",
  ""Blatant lies detected in frame 83"": ""Yes"",
  ""Blatant lies detected in frame 84"": ""Yes"",
  ""Blatant lies detected in frame 85"": ""Yes"",
  ""Blatant lies detected in frame 86"": ""Yes"",
  ""Blatant lies detected in frame 88"": ""Yes"",
  ""Blatant lies detected in frame 89"": ""Yes"",
  ""Blatant lies detected in frame 90"": ""Yes"",
  ""Blatant lies detected in frame 91"": ""Yes"",
  ""Blatant lies detected in frame 92"": ""Yes"",
  ""Blatant lies detected in frame 93"": ""Yes"",
  ""Blatant lies detected in frame 94"": ""Yes"",
  ""Blatant lies detected in frame 95"": ""Yes"",
  ""Blatant lies detected in frame 96"": ""Yes"",
  ""Blatant lies detected in frame 97"": ""Yes"",
  ""Blatant lies detected in frame 98"": ""Yes"",
  ""Blatant lies detected in frame 99"": ""Yes"",
  ""Blatant lies detected in frame 100"": ""Yes"",
  ""Blatant lies detected in frame 101"": ""Yes"",
  ""Blatant lies detected in frame 102"": ""Yes"",
  ""Blatant lies detected in frame 103"": ""Yes"",
  ""Blatant lies detected in frame 104"": ""Yes"",
  ""Blatant lies detected in frame 105"": ""Yes"",
  ""Blatant lies detected in frame 106"": ""Yes"",
  ""Blatant lies detected in frame 107"": ""Yes"",
  ""Blatant lies detected in frame 108"": ""Yes"",
  ""Blatant lies detected in frame 109"": ""Yes"",
  ""Blatant lies detected in frame 110"": ""Yes"",
  ""Blatant lies detected in frame 111"": ""Yes"",
  ""Blatant lies detected in frame 112"": ""Yes"",
  ""Blatant lies detected in frame 113"": ""Yes"",
  ""Blatant lies detected in frame 114"": ""Yes"",
  ""Blatant lies detected in frame 115"": ""Yes"",
  ""Blatant lies detected in frame 116"": ""Yes"",
  ""Blatant lies detected in frame 117"": ""Yes"",
  ""Blatant lies detected in frame 118"": ""Yes""
}"|The presence of blatant lies in multiple frames indicates that characters are telling obvious lies throughout the movie, which aligns with the definition of the trope 'Blatant Lies'||
yes|no|tt1637725_71|Irony|"Is the trope ""Irony"", which means ""The intended meaning is an inversion of the plain meaning."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_71(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Irony
    # Definition: The intended meaning is an inversion of the plain meaning.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations where the intended meaning is opposite to the plain meaning.
    # 2. Contextual Analysis: Look for scenarios where actions or events contradict their expected outcomes.
    # 3. Irony Detection: Identify instances where there is a clear discrepancy between what is expected and what actually occurs.
    # 4. Answer Selection: Use the select_answer API to determine if the trope of Irony is relevant to the movie based on the detected instances.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, which can provide context for detecting irony
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # Analyze the dialogue for any ironic statements or situations
        irony_detection = frame.llm_query(subtitles_info + ""Is there any irony in the dialogue?"", to_yesno=True)
        
        # Check for visual cues or actions that suggest irony
        visual_irony_detection = frame.simple_query(""Is there any visual irony?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests irony, collect this information
        if ""yes"" in irony_detection or ""yes"" in visual_irony_detection:
            info[f""Irony in dialogue at frame {i}""] = irony_detection
            info[f""Visual irony at frame {i}""] = visual_irony_detection
    
    # Use the collected information to determine if the trope of Irony is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Irony in dialogue at frame 0"": ""No."",
  ""Visual irony at frame 0"": ""yes - the earth is surrounded by gold"",
  ""Irony in dialogue at frame 1"": ""No"",
  ""Visual irony at frame 1"": ""yes the polar bear''"",
  ""Irony in dialogue at frame 2"": ""No"",
  ""Visual irony at frame 2"": ""yes, he is holding a stuffed bear"",
  ""Irony in dialogue at frame 3"": ""Yes"",
  ""Visual irony at frame 3"": ""yes, the boy is standing in front of the window"",
  ""Irony in dialogue at frame 4"": ""No"",
  ""Visual irony at frame 4"": ""yes - teddy bear in the room"",
  ""Irony in dialogue at frame 5"": ""No"",
  ""Visual irony at frame 5"": ""yes - a family in the kitchen"",
  ""Irony in dialogue at frame 7"": ""Yes"",
  ""Visual irony at frame 7"": ""yes - teddy bears"",
  ""Irony in dialogue at frame 8"": ""Yes"",
  ""Visual irony at frame 8"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 9"": ""Yes"",
  ""Visual irony at frame 9"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 10"": ""No"",
  ""Visual irony at frame 10"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 11"": ""Yes"",
  ""Visual irony at frame 11"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 12"": ""No"",
  ""Visual irony at frame 12"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 13"": ""No"",
  ""Visual irony at frame 13"": ""yes'' yes''"",
  ""Irony in dialogue at frame 14"": ""No."",
  ""Visual irony at frame 14"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 15"": ""Yes"",
  ""Visual irony at frame 15"": ""yes, a man sitting on a couch with a teddy bear"",
  ""Irony in dialogue at frame 16"": ""No"",
  ""Visual irony at frame 16"": ""yes, a teddy bear on a couch"",
  ""Irony in dialogue at frame 17"": ""Yes"",
  ""Visual irony at frame 17"": ""yes, ted is a teddy bear"",
  ""Irony in dialogue at frame 18"": ""No"",
  ""Visual irony at frame 18"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 19"": ""No"",
  ""Visual irony at frame 19"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 20"": ""No"",
  ""Visual irony at frame 20"": ""yes the office'', the office'', the office''"",
  ""Irony in dialogue at frame 22"": ""No"",
  ""Visual irony at frame 22"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 23"": ""Yes"",
  ""Visual irony at frame 23"": ""yes, he is pouring the wine"",
  ""Irony in dialogue at frame 24"": ""Yes"",
  ""Visual irony at frame 24"": ""yes - dance stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 25"": ""No"",
  ""Visual irony at frame 25"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 26"": ""Yes"",
  ""Visual irony at frame 26"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 28"": ""No"",
  ""Visual irony at frame 28"": ""yes, he is driving a car"",
  ""Irony in dialogue at frame 29"": ""No"",
  ""Visual irony at frame 29"": ""yes, the woman is wearing a dress"",
  ""Irony in dialogue at frame 30"": ""Yes"",
  ""Visual irony at frame 30"": ""yes person, person, person, person, person, person, person"",
  ""Irony in dialogue at frame 31"": ""Yes"",
  ""Visual irony at frame 31"": ""yes, the man is holding a teddy bear"",
  ""Irony in dialogue at frame 32"": ""Yes"",
  ""Visual irony at frame 32"": ""yes, a teddy bear sitting on a bench"",
  ""Irony in dialogue at frame 34"": ""No"",
  ""Visual irony at frame 34"": ""yes, the teddy bear is sitting on the ground"",
  ""Irony in dialogue at frame 35"": ""Yes"",
  ""Visual irony at frame 35"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 37"": ""No"",
  ""Visual irony at frame 37"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 38"": ""No"",
  ""Visual irony at frame 38"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 39"": ""No"",
  ""Visual irony at frame 39"": ""yes, he is wearing a tie"",
  ""Irony in dialogue at frame 40"": ""No"",
  ""Visual irony at frame 40"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 41"": ""No"",
  ""Visual irony at frame 41"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 42"": ""Yes"",
  ""Visual irony at frame 42"": ""yes, the man is sitting on the couch with a teddy bear"",
  ""Irony in dialogue at frame 43"": ""No"",
  ""Visual irony at frame 43"": ""yes, he is holding a teddy bear"",
  ""Irony in dialogue at frame 44"": ""No"",
  ""Visual irony at frame 44"": ""yes, he's wearing a tie"",
  ""Irony in dialogue at frame 45"": ""No"",
  ""Visual irony at frame 45"": ""yes, the teddy bear is in the dark"",
  ""Irony in dialogue at frame 46"": ""Yes"",
  ""Visual irony at frame 46"": ""yes, it is a teddy bear"",
  ""Irony in dialogue at frame 47"": ""No"",
  ""Visual irony at frame 47"": ""yes, a teddy bear"",
  ""Irony in dialogue at frame 48"": ""Yes"",
  ""Visual irony at frame 48"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 49"": ""Yes"",
  ""Visual irony at frame 49"": ""yes person, person, person, person, person, person, person"",
  ""Irony in dialogue at frame 52"": ""No"",
  ""Visual irony at frame 52"": ""yes, the man is wearing a suit"",
  ""Irony in dialogue at frame 53"": ""No"",
  ""Visual irony at frame 53"": ""yes - he's wearing a suit"",
  ""Irony in dialogue at frame 54"": ""No"",
  ""Visual irony at frame 54"": ""yes, the man is holding a gun"",
  ""Irony in dialogue at frame 56"": ""No"",
  ""Visual irony at frame 56"": ""yes, he is wearing a superhero costume"",
  ""Irony in dialogue at frame 57"": ""No"",
  ""Visual irony at frame 57"": ""yes, a teddy bear standing in front of a group of people"",
  ""Irony in dialogue at frame 58"": ""No"",
  ""Visual irony at frame 58"": ""yes yes'' or 'no''"",
  ""Irony in dialogue at frame 59"": ""No"",
  ""Visual irony at frame 59"": ""yes - no stock videos & footage"",
  ""Irony in dialogue at frame 60"": ""Yes"",
  ""Visual irony at frame 60"": ""yes, ted teddy bear"",
  ""Irony in dialogue at frame 61"": ""No"",
  ""Visual irony at frame 61"": ""yes, the teddy bear is sitting on the table"",
  ""Irony in dialogue at frame 63"": ""No"",
  ""Visual irony at frame 63"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 64"": ""No"",
  ""Visual irony at frame 64"": ""yes, the teddy bear is standing next to a person"",
  ""Irony in dialogue at frame 65"": ""No"",
  ""Visual irony at frame 65"": ""yes'' yes''"",
  ""Irony in dialogue at frame 67"": ""Yes"",
  ""Visual irony at frame 67"": ""yes, a woman wearing a teddy bear"",
  ""Irony in dialogue at frame 69"": ""Yes"",
  ""Visual irony at frame 69"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 70"": ""No"",
  ""Visual irony at frame 70"": ""yes, the couple is standing on the street"",
  ""Irony in dialogue at frame 71"": ""No"",
  ""Visual irony at frame 71"": ""yes, the teddy bear is standing on the street"",
  ""Irony in dialogue at frame 72"": ""Yes"",
  ""Visual irony at frame 72"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 73"": ""Yes"",
  ""Visual irony at frame 73"": ""yes, the man is reading a book in bed"",
  ""Irony in dialogue at frame 74"": ""Yes"",
  ""Visual irony at frame 74"": ""yes, the teddy bear is standing in front of the window"",
  ""Irony in dialogue at frame 75"": ""Yes"",
  ""Visual irony at frame 75"": ""yes - a man in a black shirt"",
  ""Irony in dialogue at frame 77"": ""Yes"",
  ""Visual irony at frame 77"": ""yes, he is holding a stuffed animal"",
  ""Irony in dialogue at frame 79"": ""Yes"",
  ""Visual irony at frame 79"": ""yes, the man is laying on top of the suitcase"",
  ""Irony in dialogue at frame 82"": ""Yes"",
  ""Visual irony at frame 82"": ""yes, the teddy bear is a teddy bear"",
  ""Irony in dialogue at frame 83"": ""No"",
  ""Visual irony at frame 83"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 84"": ""Yes"",
  ""Visual irony at frame 84"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 86"": ""Yes"",
  ""Visual irony at frame 86"": ""yes, a teddy bear is standing next to a woman"",
  ""Irony in dialogue at frame 87"": ""No"",
  ""Visual irony at frame 87"": ""yes - teddy bears"",
  ""Irony in dialogue at frame 88"": ""No"",
  ""Visual irony at frame 88"": ""yes, the teddy bear is standing in the doorway"",
  ""Irony in dialogue at frame 89"": ""Yes"",
  ""Visual irony at frame 89"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 91"": ""No"",
  ""Visual irony at frame 91"": ""yes - a child's bedroom"",
  ""Irony in dialogue at frame 92"": ""Yes"",
  ""Visual irony at frame 92"": ""yes, a teddy bear in the room"",
  ""Irony in dialogue at frame 94"": ""Yes"",
  ""Visual irony at frame 94"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 95"": ""No"",
  ""Visual irony at frame 95"": ""yes, the teddy bear is wearing a shirt"",
  ""Irony in dialogue at frame 96"": ""Yes"",
  ""Visual irony at frame 96"": ""yes, the car is parked in the street"",
  ""Irony in dialogue at frame 97"": ""No"",
  ""Visual irony at frame 97"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 98"": ""No"",
  ""Visual irony at frame 98"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 100"": ""Yes"",
  ""Visual irony at frame 100"": ""yes - car stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 101"": ""No"",
  ""Visual irony at frame 101"": ""yes - a woman driving a car"",
  ""Irony in dialogue at frame 102"": ""No"",
  ""Visual irony at frame 102"": ""yes, the car is driving down the street"",
  ""Irony in dialogue at frame 103"": ""Yes"",
  ""Visual irony at frame 103"": ""yes, the car is parked on the street"",
  ""Irony in dialogue at frame 104"": ""Yes"",
  ""Visual irony at frame 104"": ""yes, the teddy bear is standing on the street"",
  ""Irony in dialogue at frame 105"": ""Yes"",
  ""Visual irony at frame 105"": ""yes, i think there is some irony"",
  ""Irony in dialogue at frame 106"": ""No"",
  ""Visual irony at frame 106"": ""yes, but it's hard to tell"",
  ""Irony in dialogue at frame 107"": ""No"",
  ""Visual irony at frame 107"": ""yes, he's wearing a shirt"",
  ""Irony in dialogue at frame 108"": ""Yes"",
  ""Visual irony at frame 108"": ""yes, the stadium is lit up at night"",
  ""Irony in dialogue at frame 109"": ""Yes"",
  ""Visual irony at frame 109"": ""yes, the man is running down the stairs"",
  ""Irony in dialogue at frame 110"": ""Yes"",
  ""Visual irony at frame 110"": ""yes, the teddy bear is sitting on the field"",
  ""Irony in dialogue at frame 111"": ""Yes"",
  ""Visual irony at frame 111"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 112"": ""No"",
  ""Visual irony at frame 112"": ""yes - a man leaning on a baseball"",
  ""Irony in dialogue at frame 113"": ""Yes"",
  ""Visual irony at frame 113"": ""yes the darkest hour''"",
  ""Irony in dialogue at frame 114"": ""Yes"",
  ""Visual irony at frame 114"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 116"": ""Yes"",
  ""Visual irony at frame 116"": ""yes, the man is holding the teddy bear"",
  ""Irony in dialogue at frame 117"": ""No"",
  ""Visual irony at frame 117"": ""yes ted is a teddy bear""
}"|The video frames depict various instances of irony in dialogue and visuals, creating a contrast between what is said and what is shown visually. Examples include a person saying 'No' while the visual irony shows the earth surrounded by gold, a person saying 'Yes' while a boy stands in front of a window, and a person saying 'No' while a teddy bear is in the room. These instances of irony are present throughout the movie, indicating the relevance of the trope 'Irony'||
yes|no|tt1637725_73|Stealth Pun|"Is the trope ""Stealth Pun"", which means ""The writers put in a joke (almost always a pun), but never make or put in a Punch Line or explicit statement, hiding it in the set up of the joke. "", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_73(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Stealth Pun
    # Definition: A joke, typically a pun, is included by the writers but is not highlighted with a punchline or explicit statement. It's hidden within the setup of the joke, requiring the audience to notice and interpret it themselves.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential visual or audio cues that might indicate a hidden joke or pun. This requires understanding both the context and the elements present in the scene.
    # 2. Contextual Analysis: Since the essence of a Stealth Pun lies in the setup and requires audience interpretation, we need to look for elements that are inconspicuously out of place or cleverly integrated into the context but might not be immediately obvious.
    # 3. Detecting Puns: This involves analyzing the text or dialogue for play on words, and visual elements for any visual puns or jokes that rely on the visual context but are not explicitly acknowledged in the video.
    # 4. Answer Selection: Use the select_answer API to determine the most probable answer based on the analyzed data, considering the subtlety and clever integration of puns within the video content.
    
    video_segment = VideoSegment(video, annotation)
    
    # Create an info dictionary to hold detected elements that might contribute to a Stealth Pun
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # use llm_query to analyze dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any puns in the dialogue?"", to_yesno=True)
        
        # use simple_query to analyze image
        visual_pun_analysis = frame.simple_query(""Are there any visual puns?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests a pun, collect this information
        if ""yes"" in dialogue_analysis or ""yes"" in visual_pun_analysis:
            info[f""Pun in dialogue at frame {i}""] = dialogue_analysis
            info[f""Visual pun at frame {i}""] = visual_pun_analysis
    
    # Since Stealth Puns are about subtlety and not explicitly pointing out the joke, we need to balance detection with the likelihood of an actual pun being present without explicit acknowledgment.
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Pun in dialogue at frame 0"": ""No"",
  ""Visual pun at frame 0"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 1"": ""No"",
  ""Visual pun at frame 1"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 2"": ""No"",
  ""Visual pun at frame 2"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 3"": ""No"",
  ""Visual pun at frame 3"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 5"": ""No"",
  ""Visual pun at frame 5"": ""yes - i think there are some"",
  ""Pun in dialogue at frame 6"": ""No"",
  ""Visual pun at frame 6"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 7"": ""No"",
  ""Visual pun at frame 7"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 8"": ""No"",
  ""Visual pun at frame 8"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 9"": ""No"",
  ""Visual pun at frame 9"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 10"": ""No"",
  ""Visual pun at frame 10"": ""yes, there is a car in the parking lot"",
  ""Pun in dialogue at frame 11"": ""No"",
  ""Visual pun at frame 11"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 12"": ""No"",
  ""Visual pun at frame 12"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 13"": ""Yes"",
  ""Visual pun at frame 13"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 14"": ""No."",
  ""Visual pun at frame 14"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 15"": ""No"",
  ""Visual pun at frame 15"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 16"": ""No"",
  ""Visual pun at frame 16"": ""yes, a teddy bear"",
  ""Pun in dialogue at frame 17"": ""Yes"",
  ""Visual pun at frame 17"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 18"": ""No"",
  ""Visual pun at frame 18"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 19"": ""No"",
  ""Visual pun at frame 19"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 20"": ""No"",
  ""Visual pun at frame 20"": ""yes'' yes''"",
  ""Pun in dialogue at frame 21"": ""No"",
  ""Visual pun at frame 21"": ""yes'' yes"",
  ""Pun in dialogue at frame 22"": ""No"",
  ""Visual pun at frame 22"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 23"": ""Yes"",
  ""Visual pun at frame 23"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 25"": ""No"",
  ""Visual pun at frame 25"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 26"": ""No"",
  ""Visual pun at frame 26"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 27"": ""No"",
  ""Visual pun at frame 27"": ""yes - a man and a woman"",
  ""Pun in dialogue at frame 28"": ""No"",
  ""Visual pun at frame 28"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 29"": ""No"",
  ""Visual pun at frame 29"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 30"": ""Yes"",
  ""Visual pun at frame 30"": ""yes person, person, person, person, person, person, person, person, person"",
  ""Pun in dialogue at frame 31"": ""No"",
  ""Visual pun at frame 31"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 32"": ""No"",
  ""Visual pun at frame 32"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 33"": ""Yes"",
  ""Visual pun at frame 33"": ""yes, there are visual puns throughout the movie"",
  ""Pun in dialogue at frame 34"": ""No"",
  ""Visual pun at frame 34"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 35"": ""No"",
  ""Visual pun at frame 35"": ""yes'' no''"",
  ""Pun in dialogue at frame 36"": ""No"",
  ""Visual pun at frame 36"": ""yes - i'm not sure"",
  ""Pun in dialogue at frame 37"": ""No"",
  ""Visual pun at frame 37"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 38"": ""No"",
  ""Visual pun at frame 38"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 39"": ""No"",
  ""Visual pun at frame 39"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 40"": ""No"",
  ""Visual pun at frame 40"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 41"": ""No"",
  ""Visual pun at frame 41"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 42"": ""No"",
  ""Visual pun at frame 42"": ""yes, ted is a teddy bear"",
  ""Pun in dialogue at frame 43"": ""No"",
  ""Visual pun at frame 43"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 44"": ""No"",
  ""Visual pun at frame 44"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 45"": ""No"",
  ""Visual pun at frame 45"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 46"": ""No"",
  ""Visual pun at frame 46"": ""yes, a teddy bear"",
  ""Pun in dialogue at frame 47"": ""No"",
  ""Visual pun at frame 47"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 48"": ""No"",
  ""Visual pun at frame 48"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 49"": ""No"",
  ""Visual pun at frame 49"": ""yes person, person, person, person, person, person, person"",
  ""Pun in dialogue at frame 50"": ""No"",
  ""Visual pun at frame 50"": ""yes - 'the vampire diaries'"",
  ""Pun in dialogue at frame 51"": ""No"",
  ""Visual pun at frame 51"": ""'yes ', 'yes"",
  ""Pun in dialogue at frame 53"": ""No"",
  ""Visual pun at frame 53"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 54"": ""No"",
  ""Visual pun at frame 54"": ""yes - a man in a black shirt"",
  ""Pun in dialogue at frame 56"": ""No"",
  ""Visual pun at frame 56"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 57"": ""No"",
  ""Visual pun at frame 57"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 58"": ""No"",
  ""Visual pun at frame 58"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 59"": ""No"",
  ""Visual pun at frame 59"": ""yes - no stock videos & footage"",
  ""Pun in dialogue at frame 60"": ""No"",
  ""Visual pun at frame 60"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 61"": ""No"",
  ""Visual pun at frame 61"": ""yes, a teddy bear"",
  ""Pun in dialogue at frame 62"": ""No"",
  ""Visual pun at frame 62"": ""yes, there are a few visual puns"",
  ""Pun in dialogue at frame 63"": ""No"",
  ""Visual pun at frame 63"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 64"": ""No"",
  ""Visual pun at frame 64"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 65"": ""No"",
  ""Visual pun at frame 65"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 67"": ""No"",
  ""Visual pun at frame 67"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 69"": ""No"",
  ""Visual pun at frame 69"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 70"": ""No"",
  ""Visual pun at frame 70"": ""yes'' yes''"",
  ""Pun in dialogue at frame 71"": ""No"",
  ""Visual pun at frame 71"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 72"": ""No"",
  ""Visual pun at frame 72"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 73"": ""No"",
  ""Visual pun at frame 73"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 74"": ""No"",
  ""Visual pun at frame 74"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 75"": ""Yes"",
  ""Visual pun at frame 75"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 76"": ""No"",
  ""Visual pun at frame 76"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 77"": ""No"",
  ""Visual pun at frame 77"": ""yes ''the teddy bear''"",
  ""Pun in dialogue at frame 78"": ""No"",
  ""Visual pun at frame 78"": ""yes - teddy bears"",
  ""Pun in dialogue at frame 79"": ""No"",
  ""Visual pun at frame 79"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 82"": ""No"",
  ""Visual pun at frame 82"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 83"": ""No"",
  ""Visual pun at frame 83"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 84"": ""No"",
  ""Visual pun at frame 84"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 86"": ""No"",
  ""Visual pun at frame 86"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 87"": ""No"",
  ""Visual pun at frame 87"": ""yes - teddy bears"",
  ""Pun in dialogue at frame 88"": ""No"",
  ""Visual pun at frame 88"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 89"": ""No"",
  ""Visual pun at frame 89"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 91"": ""No"",
  ""Visual pun at frame 91"": ""yes - a bed in a room"",
  ""Pun in dialogue at frame 92"": ""No"",
  ""Visual pun at frame 92"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 93"": ""No"",
  ""Visual pun at frame 93"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 94"": ""No"",
  ""Visual pun at frame 94"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 95"": ""No"",
  ""Visual pun at frame 95"": "" yes ''  yes"",
  ""Pun in dialogue at frame 96"": ""No"",
  ""Visual pun at frame 96"": ""yes, there is a car in the scene"",
  ""Pun in dialogue at frame 97"": ""No"",
  ""Visual pun at frame 97"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 98"": ""No"",
  ""Visual pun at frame 98"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 99"": ""No"",
  ""Visual pun at frame 99"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 101"": ""No"",
  ""Visual pun at frame 101"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 102"": ""No"",
  ""Visual pun at frame 102"": ""yes, there is a car in the background"",
  ""Pun in dialogue at frame 103"": ""No"",
  ""Visual pun at frame 103"": ""yes, there is a car in the background"",
  ""Pun in dialogue at frame 104"": ""No"",
  ""Visual pun at frame 104"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 105"": ""No"",
  ""Visual pun at frame 105"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 106"": ""No"",
  ""Visual pun at frame 106"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 107"": ""No"",
  ""Visual pun at frame 107"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 109"": ""No"",
  ""Visual pun at frame 109"": ""yes 'yes' 'yes'"",
  ""Pun in dialogue at frame 110"": ""No"",
  ""Visual pun at frame 110"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 111"": ""No"",
  ""Visual pun at frame 111"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 112"": ""No"",
  ""Visual pun at frame 112"": ""yes, there are visual puns throughout the movie"",
  ""Pun in dialogue at frame 113"": ""No"",
  ""Visual pun at frame 113"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 114"": ""No"",
  ""Visual pun at frame 114"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 115"": ""No"",
  ""Visual pun at frame 115"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 116"": ""No"",
  ""Visual pun at frame 116"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 117"": ""No"",
  ""Visual pun at frame 117"": ""yes, there is a teddy bear"",
  ""Pun in dialogue at frame 118"": ""No"",
  ""Visual pun at frame 118"": ""yes - teddy bears"",
  ""Pun in dialogue at frame 119"": ""No"",
  ""Visual pun at frame 119"": ""yes - a man clapping""
}"|The movie contains visual puns consistently throughout its duration, adding a playful and creative layer to the storytelling. The presence of visual puns, including references to teddy bears, cars, and various characters, suggests that the trope 'Stealth Pun' is relevant to the movie.||
|no|tt1637725_74|Bittersweet Ending|"Is the trope ""Bittersweet Ending"", which means ""When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some 
irrevocable loss has happened during the course of the events, and nothing will ever be the same again."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_74(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Bittersweet Ending
    # Definition: When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some irrevocable loss has happened during the course of the events, and nothing will ever be the same again.
    # Thought: To detect the ""Bittersweet Ending"" trope, we need to analyze the emotional and narrative elements of the video segment, focusing on the resolution and aftermath of the story.
    # 1. Emotional Analysis: Look for visual cues of sadness, loss, or sacrifice in the final frames of the video segment.
    # 2. Narrative Examination: Analyze the character arcs and plot developments to identify any significant losses or unfulfilled resolutions.
    # 3. Answer Selection: Use the select_answer API to determine if the video segment aligns with the characteristics of a bittersweet ending.
    
    video_segment = VideoSegment(video, annotation)
    
    # Assuming the last 10% of the video is a reasonable segment to analyze for the ending
    ending_segment_start = int(video_segment.num_frames * 0.9)
    ending_segment = video_segment.trim(start=ending_segment_start)
    
    # Create an info dictionary to store collected information
    info = {}
    
    for i, frame in enumerate(ending_segment.frame_iterator()):
        # Detect visual cues of sadness, tragedy, or loss
        sadness_query = frame.simple_query(""Is there sadness or mourning?"", to_yesno=True)
        tragedy_query = frame.simple_query(""Is there visible tragedy or destruction?"", to_yesno=True)

        if ""yes"" in sadness_query.lower() or ""yes"" in tragedy_query.lower():
            # Caption the frame
            caption = frame.simple_query(""What is in the frame?"")
            sadness_query = frame.simple_query(""What sadness or mourning event is in the frame?"")
            tragedy_query = frame.simple_query(""What visible tragedy or destruction event is in the frame?"")
            info[f""Caption of {ending_segment.start + 1} th frame""] = caption
            info[f""Sadness or mourning event in {ending_segment.start + 1} th frame""] = sadness_query
            info[f""Visible tragedy or destruction event in {ending_segment.start + 1} th frame""] = tragedy_query
    
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|null|||VideoSegment has duration=0
no|no|tt1637725_82|What the Hell, Hero?|"Is the trope ""What the Hell, Hero?"", which means ""When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_82(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: What the Hell, Hero?
    # Definition: When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where a hero's actions are questionable or morally ambiguous.
    # 2. Character Analysis: Identify the hero and the actions that might lead to the trope being relevant.
    # 3. Answer Selection: Use the collected information to determine if the trope is applicable to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with the query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for hero in frame.find(""hero""):
            hero_id = video_segment.face_identify(hero)
            if hero_id is None:
                continue
            hero_action = hero.simple_query(subtitles_info + ""What is the hero doing?"")
            if hero_id not in info:
                info[hero_id] = {}
            info[hero_id].update({
                f""Action in {i} frame"": hero_action
            })

    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest any instance of characters calling out a hero for unheroic actions||
no|no|tt1637725_89|Chekhov's Gunman|"Is the trope ""Chekhov's Gunman"", which means ""Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_89(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Chekhov's Gunman
    # Definition: Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters introduced early on but seemingly unimportant.
    # 2. Character Analysis: Track the actions and interactions of these characters throughout the video segment.
    # 3. Relevance Assessment: Determine if any of these initially unimportant characters play a significant role later on.
    # 4. Answer Selection: Use the select_answer API to decide if the ""Chekhov's Gunman"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    relevant_characters = []

    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Track the character's actions and interactions
            character_actions = character.simple_query(""What actions is this character performing?"")
            if i < video_segment.num_frames // 2:
                # Characters introduced in the first half are considered for the trope
                relevant_characters.append((character_id, character_actions))

    # Check if any of the initially unimportant characters become significant later
    relevant_characters_info = {}
    for character_id, actions in relevant_characters:
        if actions:
            # If the character has actions, they might become important later
            relevant_characters_info[character_id] = actions

    # Determine if the ""Chekhov's Gunman"" trope is relevant based on the character analysis
    if relevant_characters_info:
        answer = ""yes""
        reason = ""There are characters introduced early on with actions that might become significant later.""
    else:
        answer = ""no""
        reason = ""No characters introduced early on show signs of becoming important later.""

    return answer, reason, relevant_characters_info"|{}|No characters introduced early on show signs of becoming important later.||
yes|no|tt1637725_90|Red Herring|"Is the trope ""Red Herring"", which means ""A clue that leads in the wrong direction."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt1637725.mp4|['yes', 'no']|"def execute_command_tt1637725_90(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Red Herring
    # Definition: A clue that leads in the wrong direction.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify any misleading clues or information that could divert the audience's attention.
    # 2. Contextual Analysis: Look for elements that are presented as significant but ultimately turn out to be irrelevant or misleading in the narrative.
    # 3. Detecting Red Herrings: Identify instances where certain characters, objects, or events are highlighted to mislead the audience.
    # 4. Answer Selection: Use the select_answer API to determine if the trope ""Red Herring"" is relevant to the movie based on the collected data.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for potential red herrings
        potential_red_herring = frame.simple_query(""Is there any misleading clue or information in this frame?"", to_yesno=True)
        
        if ""yes"" in potential_red_herring.lower():
            # Collect information about the potential red herring
            caption = frame.simple_query(""What is the misleading clue or information in this frame?"")
            info[f""Red Herring in frame {i}""] = caption

    # Determine if the trope ""Red Herring"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Red Herring in frame 1"": ""person's name is person, not person"",
  ""Red Herring in frame 2"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 3"": ""the boy is standing in front of the window"",
  ""Red Herring in frame 4"": ""the boy is holding a teddy bear"",
  ""Red Herring in frame 5"": ""the man in the red coat is a man"",
  ""Red Herring in frame 7"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 9"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 10"": ""person is standing in front of a car"",
  ""Red Herring in frame 11"": ""person is wearing a white shirt and tie"",
  ""Red Herring in frame 14"": ""person is wearing a white shirt and tie"",
  ""Red Herring in frame 16"": ""person is a teddy bear"",
  ""Red Herring in frame 17"": ""the teddy bear is sitting at the table"",
  ""Red Herring in frame 18"": ""person is in bed with a woman in the background"",
  ""Red Herring in frame 22"": ""person is wearing a black blazer"",
  ""Red Herring in frame 26"": ""person is wearing a white dress and a white shirt"",
  ""Red Herring in frame 27"": ""the woman is wearing a t-shirt"",
  ""Red Herring in frame 28"": ""person is driving a car in this scene"",
  ""Red Herring in frame 29"": ""a woman in a white dress walking down the stairs"",
  ""Red Herring in frame 30"": ""person, person, person, person, person, person"",
  ""Red Herring in frame 31"": ""the teddy bear's name"",
  ""Red Herring in frame 33"": ""the teddy bear is wearing a suit"",
  ""Red Herring in frame 34"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 37"": ""the woman is wearing a white t-shirt"",
  ""Red Herring in frame 38"": ""person is wearing a red apron"",
  ""Red Herring in frame 43"": ""the teddy bear's name"",
  ""Red Herring in frame 45"": ""the teddy bear is in the dark"",
  ""Red Herring in frame 48"": ""person, person, person, person, person"",
  ""Red Herring in frame 49"": ""person, person, person, person, person"",
  ""Red Herring in frame 53"": ""person is wearing a white blazer"",
  ""Red Herring in frame 57"": ""person, person, person, person, person, person"",
  ""Red Herring in frame 58"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 60"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 61"": ""the teddy bear's name"",
  ""Red Herring in frame 62"": ""the teddy bear is holding a microphone"",
  ""Red Herring in frame 65"": ""person's character's name is person"",
  ""Red Herring in frame 69"": ""person, person, person, person, person"",
  ""Red Herring in frame 70"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 71"": ""the teddy bear's name is person"",
  ""Red Herring in frame 72"": ""person, person, person, person, person"",
  ""Red Herring in frame 73"": ""the man is reading a book in bed"",
  ""Red Herring in frame 74"": ""the teddy bear's name"",
  ""Red Herring in frame 76"": ""the teddy bear in the bed"",
  ""Red Herring in frame 77"": ""the teddy bear is a stuffed animal"",
  ""Red Herring in frame 78"": ""the teddy bear in the room"",
  ""Red Herring in frame 79"": ""the teddy bear in the room"",
  ""Red Herring in frame 81"": ""the woman is standing in front of the man"",
  ""Red Herring in frame 82"": ""the teddy bear's name"",
  ""Red Herring in frame 83"": ""person, person, person, person, person"",
  ""Red Herring in frame 84"": ""the man in the black shirt is wearing a shirt"",
  ""Red Herring in frame 86"": ""the teddy bear's name is person"",
  ""Red Herring in frame 87"": ""the teddy bear's name"",
  ""Red Herring in frame 88"": ""the teddy bear's name is person"",
  ""Red Herring in frame 89"": ""person, person, person, person, person"",
  ""Red Herring in frame 91"": ""the bed is a king size bed"",
  ""Red Herring in frame 92"": ""the teddy bear is in the room"",
  ""Red Herring in frame 94"": ""the door is open and the person is inside"",
  ""Red Herring in frame 95"": ""the teddy bear is wearing a shirt"",
  ""Red Herring in frame 96"": ""the car is parked in a garage"",
  ""Red Herring in frame 97"": ""person, person, person, person, person"",
  ""Red Herring in frame 98"": ""person, person, person, person, person"",
  ""Red Herring in frame 100"": ""- car stock videos & royalty-free footage"",
  ""Red Herring in frame 103"": ""the car is parked in a garage"",
  ""Red Herring in frame 104"": ""the teddy bear's name is person"",
  ""Red Herring in frame 105"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 106"": ""the woman is wearing a striped shirt"",
  ""Red Herring in frame 109"": ""the man is wearing a t shirt"",
  ""Red Herring in frame 110"": ""the teddy bear is wearing a baseball cap"",
  ""Red Herring in frame 113"": ""person's face is obscured by shadow"",
  ""Red Herring in frame 114"": ""person, person, person, person, person"",
  ""Red Herring in frame 115"": ""the teddy bear is not dead"",
  ""Red Herring in frame 116"": ""the teddy bear's name is ted"",
  ""Red Herring in frame 117"": ""the teddy bear's name is person""
}"|The presence of multiple red herrings throughout the video, such as incorrect names, misleading details, and false clues, indicates that the trope 'Red Herring' is relevant to the movie. These elements are intentionally included to mislead the audience and lead them in the wrong direction.||
no|yes|tt0100157_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|no|tt0100157_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|yes|tt0100157_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 1"": ""a hand is reaching out to the child"",
  ""Actions towards child in frame 4"": ""person, person, person, person, person"",
  ""Actions towards child in frame 5"": ""they are directed towards the child's mother"",
  ""Actions towards child in frame 9"": ""the child is being pushed into the water"",
  ""Actions towards child in frame 12"": ""the child is placed in a hospital bed"",
  ""Actions towards child in frame 16"": ""a woman is holding a baby in her arms"",
  ""Actions towards child in frame 29"": ""screams and screams"",
  ""Actions towards child in frame 30"": ""person, person, person, person, person"",
  ""Actions towards child in frame 36"": ""water splashed on the child's face"",
  ""Actions towards child in frame 41"": ""person, person, person, person, person"",
  ""Actions towards child in frame 43"": ""person, person, person, person, person"",
  ""Actions towards child in frame 46"": ""the child's actions are directed towards the child"",
  ""Actions towards child in frame 51"": ""a hand is reaching out to the child"",
  ""Actions towards child in frame 54"": ""a penguin and a pig"",
  ""Actions towards child in frame 57"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 58"": ""a woman is walking towards the child in the snow"",
  ""Actions towards child in frame 59"": ""person, person, person, person, person"",
  ""Actions towards child in frame 60"": ""person, person, person, person, person"",
  ""Actions towards child in frame 61"": ""- person stock videos & royalty-free footage"",
  ""Actions towards child in frame 62"": ""the child is screamed at"",
  ""Actions towards child in frame 63"": ""person, person, person, person, person"",
  ""Actions towards child in frame 64"": ""the child is being pushed down a snowy slope"",
  ""Actions towards child in frame 78"": ""the child is being scolded"",
  ""Actions towards child in frame 79"": ""he scolds the child"",
  ""Actions towards child in frame 80"": ""he reaches out to the child with his hand"",
  ""Actions towards child in frame 83"": ""the child is screamed at"",
  ""Actions towards child in frame 84"": ""adolescence and adulthood"",
  ""Actions towards child in frame 91"": ""person, person, person, person, person"",
  ""Actions towards child in frame 92"": ""he screams at the child"",
  ""Actions towards child in frame 94"": ""person's actions are directed towards the child"",
  ""Actions towards child in frame 99"": ""the child is screamed at"",
  ""Actions towards child in frame 100"": ""person, person, person, person, person"",
  ""Actions towards child in frame 102"": ""person, person, person, person, person"",
  ""Actions towards child in frame 106"": ""he lays down on the ground and puts his phone down"",
  ""Actions towards child in frame 112"": ""- child stock videos & royalty-free footage""
}"|There are instances of characters harming children in the video.||
no|yes|tt0100157_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt0100157_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The character in the movie is shown to never give up, no matter what obstacles they face. This determination is a key trait of the trope 'Determinator'||
no|no|tt0100157_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt0100157_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The presence of the trope `Too Dumb to Live` would involve characters making consistently foolish decisions that put their lives in danger. The information provided does not indicate any such behavior from the characters in the movie.||
no|no|tt0100157_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The information provided does not mention any character being socially inept, shy, or clumsy. Therefore, it is unlikely that the trope 'Adorkable' is relevant to the movie.||
yes|yes|tt0100157_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 0"": ""a lion is on a screen"",
  ""Fear element in frame 0"": ""a lion's roaring"",
  ""Caption of frame 1"": ""a person is opening a briefcase"",
  ""Fear element in frame 1"": ""a hand reaching into a briefcase"",
  ""Caption of frame 3"": ""driving a car in a snowstorm"",
  ""Fear element in frame 3"": ""driving a car in a snowstorm"",
  ""Caption of frame 4"": ""a man is skiing down a hill"",
  ""Fear element in frame 4"": ""the shivering of a child"",
  ""Caption of frame 5"": ""a train is traveling through a tunnel"",
  ""Fear element in frame 5"": ""the blackness of the night and the dark"",
  ""Caption of frame 6"": ""a woman is sitting at a desk"",
  ""Fear element in frame 6"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 7"": ""a skier is going down a hill"",
  ""Fear element in frame 7"": ""avalanche - fb"",
  ""Caption of frame 8"": ""a man is laying in the snow with blood on his face"",
  ""Fear element in frame 8"": ""the blood on the face of a man"",
  ""Caption of frame 9"": ""a person is holding a red bag"",
  ""Fear element in frame 9"": ""a slushy pond"",
  ""Caption of frame 10"": ""a woman is sitting in a room"",
  ""Fear element in frame 10"": ""a woman's screams"",
  ""Caption of frame 11"": ""a woman is sitting in a room"",
  ""Fear element in frame 11"": ""a woman in a green sweater stares at the camera"",
  ""Caption of frame 12"": ""a person is sitting on a bed"",
  ""Fear element in frame 12"": ""the bandages on the legs of the victim"",
  ""Caption of frame 13"": ""a woman is talking on a phone"",
  ""Fear element in frame 13"": ""a woman talking on a cell phone"",
  ""Caption of frame 14"": ""a cowboy is talking on the phone"",
  ""Fear element in frame 14"": ""a cowboy in a hat"",
  ""Caption of frame 15"": ""a woman is talking to a man"",
  ""Fear element in frame 15"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 16"": ""a woman is opening the door to a room"",
  ""Fear element in frame 16"": ""a child's fear of the dark"",
  ""Caption of frame 17"": ""a man is in a hospital bed"",
  ""Fear element in frame 17"": ""person, person, person, person, person"",
  ""Caption of frame 18"": ""a man is talking to a woman"",
  ""Fear element in frame 18"": ""a cowboy in a hat"",
  ""Caption of frame 19"": ""a man is lying in a bed"",
  ""Fear element in frame 19"": ""a man in a white robe"",
  ""Caption of frame 20"": ""a man is laying in a bed"",
  ""Fear element in frame 20"": ""person, person, person, person, person, person"",
  ""Caption of frame 21"": ""two people are driving a jeep"",
  ""Fear element in frame 21"": ""person, person, person, person, person"",
  ""Caption of frame 22"": ""a woman is standing on top of snow"",
  ""Fear element in frame 22"": ""a woman in a coat standing in the snow"",
  ""Caption of frame 23"": ""a man is in a hospital bed"",
  ""Fear element in frame 23"": ""a man lying in a hospital bed"",
  ""Caption of frame 24"": ""a woman is holding up a book"",
  ""Fear element in frame 24"": ""person, person, person, person, person"",
  ""Caption of frame 25"": ""a man is in a hospital bed"",
  ""Fear element in frame 25"": ""screams of a dying man"",
  ""Caption of frame 26"": ""a man is laying in a bed"",
  ""Fear element in frame 26"": ""a dog in the bed with the man"",
  ""Caption of frame 28"": ""a woman is holding a glass of milk"",
  ""Fear element in frame 28"": ""the presence of a child in the room"",
  ""Caption of frame 29"": ""a man is standing in a dark room"",
  ""Fear element in frame 29"": ""a man in a dark room with a flashlight"",
  ""Caption of frame 30"": ""a man is standing in a room"",
  ""Fear element in frame 30"": ""ghosts, horror movies, scary movies, scary movies, scary movies, scary movies, scary movies"",
  ""Caption of frame 31"": ""a woman is sitting in a dark room"",
  ""Fear element in frame 31"": ""a woman in a plaid shirt in the dark"",
  ""Caption of frame 32"": ""a man is in a hospital bed"",
  ""Fear element in frame 32"": ""a man in a white hospital gown"",
  ""Caption of frame 33"": ""a man is laying on the floor"",
  ""Fear element in frame 33"": ""a man laying on a bed"",
  ""Caption of frame 34"": ""a man is lying on a bed"",
  ""Fear element in frame 34"": ""a man laying on a bed"",
  ""Caption of frame 35"": ""a woman is talking to a man"",
  ""Fear element in frame 35"": ""a woman in a plaid shirt with her mouth open"",
  ""Caption of frame 36"": ""a book is sitting on a grill"",
  ""Fear element in frame 36"": ""water splashing on a paperback book"",
  ""Caption of frame 37"": ""a woman is staring off into space"",
  ""Fear element in frame 37"": ""person, person, person, person, person"",
  ""Caption of frame 38"": ""a woman is staring at the camera"",
  ""Fear element in frame 38"": ""a woman in a plaid shirt staring into space"",
  ""Caption of frame 39"": ""a man is in a hospital bed"",
  ""Fear element in frame 39"": ""a man in a white hospital gown"",
  ""Caption of frame 40"": ""a woman is holding a can of beer"",
  ""Fear element in frame 40"": ""a candle burning in a jar"",
  ""Caption of frame 41"": ""a woman is standing next to a bed"",
  ""Fear element in frame 41"": ""a woman in a plaid shirt standing in the doorway"",
  ""Caption of frame 42"": ""a man is in a hospital bed"",
  ""Fear element in frame 42"": ""a man in a white hospital gown"",
  ""Caption of frame 44"": ""a man is putting his hand on a mattress"",
  ""Fear element in frame 44"": ""a child's scream"",
  ""Caption of frame 45"": ""a woman is holding a typewriter"",
  ""Fear element in frame 45"": ""a woman holding a typewriter in her hand"",
  ""Caption of frame 46"": ""a light is shining on a wooden floor"",
  ""Fear element in frame 46"": ""the shadow of a knife on the floor"",
  ""Caption of frame 48"": ""a person is writing on a paper"",
  ""Fear element in frame 48"": ""the word betrayal''"",
  ""Caption of frame 49"": ""a man is sitting in a window"",
  ""Fear element in frame 49"": ""a man in a red shirt with a broken arm"",
  ""Caption of frame 50"": ""a door is open in a room"",
  ""Fear element in frame 50"": ""a slammed wooden door"",
  ""Caption of frame 51"": ""a person's finger is on a nail"",
  ""Fear element in frame 51"": ""a nail sticking out of a finger"",
  ""Caption of frame 52"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 52"": ""a man in a wheelchair with a cast"",
  ""Caption of frame 53"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 53"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 55"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 55"": ""a man in a wheelchair in a house"",
  ""Caption of frame 56"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 56"": ""the sound of a door slamming"",
  ""Caption of frame 57"": ""there is a water tower in the snow"",
  ""Fear element in frame 57"": ""a water tower in the middle of the snow"",
  ""Caption of frame 59"": ""a man is walking through the snow with a bag"",
  ""Fear element in frame 59"": ""a child's fear of the dark"",
  ""Caption of frame 60"": ""a man is opening the door of a house"",
  ""Fear element in frame 60"": ""a doorknob with a broken handle"",
  ""Caption of frame 61"": ""a man is sitting in a wheelchair"",
  ""Fear element in frame 61"": ""a man in a wheelchair with a broken arm"",
  ""Caption of frame 62"": ""a woman is standing in the doorway"",
  ""Fear element in frame 62"": ""a woman in a blue dress standing in the doorway"",
  ""Caption of frame 63"": ""a woman is in a hospital bed"",
  ""Fear element in frame 63"": ""person, person, person, person, person"",
  ""Caption of frame 65"": ""a man is in a hospital bed"",
  ""Fear element in frame 65"": ""a man in a hospital bed with a knife"",
  ""Caption of frame 67"": ""a man is sitting by a window"",
  ""Fear element in frame 67"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 68"": ""a man is typing on a typewriter"",
  ""Fear element in frame 68"": ""a typewriter - person stock videos & royalty-free footage"",
  ""Caption of frame 69"": ""a woman is talking to a man"",
  ""Fear element in frame 69"": ""a woman's screams"",
  ""Caption of frame 70"": ""a woman is sitting in a chair"",
  ""Fear element in frame 70"": ""a woman sitting alone in a chair"",
  ""Caption of frame 71"": ""a woman is holding a piece of paper"",
  ""Fear element in frame 71"": ""person, person, person, person, person"",
  ""Caption of frame 72"": ""a woman is standing in a doorway"",
  ""Fear element in frame 72"": ""a woman in a gray sweater standing in a doorway"",
  ""Caption of frame 74"": ""a woman is eating at a table"",
  ""Fear element in frame 74"": ""person, person, person, person, person"",
  ""Caption of frame 75"": ""a woman is holding a glass of wine"",
  ""Fear element in frame 75"": ""a woman holding a glass of wine"",
  ""Caption of frame 77"": ""a man is holding a glass of wine"",
  ""Fear element in frame 77"": ""a candle in a glass of wine"",
  ""Caption of frame 78"": ""an old typewriter is writing a letter"",
  ""Fear element in frame 78"": ""a typewriter with a letter on it"",
  ""Caption of frame 79"": ""a man is writing on a typewriter"",
  ""Fear element in frame 79"": ""a typewriter in a dark room"",
  ""Caption of frame 80"": ""a woman is walking into a room"",
  ""Fear element in frame 80"": ""a woman in a red robe"",
  ""Caption of frame 81"": ""a woman in a plaid shirt is staring"",
  ""Fear element in frame 81"": ""person, person, person, person, person"",
  ""Caption of frame 82"": ""a man is staring at the camera"",
  ""Fear element in frame 82"": ""a man in a red plaid shirt"",
  ""Caption of frame 83"": ""there is a water tower in the snow"",
  ""Fear element in frame 83"": ""a water tower in the middle of the night"",
  ""Caption of frame 85"": ""a man is staring at a camera"",
  ""Fear element in frame 85"": ""a man in a red plaid shirt"",
  ""Caption of frame 86"": ""a man is in a hospital bed"",
  ""Fear element in frame 86"": ""a man laying in a bed"",
  ""Caption of frame 87"": ""a man is laying in bed with a knife"",
  ""Fear element in frame 87"": ""person, person, person, person, person, person"",
  ""Caption of frame 88"": ""a man is putting a needle in his arm"",
  ""Fear element in frame 88"": ""a needle being inserted into the arm"",
  ""Caption of frame 89"": ""a woman is making a funny face"",
  ""Fear element in frame 89"": ""a woman's screams"",
  ""Caption of frame 90"": ""a woman is putting her finger in her mouth"",
  ""Fear element in frame 90"": ""a woman's fingernail"",
  ""Caption of frame 91"": ""a person is laying on a bed"",
  ""Fear element in frame 91"": ""a wooden plank on a bed"",
  ""Caption of frame 92"": ""a man is sleeping in a bed"",
  ""Fear element in frame 92"": ""a man in a bed with a knife"",
  ""Caption of frame 94"": ""a man is standing at a desk"",
  ""Fear element in frame 94"": ""a man in a cowboy hat"",
  ""Caption of frame 95"": ""a man is sitting in a library"",
  ""Fear element in frame 95"": ""person, person, person, person, person"",
  ""Caption of frame 96"": ""a man is standing in a store"",
  ""Fear element in frame 96"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 98"": ""a woman is holding a cigarette"",
  ""Fear element in frame 98"": ""person, person, person, person, person"",
  ""Caption of frame 99"": ""a man is standing in a room"",
  ""Fear element in frame 99"": ""the spider webs and spiders in the room"",
  ""Caption of frame 100"": ""a man is talking to a woman"",
  ""Fear element in frame 100"": ""person, person, person, person, person"",
  ""Caption of frame 101"": ""a woman is talking to a man"",
  ""Fear element in frame 101"": ""a woman in a cowboy hat"",
  ""Caption of frame 102"": ""two people are walking down a stairwell"",
  ""Fear element in frame 102"": ""a stairwell with no railing"",
  ""Caption of frame 103"": ""a man is standing in a hallway"",
  ""Fear element in frame 103"": ""a man in a white hat"",
  ""Caption of frame 104"": ""a man is sitting in a room"",
  ""Fear element in frame 104"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 105"": ""a woman is talking to a man"",
  ""Fear element in frame 105"": ""a woman in a brown jacket and a hat"",
  ""Caption of frame 106"": ""a person is laying on the ground"",
  ""Fear element in frame 106"": ""a person laying down on the ground"",
  ""Caption of frame 107"": ""a man is staring at the camera"",
  ""Fear element in frame 107"": ""fear of the dark, fear of the dark"",
  ""Caption of frame 108"": ""a man in a wheelchair is sitting at a desk"",
  ""Fear element in frame 108"": ""a woman in a wheelchair in the dark"",
  ""Caption of frame 109"": ""a hand is holding a revolver"",
  ""Fear element in frame 109"": ""a revolver in a woman's hand"",
  ""Caption of frame 110"": ""a woman is staring at the camera"",
  ""Fear element in frame 110"": ""a woman in a black turtleneck"",
  ""Caption of frame 111"": ""a man is sitting at a table"",
  ""Fear element in frame 111"": ""the presence of a child in the room"",
  ""Caption of frame 112"": ""a woman is crying over a fire"",
  ""Fear element in frame 112"": ""fire - fire stock videos & royalty-free footage"",
  ""Caption of frame 113"": ""a man is making a funny face"",
  ""Fear element in frame 113"": ""a man's screams"",
  ""Caption of frame 115"": ""a man is laying on the floor"",
  ""Fear element in frame 115"": ""a man with a bloody face"",
  ""Caption of frame 116"": ""a man is laying on the floor"",
  ""Fear element in frame 116"": ""person, person, person, person, person"",
  ""Caption of frame 117"": ""a man is laying on the floor"",
  ""Fear element in frame 117"": ""the presence of a dead body in the room"",
  ""Caption of frame 118"": ""a man is laying on the stairs"",
  ""Fear element in frame 118"": ""a dead body on a dark staircase"",
  ""Caption of frame 119"": ""a man is sitting at a table"",
  ""Fear element in frame 119"": ""a man sitting alone at a table""
}"|The presence of fear elements such as fear of the dark, spiders in a room, a person laying on the ground, a revolver in a woman's hand, a man with a bloody face, and the presence of a dead body in the room suggests that the movie contains themes that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears. These elements evoke a sense of adult fear and concern.||
no|no|tt0100157_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The trope `Not So Different` involves characters realizing they have more in common than they initially thought. The information provided does not suggest any similarities being discovered between characters in the movie.||
no|no|tt0100157_32|Eye Scream|"Is the trope ""Eye Scream"", which means ""When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the 
invasion of the eye sockets by a foreign body."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_32(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Eye Scream
    # Definition: When the creator of a work takes advantage of our Primal Fear of having something utterly horrible happen to our eyes, usually involving the invasion of the eye sockets by a foreign body.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential instances of eye-related horror or trauma.
    # 2. Contextual Analysis: Look for visual cues or actions that suggest eye-related scenes.
    # 3. Detecting Eye Scream: Identify scenes where characters' eyes are in danger or being harmed.
    # 4. Answer Selection: Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for eye-related horror or trauma
        eye_horror_query = frame.simple_query(""Is there any eye-related horror or trauma in this scene?"", to_yesno=True)
        
        if ""yes"" in eye_horror_query.lower():
            # If eye-related horror is detected, gather more information
            eye_scene_description = frame.simple_query(""Describe the eye-related scene in detail."")
            info[f""Eye-related scene in frame {i}""] = eye_scene_description

    # Use the select_answer API to determine if the ""Eye Scream"" trope is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Eye-related scene in frame 0"": ""the eye-related scene is a scene in which a lion's eye is shown"",
  ""Eye-related scene in frame 1"": ""a man is holding a briefcase in his hand"",
  ""Eye-related scene in frame 3"": ""a man is driving a car in the snow"",
  ""Eye-related scene in frame 4"": ""the eye-related scene is a scene in the movie"",
  ""Eye-related scene in frame 5"": ""this is a close up of a person's eye"",
  ""Eye-related scene in frame 6"": ""the eye-related scene in the movie is a scene in which a woman is sitting in a chair and looking at her eye"",
  ""Eye-related scene in frame 8"": ""the eye-related scene takes place in the middle of a snowstorm"",
  ""Eye-related scene in frame 9"": ""a person's eye is covered in snow"",
  ""Eye-related scene in frame 10"": ""the eye-related scene is a scene in which a woman is sitting in a living room"",
  ""Eye-related scene in frame 11"": ""the eye-related scene is a scene in which a woman stares at her own eye"",
  ""Eye-related scene in frame 12"": ""a man is lying on a bed with bandages on his legs"",
  ""Eye-related scene in frame 13"": ""the eye-related scene in the movie is a scene in which person's character, person"",
  ""Eye-related scene in frame 14"": ""the eye-related scene is a scene in which a cowboy is talking on the phone"",
  ""Eye-related scene in frame 15"": ""the scene in which the woman is looking at her own eye"",
  ""Eye-related scene in frame 16"": ""a woman in a brown dress is standing in front of a door"",
  ""Eye-related scene in frame 17"": ""the scene in which person is laying in a hospital bed"",
  ""Eye-related scene in frame 18"": ""the eye-related scene takes place in a cabin in the woods"",
  ""Eye-related scene in frame 19"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 20"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 21"": ""the eye scene is a scene in which a man and a woman are driving in a car"",
  ""Eye-related scene in frame 22"": ""a woman is standing in the snow with her eyes closed"",
  ""Eye-related scene in frame 23"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 24"": ""the eye scene is a scene in the movie where a woman's eye is injured"",
  ""Eye-related scene in frame 25"": ""the eye-related scene is a scene in which a man is in a hospital bed"",
  ""Eye-related scene in frame 26"": ""the scene in which the man is laying in bed with his eyes closed"",
  ""Eye-related scene in frame 28"": ""the scene in which a woman is drinking milk"",
  ""Eye-related scene in frame 29"": ""the eye-related scene is a scene in which a man is in a dark room"",
  ""Eye-related scene in frame 30"": ""the eye-related scene is a scene in which a man is stabbed in the eye"",
  ""Eye-related scene in frame 31"": ""the scene in which the woman's eye is smashed"",
  ""Eye-related scene in frame 32"": ""the eye-related scene is a scene in which a man is in a hospital bed"",
  ""Eye-related scene in frame 33"": ""the scene in which person is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 34"": ""the scene in which person is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 35"": ""the eye-related scene is a scene in which a woman's eyes are smashed"",
  ""Eye-related scene in frame 36"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 37"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 38"": ""the eye-related scene is a scene in which a woman stares at her own eye"",
  ""Eye-related scene in frame 39"": ""a man is lying in a hospital bed with a broken eye"",
  ""Eye-related scene in frame 40"": ""the scene in which person's eye is burned"",
  ""Eye-related scene in frame 41"": ""the eye scene is a scene in which a woman is in a room with a bed and a mirror"",
  ""Eye-related scene in frame 42"": ""a man is lying in a hospital bed"",
  ""Eye-related scene in frame 43"": ""a man and a woman are talking on a television"",
  ""Eye-related scene in frame 44"": ""close up of a man's eye"",
  ""Eye-related scene in frame 45"": ""the scene in which person's eye is removed"",
  ""Eye-related scene in frame 47"": ""the scene in which person's eye is removed"",
  ""Eye-related scene in frame 48"": ""a person's eye is drawn to a piece of paper"",
  ""Eye-related scene in frame 49"": ""the eye-related scene is a scene in which a man is shot in the eye"",
  ""Eye-related scene in frame 50"": ""describe the eye-related scene in detail,"",
  ""Eye-related scene in frame 51"": ""a woman in a wheelchair with a broken eye"",
  ""Eye-related scene in frame 52"": ""the scene in which the man is in a wheelchair"",
  ""Eye-related scene in frame 53"": ""the eye-related scene is a scene in which a man is sitting in a wheelchair"",
  ""Eye-related scene in frame 54"": ""a penguin and a cow in the snow"",
  ""Eye-related scene in frame 55"": ""a man in a wheelchair sits in a room"",
  ""Eye-related scene in frame 56"": ""the scene in which a man in a wheelchair tries to open his eye"",
  ""Eye-related scene in frame 57"": ""the eye scene is a scene in which person's character looks at a snowy hillside"",
  ""Eye-related scene in frame 59"": ""the eye-related scene in the movie is a scene in which a man is walking in the snow"",
  ""Eye-related scene in frame 60"": ""the scene in which person's eye is smashed"",
  ""Eye-related scene in frame 61"": ""the eye-related scene is a scene in which a man sits in a wheelchair"",
  ""Eye-related scene in frame 62"": ""the eye-related scene in 'the shining'"",
  ""Eye-related scene in frame 63"": ""the eye scene is a scene in which a woman is lying on a bed with her eyes closed"",
  ""Eye-related scene in frame 65"": ""the eye-related scene is a scene in which a man is in a hospital bed"",
  ""Eye-related scene in frame 67"": ""the eye-related scene is a scene in which a man is sitting in front of a window"",
  ""Eye-related scene in frame 68"": ""the eye-related scene is a scene in which a man sits at a typewriter"",
  ""Eye-related scene in frame 69"": ""the eye-related scene is a scene where a woman is talking to another woman"",
  ""Eye-related scene in frame 70"": ""the scene in which a woman is sitting in a chair and reading a book"",
  ""Eye-related scene in frame 71"": ""the eye-related scene in the movie is a scene in which a woman is sitting in a living room"",
  ""Eye-related scene in frame 72"": ""the scene in which the woman's eye is smashed"",
  ""Eye-related scene in frame 73"": ""the scene in which he tries to open his eyes"",
  ""Eye-related scene in frame 74"": ""the eye-related scene in the movie person, person, person, person"",
  ""Eye-related scene in frame 75"": ""the eye-related scene is a scene in which a woman holds a glass of wine"",
  ""Eye-related scene in frame 76"": ""the eye-related scene is a scene in which robert de niro's character robert de niro's character robert"",
  ""Eye-related scene in frame 77"": ""the eye-related scene in the movie is a scene in which a man holds a glass of wine"",
  ""Eye-related scene in frame 78"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 79"": ""the eye-related scene is a scene in which a man sits at a typewriter"",
  ""Eye-related scene in frame 80"": ""the scene is a montage of eye shots"",
  ""Eye-related scene in frame 81"": ""the scene in which the woman's eye is injured"",
  ""Eye-related scene in frame 82"": ""the eye-related scene is a scene in which a man stares at his own eye"",
  ""Eye-related scene in frame 83"": ""the eye scene is a scene in which a character looks through a window"",
  ""Eye-related scene in frame 84"": ""the eye-related scene is a scene in which a character is looking at something"",
  ""Eye-related scene in frame 85"": ""the eye-related scene is a scene in which a man stares at his own eye"",
  ""Eye-related scene in frame 86"": ""the scene in which the man is laying in a hospital bed"",
  ""Eye-related scene in frame 87"": ""the eye-related scene is a scene in which a man is lying in bed with a knife"",
  ""Eye-related scene in frame 89"": ""the eye-related scene is a scene in which a woman's eyes are swollen"",
  ""Eye-related scene in frame 90"": ""the eye-related scene in the movie is a scene in which a woman is looking at her eye"",
  ""Eye-related scene in frame 91"": ""the eye-related scene in the movie is a scene in which a person's eye is removed"",
  ""Eye-related scene in frame 92"": ""a man is lying on a bed with his eyes closed"",
  ""Eye-related scene in frame 93"": ""the scene in which a man is shot in the eye"",
  ""Eye-related scene in frame 94"": ""the scene in which person's eye is smashed by a bullet"",
  ""Eye-related scene in frame 95"": ""the scene in which the old man's eyes are removed"",
  ""Eye-related scene in frame 96"": ""the eye scene is a scene in which a man is in a grocery store"",
  ""Eye-related scene in frame 97"": ""the scene in which the old man's eye is removed"",
  ""Eye-related scene in frame 98"": ""the scene in which a woman slits her own eye"",
  ""Eye-related scene in frame 99"": ""the eye-related scene in the movie is a scene in which a man is stabbed with a knife"",
  ""Eye-related scene in frame 100"": ""the eye-related scene is a scene in which a man and a woman look at each other"",
  ""Eye-related scene in frame 101"": ""the eye-related scene is a scene in which a woman is talking to a man in a room"",
  ""Eye-related scene in frame 102"": ""the eye-related scene is a scene in which a man and woman are walking down a staircase"",
  ""Eye-related scene in frame 103"": ""the eye scene is a scene in which a man in a cowboy hat and a cowboy hat with a cowboy hat on walks into a room"",
  ""Eye-related scene in frame 104"": ""the eye-related scene is a scene in which a man is sitting in a room"",
  ""Eye-related scene in frame 105"": ""the eye-related scene is a scene in which a woman stares into the camera"",
  ""Eye-related scene in frame 107"": ""the eye-related scene is a scene in the film where a character looks at his own eye"",
  ""Eye-related scene in frame 108"": ""the scene in which a man in a wheelchair sits at a desk in a dark room"",
  ""Eye-related scene in frame 109"": ""a woman's hand holding a revolver"",
  ""Eye-related scene in frame 111"": ""the eye-related scene is a scene in which a man slits his own eye"",
  ""Eye-related scene in frame 112"": ""- eye stock videos & royalty-free footage"",
  ""Eye-related scene in frame 113"": ""a man in a green shirt is laying on the floor with his eyes wide open"",
  ""Eye-related scene in frame 115"": ""the scene in which a man is stabbed in the eye"",
  ""Eye-related scene in frame 116"": ""the scene in which the man is laying on the floor with his eyes closed"",
  ""Eye-related scene in frame 117"": ""the eye-related scene is a scene in which a man is laying on the floor"",
  ""Eye-related scene in frame 118"": ""the eye scene is a scene in the movie ''"",
  ""Eye-related scene in frame 119"": ""the scene in which the man is looking at his own eye""
}"|Although there are multiple scenes involving eyes in the movie, the description does not match the specific trope of 'Eye Scream', which involves a foreign object invading the eye socket. The scenes described do not indicate any instances of this trope being relevant||
yes|no|tt0100157_46|Screw This, I'm Outta Here!|"Is the trope ""Screw This, I'm Outta Here!"", which means ""Screw you guys, I'm going home."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_46(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Screw This, I'm Outta Here!
    # Definition: A character abruptly leaves a situation, expressing frustration or disinterest.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for signs of a character leaving abruptly.
    # 2. Behavior Analysis: Look for visual cues like walking away or expressions of frustration.
    # 3. Contextual Analysis: Consider the context to determine if the departure aligns with the trope.
    # 4. Answer Selection: Use select_answer to choose the most likely answer based on the analysis.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for signs of a character leaving abruptly
        departure_query = frame.simple_query(""Is there a character leaving abruptly?"", to_yesno=True)
        
        if ""yes"" in departure_query.lower():
            # Collect information about the departure event
            departure_description = frame.simple_query(""Describe the departure event in detail."")
            info[f""Departure in {i} th frame""] = departure_description

    # Answer the query based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Departure in 0 th frame"": ""describe the departure event in detail - metro goldwyn mayer"",
  ""Departure in 1 th frame"": ""a man opens a brown briefcase"",
  ""Departure in 2 th frame"": ""a plane takes off from a runway"",
  ""Departure in 3 th frame"": ""a man is driving a car in the snow"",
  ""Departure in 4 th frame"": ""describe the departure event in detail person, person, person"",
  ""Departure in 5 th frame"": ""describe the departure event in detail, including:"",
  ""Departure in 6 th frame"": ""the departure event in detail''"",
  ""Departure in 7 th frame"": ""i was able to get out of the snow"",
  ""Departure in 8 th frame"": ""a man is thrown out of a plane"",
  ""Departure in 9 th frame"": ""a man is preparing to leave a boat"",
  ""Departure in 10 th frame"": ""a woman leaves a room in the film"",
  ""Departure in 11 th frame"": ""a woman leaves a room in the film"",
  ""Departure in 12 th frame"": ""i woke up in the middle of the night in a hospital"",
  ""Departure in 13 th frame"": ""person's departure from the office in person"",
  ""Departure in 14 th frame"": ""person leaves the office in person's truck"",
  ""Departure in 15 th frame"": ""the departure event is a departure from a person's life"",
  ""Departure in 16 th frame"": ""a woman leaves a room in the house"",
  ""Departure in 17 th frame"": ""person leaves the hospital in a hospital bed"",
  ""Departure in 18 th frame"": ""person and person's departure from the cabin"",
  ""Departure in 19 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 20 th frame"": ""person, person, person, person, person"",
  ""Departure in 21 th frame"": ""person and person drive away in a truck"",
  ""Departure in 22 th frame"": ""a woman is seen standing in the snow"",
  ""Departure in 23 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 24 th frame"": ""person leaves the house in a cab"",
  ""Departure in 25 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 26 th frame"": ""person's departure from a hospital bed"",
  ""Departure in 27 th frame"": ""it was a snowy evening and we were leaving"",
  ""Departure in 28 th frame"": ""person's character, person, leaves the house"",
  ""Departure in 29 th frame"": ""a man leaves a room in the house"",
  ""Departure in 30 th frame"": ""the departure event'' is a scene in the movie ''the departure''"",
  ""Departure in 31 th frame"": ""person, person, person, person, person"",
  ""Departure in 32 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 33 th frame"": ""a man leaves a room with a knife"",
  ""Departure in 34 th frame"": ""a man leaves a room with a woman"",
  ""Departure in 35 th frame"": ""the departure'' is a scene in the movie the departure''"",
  ""Departure in 36 th frame"": ""- describe the departure event in detail stock videos & royalty-free footage"",
  ""Departure in 37 th frame"": ""person, person, person, person, person"",
  ""Departure in 38 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 39 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 40 th frame"": ""person's character, person, leaves the house"",
  ""Departure in 41 th frame"": ""person leaves the room and walks to the door"",
  ""Departure in 42 th frame"": ""a man leaves a hospital in a wheelchair"",
  ""Departure in 43 th frame"": ""person's departure from the tv show"",
  ""Departure in 44 th frame"": ""describe the departure event in detail, in detail"",
  ""Departure in 45 th frame"": ""person leaves the house with a typewriter"",
  ""Departure in 46 th frame"": ""i woke up in the middle of the night to find the door open"",
  ""Departure in 47 th frame"": ""person's departure is a departure from her life"",
  ""Departure in 48 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 49 th frame"": ""he leaves his wife and daughter at the airport"",
  ""Departure in 50 th frame"": ""describe the departure event in detail - wikipedia"",
  ""Departure in 51 th frame"": ""a person leaves a room in a wheelchair"",
  ""Departure in 52 th frame"": ""a man leaves a room in a wheelchair"",
  ""Departure in 53 th frame"": ""he leaves the house in a wheelchair"",
  ""Departure in 54 th frame"": ""a penguin and a cow are seen on a bed"",
  ""Departure in 55 th frame"": ""a man in a wheelchair leaves the house"",
  ""Departure in 56 th frame"": ""a man in a wheelchair leaves a house"",
  ""Departure in 57 th frame"": ""a group of people leave a cabin"",
  ""Departure in 58 th frame"": ""a woman leaves a cabin in the snow"",
  ""Departure in 59 th frame"": ""a young man leaves his home in the snow"",
  ""Departure in 60 th frame"": ""the door is opened and a person leaves"",
  ""Departure in 61 th frame"": ""he leaves the house in a wheelchair"",
  ""Departure in 62 th frame"": ""a woman leaves a room in the house"",
  ""Departure in 63 th frame"": ""person, person, person, person, person"",
  ""Departure in 64 th frame"": ""a skier leaves a ski lodge"",
  ""Departure in 65 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 66 th frame"": ""describe the departure event in detail, in detail"",
  ""Departure in 67 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 68 th frame"": ""- person stock videos & royalty-free footage"",
  ""Departure in 69 th frame"": ""a man leaves a woman in a car"",
  ""Departure in 70 th frame"": ""the departure event'' is a departure event in the film"",
  ""Departure in 71 th frame"": ""person leaves the house in a cab"",
  ""Departure in 72 th frame"": ""a woman leaves a room in the house"",
  ""Departure in 73 th frame"": ""person and person leave the house in a helicopter"",
  ""Departure in 74 th frame"": ""person, person, person, person, person"",
  ""Departure in 75 th frame"": ""a woman leaves a party with her husband"",
  ""Departure in 76 th frame"": ""a dinner party at a mansion"",
  ""Departure in 77 th frame"": ""he leaves a glass of wine on the table"",
  ""Departure in 78 th frame"": ""describe the departure event in detail stock videos & royalty-free footage"",
  ""Departure in 79 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 80 th frame"": ""a man leaves a room with a woman"",
  ""Departure in 81 th frame"": ""person, person, person, person, person"",
  ""Departure in 82 th frame"": ""the departure event is a scene in the film"",
  ""Departure in 83 th frame"": ""a train leaves a station at night"",
  ""Departure in 84 th frame"": ""describe the details of the departure event in detail"",
  ""Departure in 85 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 86 th frame"": ""he leaves the hospital in a helicopter"",
  ""Departure in 87 th frame"": ""a man is stabbed with a knife"",
  ""Departure in 89 th frame"": ""the departure event'' is the departure of a person from a plane"",
  ""Departure in 90 th frame"": ""the departure event'' is a scene in the movie the departure''"",
  ""Departure in 91 th frame"": ""a man leaves a woman in a bed"",
  ""Departure in 92 th frame"": ""a man leaves a hospital in a wheelchair"",
  ""Departure in 93 th frame"": ""person's character, person, leaves the house"",
  ""Departure in 94 th frame"": ""person leaves the office and walks down the hallway"",
  ""Departure in 95 th frame"": ""describe the departure event in detail person, person, person"",
  ""Departure in 96 th frame"": ""a man leaves a shop with a suitcase"",
  ""Departure in 97 th frame"": ""a man leaves a hat shop"",
  ""Departure in 98 th frame"": ""person, person, person, person, person"",
  ""Departure in 99 th frame"": ""he leaves the house in a boat"",
  ""Departure in 100 th frame"": ""the departure event in detail''"",
  ""Departure in 101 th frame"": ""a man and woman leave a house"",
  ""Departure in 102 th frame"": ""person and person leave the house in a car"",
  ""Departure in 103 th frame"": ""the departure event in detail''"",
  ""Departure in 104 th frame"": ""a man leaves a building in a helicopter"",
  ""Departure in 105 th frame"": ""the departure event'' the departure event''"",
  ""Departure in 106 th frame"": ""a man is laying on the ground"",
  ""Departure in 107 th frame"": ""describe the departure event in detail person, person"",
  ""Departure in 108 th frame"": ""a man in a wheelchair leaves the room"",
  ""Departure in 109 th frame"": ""a woman's hand holding a revolver"",
  ""Departure in 110 th frame"": ""describe the departure event in detail in the movie"",
  ""Departure in 111 th frame"": ""a man is seen leaving a restaurant"",
  ""Departure in 112 th frame"": ""a young woman leaves a hotel room"",
  ""Departure in 113 th frame"": ""- describe the departure event in detail - leave stock videos"",
  ""Departure in 114 th frame"": ""describe the departure event in a detailed way"",
  ""Departure in 115 th frame"": ""a man is stabbed with a knife"",
  ""Departure in 116 th frame"": ""a man leaves a house in the woods"",
  ""Departure in 117 th frame"": ""a group of people leave a house"",
  ""Departure in 118 th frame"": ""a stairwell leading to a room"",
  ""Departure in 119 th frame"": ""a man leaves a restaurant with his wife""
}"|The description of various departure events in different settings and contexts suggests that the trope `Screw This, I'm Outta Here!` may be relevant to the movie as it involves a character expressing a sudden decision to abandon a situation or task, often accompanied by a sense of frustration or resignation. The scenes described indicate multiple instances of characters leaving different places, which aligns with the essence of the trope.||
no|no|tt0100157_47|Kick the Dog|"Is the trope ""Kick the Dog"", which means ""When a character does something evil for no apparent gain, because the author wants to demonstrate that he's not a nice guy and shift 
audience sympathy away from him."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_47(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Kick the Dog
    # Definition: An act of cruelty by a character, typically towards a more vulnerable or defenseless entity, to establish the character's malevolence
    # Thought: The trope detection involves three steps:
    # 1. Context Information Collection: To observe attacker's malevolence and victim's defenseless entity, we need to concern action and event in adjacent frames and use them as context to understand the story
    # 2. Event Observation: ""Kick the Dog"" would present in attack event within a frame. Use the context from first step as condition and query more detail in advance    
    # 3. Answer Selection: With information collected from second step, we leave the reasoning and question answering to select_answer api
    video_segment = VideoSegment(video, annotation)
    # Create a info dictionary, which would later pass to select_answer api
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # understanding current frame with context information
        caption_query = ""What is happening in the scene? please answer with at least 10 words""
        caption = frame.simple_query(caption_query)
        # check if there is any potential attack event
        has_attack_event = frame.llm_query(f""Is there any potential attack event in description '{caption}'?"", to_yesno=True)
        if 'yes' in has_attack_event.lower():
            # query the event in detail
            attack_event_query = ""What attack event is in the scene and what action and emotion does attacker and victim have, please answer with at least 40 words""     
            attack_event_description = frame.simple_query(attack_event_query)
            info[f""Attack event in {i} th frame""] = attack_event_description
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Attack event in 8 th frame"": ""a man is stabbed in the neck"",
  ""Attack event in 87 th frame"": ""the victim is stabbed with a knife"",
  ""Attack event in 88 th frame"": ""a man is cutting a man's arm"",
  ""Attack event in 109 th frame"": ""a woman is shot with a gun""
}"|The trope `Kick the Dog` involves a character doing something evil for no apparent gain to demonstrate they are not a nice person. In this case, the violent actions depicted in the frames are likely not done for no apparent gain, but rather as part of the plot or character development||
yes|no|tt0100157_62|Blatant Lies|"Is the trope ""Blatant Lies"", which means ""A glaringly obvious lie."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_62(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Blatant Lies
    # Definition: A glaringly obvious lie.
    # Thought Process:
    # 1. Frame Selection: Analyze frames for instances where characters make statements that are clearly false.
    # 2. Contextual Analysis: Look for cues such as character expressions or contradictory actions that indicate a lie.
    # 3. Answer Selection: Determine if the trope is relevant based on the presence of obvious lies in the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        # Check for instances of blatant lies in dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any blatant lies in the dialogue?"", to_yesno=True)
        # Check for visual cues of lies
        visual_cues = frame.simple_query(""Are there any visual cues indicating lies?"", to_yesno=True)
        if ""yes"" in dialogue_analysis or ""yes"" in visual_cues:
            info[f""Blatant lies detected in frame {i}""] = ""Yes""
    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Blatant lies detected in frame 0"": ""Yes"",
  ""Blatant lies detected in frame 1"": ""Yes"",
  ""Blatant lies detected in frame 2"": ""Yes"",
  ""Blatant lies detected in frame 3"": ""Yes"",
  ""Blatant lies detected in frame 4"": ""Yes"",
  ""Blatant lies detected in frame 5"": ""Yes"",
  ""Blatant lies detected in frame 6"": ""Yes"",
  ""Blatant lies detected in frame 8"": ""Yes"",
  ""Blatant lies detected in frame 9"": ""Yes"",
  ""Blatant lies detected in frame 10"": ""Yes"",
  ""Blatant lies detected in frame 11"": ""Yes"",
  ""Blatant lies detected in frame 12"": ""Yes"",
  ""Blatant lies detected in frame 13"": ""Yes"",
  ""Blatant lies detected in frame 14"": ""Yes"",
  ""Blatant lies detected in frame 15"": ""Yes"",
  ""Blatant lies detected in frame 16"": ""Yes"",
  ""Blatant lies detected in frame 17"": ""Yes"",
  ""Blatant lies detected in frame 18"": ""Yes"",
  ""Blatant lies detected in frame 19"": ""Yes"",
  ""Blatant lies detected in frame 20"": ""Yes"",
  ""Blatant lies detected in frame 21"": ""Yes"",
  ""Blatant lies detected in frame 22"": ""Yes"",
  ""Blatant lies detected in frame 23"": ""Yes"",
  ""Blatant lies detected in frame 24"": ""Yes"",
  ""Blatant lies detected in frame 25"": ""Yes"",
  ""Blatant lies detected in frame 26"": ""Yes"",
  ""Blatant lies detected in frame 28"": ""Yes"",
  ""Blatant lies detected in frame 29"": ""Yes"",
  ""Blatant lies detected in frame 30"": ""Yes"",
  ""Blatant lies detected in frame 31"": ""Yes"",
  ""Blatant lies detected in frame 32"": ""Yes"",
  ""Blatant lies detected in frame 33"": ""Yes"",
  ""Blatant lies detected in frame 34"": ""Yes"",
  ""Blatant lies detected in frame 35"": ""Yes"",
  ""Blatant lies detected in frame 36"": ""Yes"",
  ""Blatant lies detected in frame 37"": ""Yes"",
  ""Blatant lies detected in frame 38"": ""Yes"",
  ""Blatant lies detected in frame 39"": ""Yes"",
  ""Blatant lies detected in frame 40"": ""Yes"",
  ""Blatant lies detected in frame 41"": ""Yes"",
  ""Blatant lies detected in frame 42"": ""Yes"",
  ""Blatant lies detected in frame 43"": ""Yes"",
  ""Blatant lies detected in frame 44"": ""Yes"",
  ""Blatant lies detected in frame 45"": ""Yes"",
  ""Blatant lies detected in frame 46"": ""Yes"",
  ""Blatant lies detected in frame 47"": ""Yes"",
  ""Blatant lies detected in frame 48"": ""Yes"",
  ""Blatant lies detected in frame 49"": ""Yes"",
  ""Blatant lies detected in frame 50"": ""Yes"",
  ""Blatant lies detected in frame 51"": ""Yes"",
  ""Blatant lies detected in frame 52"": ""Yes"",
  ""Blatant lies detected in frame 53"": ""Yes"",
  ""Blatant lies detected in frame 54"": ""Yes"",
  ""Blatant lies detected in frame 55"": ""Yes"",
  ""Blatant lies detected in frame 56"": ""Yes"",
  ""Blatant lies detected in frame 57"": ""Yes"",
  ""Blatant lies detected in frame 58"": ""Yes"",
  ""Blatant lies detected in frame 59"": ""Yes"",
  ""Blatant lies detected in frame 60"": ""Yes"",
  ""Blatant lies detected in frame 61"": ""Yes"",
  ""Blatant lies detected in frame 62"": ""Yes"",
  ""Blatant lies detected in frame 63"": ""Yes"",
  ""Blatant lies detected in frame 64"": ""Yes"",
  ""Blatant lies detected in frame 65"": ""Yes"",
  ""Blatant lies detected in frame 67"": ""Yes"",
  ""Blatant lies detected in frame 68"": ""Yes"",
  ""Blatant lies detected in frame 69"": ""Yes"",
  ""Blatant lies detected in frame 70"": ""Yes"",
  ""Blatant lies detected in frame 71"": ""Yes"",
  ""Blatant lies detected in frame 72"": ""Yes"",
  ""Blatant lies detected in frame 73"": ""Yes"",
  ""Blatant lies detected in frame 74"": ""Yes"",
  ""Blatant lies detected in frame 75"": ""Yes"",
  ""Blatant lies detected in frame 76"": ""Yes"",
  ""Blatant lies detected in frame 77"": ""Yes"",
  ""Blatant lies detected in frame 78"": ""Yes"",
  ""Blatant lies detected in frame 79"": ""Yes"",
  ""Blatant lies detected in frame 80"": ""Yes"",
  ""Blatant lies detected in frame 81"": ""Yes"",
  ""Blatant lies detected in frame 82"": ""Yes"",
  ""Blatant lies detected in frame 83"": ""Yes"",
  ""Blatant lies detected in frame 84"": ""Yes"",
  ""Blatant lies detected in frame 85"": ""Yes"",
  ""Blatant lies detected in frame 86"": ""Yes"",
  ""Blatant lies detected in frame 87"": ""Yes"",
  ""Blatant lies detected in frame 89"": ""Yes"",
  ""Blatant lies detected in frame 90"": ""Yes"",
  ""Blatant lies detected in frame 91"": ""Yes"",
  ""Blatant lies detected in frame 92"": ""Yes"",
  ""Blatant lies detected in frame 93"": ""Yes"",
  ""Blatant lies detected in frame 94"": ""Yes"",
  ""Blatant lies detected in frame 95"": ""Yes"",
  ""Blatant lies detected in frame 96"": ""Yes"",
  ""Blatant lies detected in frame 97"": ""Yes"",
  ""Blatant lies detected in frame 98"": ""Yes"",
  ""Blatant lies detected in frame 99"": ""Yes"",
  ""Blatant lies detected in frame 100"": ""Yes"",
  ""Blatant lies detected in frame 101"": ""Yes"",
  ""Blatant lies detected in frame 102"": ""Yes"",
  ""Blatant lies detected in frame 103"": ""Yes"",
  ""Blatant lies detected in frame 104"": ""Yes"",
  ""Blatant lies detected in frame 105"": ""Yes"",
  ""Blatant lies detected in frame 106"": ""Yes"",
  ""Blatant lies detected in frame 107"": ""Yes"",
  ""Blatant lies detected in frame 108"": ""Yes"",
  ""Blatant lies detected in frame 109"": ""Yes"",
  ""Blatant lies detected in frame 110"": ""Yes"",
  ""Blatant lies detected in frame 111"": ""Yes"",
  ""Blatant lies detected in frame 112"": ""Yes"",
  ""Blatant lies detected in frame 113"": ""Yes"",
  ""Blatant lies detected in frame 115"": ""Yes"",
  ""Blatant lies detected in frame 116"": ""Yes"",
  ""Blatant lies detected in frame 117"": ""Yes"",
  ""Blatant lies detected in frame 118"": ""Yes"",
  ""Blatant lies detected in frame 119"": ""Yes""
}"|The presence of blatant lies in multiple frames suggests that characters in the movie are consistently telling obvious lies, which aligns with the definition of the trope 'Blatant Lies'||
yes|yes|tt0100157_71|Irony|"Is the trope ""Irony"", which means ""The intended meaning is an inversion of the plain meaning."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_71(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Irony
    # Definition: The intended meaning is an inversion of the plain meaning.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations where the intended meaning is opposite to the plain meaning.
    # 2. Contextual Analysis: Look for scenarios where actions or events contradict their expected outcomes.
    # 3. Irony Detection: Identify instances where there is a clear discrepancy between what is expected and what actually occurs.
    # 4. Answer Selection: Use the select_answer API to determine if the trope of Irony is relevant to the movie based on the detected instances.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, which can provide context for detecting irony
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # Analyze the dialogue for any ironic statements or situations
        irony_detection = frame.llm_query(subtitles_info + ""Is there any irony in the dialogue?"", to_yesno=True)
        
        # Check for visual cues or actions that suggest irony
        visual_irony_detection = frame.simple_query(""Is there any visual irony?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests irony, collect this information
        if ""yes"" in irony_detection or ""yes"" in visual_irony_detection:
            info[f""Irony in dialogue at frame {i}""] = irony_detection
            info[f""Visual irony at frame {i}""] = visual_irony_detection
    
    # Use the collected information to determine if the trope of Irony is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Irony in dialogue at frame 0"": ""Yes"",
  ""Visual irony at frame 0"": ""yes - a lion in a movie theater"",
  ""Irony in dialogue at frame 1"": ""Yes"",
  ""Visual irony at frame 1"": ""'yes ', 'no"",
  ""Irony in dialogue at frame 3"": ""Yes"",
  ""Visual irony at frame 3"": ""yes - a man driving a car"",
  ""Irony in dialogue at frame 4"": ""Yes"",
  ""Visual irony at frame 4"": ""yes, there is irony in the title"",
  ""Irony in dialogue at frame 5"": ""Yes"",
  ""Visual irony at frame 5"": ""yes - i think there is a visual irony"",
  ""Irony in dialogue at frame 6"": ""Yes"",
  ""Visual irony at frame 6"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 7"": ""Yes"",
  ""Visual irony at frame 7"": ""ii. yes ii. no"",
  ""Irony in dialogue at frame 8"": ""Yes"",
  ""Visual irony at frame 8"": ""yes, he is laying in the snow"",
  ""Irony in dialogue at frame 9"": ""Yes"",
  ""Visual irony at frame 9"": ""'yes ', 'no"",
  ""Irony in dialogue at frame 10"": ""No"",
  ""Visual irony at frame 10"": ""yes - a woman wearing a sweater"",
  ""Irony in dialogue at frame 11"": ""No"",
  ""Visual irony at frame 11"": ""yes, the woman is wearing a sweater"",
  ""Irony in dialogue at frame 13"": ""No"",
  ""Visual irony at frame 13"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 14"": ""No"",
  ""Visual irony at frame 14"": ""yes, he is wearing a hat"",
  ""Irony in dialogue at frame 15"": ""Yes"",
  ""Visual irony at frame 15"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 16"": ""No"",
  ""Visual irony at frame 16"": ""yes, the woman is wearing a dress"",
  ""Irony in dialogue at frame 17"": ""Yes"",
  ""Visual irony at frame 17"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 18"": ""No"",
  ""Visual irony at frame 18"": ""yes, the man is wearing a hat"",
  ""Irony in dialogue at frame 19"": ""Yes"",
  ""Visual irony at frame 19"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 20"": ""No"",
  ""Visual irony at frame 20"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 21"": ""No"",
  ""Visual irony at frame 21"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 22"": ""No"",
  ""Visual irony at frame 22"": ""yes, the woman is standing in the snow"",
  ""Irony in dialogue at frame 23"": ""Yes"",
  ""Visual irony at frame 23"": ""yes, he is laying in a hospital bed"",
  ""Irony in dialogue at frame 24"": ""Yes"",
  ""Visual irony at frame 24"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 25"": ""Yes"",
  ""Visual irony at frame 25"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 26"": ""No"",
  ""Visual irony at frame 26"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 27"": ""Yes"",
  ""Visual irony at frame 27"": ""yes, the house is covered in snow"",
  ""Irony in dialogue at frame 28"": ""Yes"",
  ""Visual irony at frame 28"": ""yes, a woman drinking milk from a glass"",
  ""Irony in dialogue at frame 29"": ""Yes"",
  ""Visual irony at frame 29"": ""yes - a man in a dark room"",
  ""Irony in dialogue at frame 30"": ""Yes"",
  ""Visual irony at frame 30"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 31"": ""Yes"",
  ""Visual irony at frame 31"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 32"": ""Yes"",
  ""Visual irony at frame 32"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 33"": ""Yes"",
  ""Visual irony at frame 33"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 34"": ""No"",
  ""Visual irony at frame 34"": ""yes person is laying on top of a bed"",
  ""Irony in dialogue at frame 35"": ""No"",
  ""Visual irony at frame 35"": ""yes, the woman is wearing a plaid shirt"",
  ""Irony in dialogue at frame 36"": ""Yes"",
  ""Visual irony at frame 36"": ""yes - no stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 37"": ""No"",
  ""Visual irony at frame 37"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 38"": ""Yes"",
  ""Visual irony at frame 38"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 39"": ""Yes"",
  ""Visual irony at frame 39"": ""yes, a man in a hospital bed"",
  ""Irony in dialogue at frame 40"": ""No"",
  ""Visual irony at frame 40"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 41"": ""Yes"",
  ""Visual irony at frame 41"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 42"": ""No"",
  ""Visual irony at frame 42"": ""yes, he is in a hospital bed"",
  ""Irony in dialogue at frame 43"": ""No."",
  ""Visual irony at frame 43"": ""yes, a man in a suit is sitting on a television"",
  ""Irony in dialogue at frame 45"": ""No"",
  ""Visual irony at frame 45"": ""yes, the woman is holding a typewriter"",
  ""Irony in dialogue at frame 46"": ""Yes"",
  ""Visual irony at frame 46"": ""yes i think there is visual irony"",
  ""Irony in dialogue at frame 47"": ""No"",
  ""Visual irony at frame 47"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 48"": ""Yes"",
  ""Visual irony at frame 48"": ""yes i think there is some irony"",
  ""Irony in dialogue at frame 49"": ""Yes"",
  ""Visual irony at frame 49"": ""yes, he is wearing a red shirt"",
  ""Irony in dialogue at frame 50"": ""Yes"",
  ""Visual irony at frame 50"": ""yes - a wooden door in a room"",
  ""Irony in dialogue at frame 51"": ""Yes"",
  ""Visual irony at frame 51"": ""yes - a person in a wheelchair"",
  ""Irony in dialogue at frame 52"": ""Yes"",
  ""Visual irony at frame 52"": ""yes, he is in a wheelchair"",
  ""Irony in dialogue at frame 53"": ""Yes"",
  ""Visual irony at frame 53"": ""yes, he is in a wheelchair"",
  ""Irony in dialogue at frame 54"": ""Yes"",
  ""Visual irony at frame 54"": ""yes, a penguin and a cow"",
  ""Irony in dialogue at frame 55"": ""Yes"",
  ""Visual irony at frame 55"": ""yes, the man is in a wheelchair"",
  ""Irony in dialogue at frame 56"": ""Yes"",
  ""Visual irony at frame 56"": ""yes, the man is in a wheelchair"",
  ""Irony in dialogue at frame 57"": ""Yes"",
  ""Visual irony at frame 57"": ""yes, there is a water tower in the snow"",
  ""Irony in dialogue at frame 59"": ""Yes"",
  ""Visual irony at frame 59"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 60"": ""Yes"",
  ""Visual irony at frame 60"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 61"": ""No"",
  ""Visual irony at frame 61"": ""yes - person stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 62"": ""Yes"",
  ""Visual irony at frame 62"": ""yes, a woman in a blue dress standing in the doorway"",
  ""Irony in dialogue at frame 63"": ""Yes"",
  ""Visual irony at frame 63"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 65"": ""Yes"",
  ""Visual irony at frame 65"": ""yes, he's wearing a scarf"",
  ""Irony in dialogue at frame 67"": ""Yes"",
  ""Visual irony at frame 67"": ""yes, he is wearing a scarf"",
  ""Irony in dialogue at frame 68"": ""No"",
  ""Visual irony at frame 68"": ""yes - person stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 69"": ""Yes"",
  ""Visual irony at frame 69"": ""yes, the woman is wearing a jacket"",
  ""Irony in dialogue at frame 70"": ""Yes"",
  ""Visual irony at frame 70"": ""yes, the woman is holding a book"",
  ""Irony in dialogue at frame 71"": ""Yes"",
  ""Visual irony at frame 71"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 72"": ""Yes"",
  ""Visual irony at frame 72"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 73"": ""Yes"",
  ""Visual irony at frame 73"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 74"": ""No"",
  ""Visual irony at frame 74"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 75"": ""Yes"",
  ""Visual irony at frame 75"": ""yes, the woman is holding a glass"",
  ""Irony in dialogue at frame 76"": ""No"",
  ""Visual irony at frame 76"": ""yes - a man is sitting at a table"",
  ""Irony in dialogue at frame 77"": ""Yes"",
  ""Visual irony at frame 77"": ""yes, he is holding a glass of wine"",
  ""Irony in dialogue at frame 78"": ""Yes"",
  ""Visual irony at frame 78"": ""yes - yes - yes - yes"",
  ""Irony in dialogue at frame 79"": ""Yes"",
  ""Visual irony at frame 79"": ""yes - a man writing on a typewriter"",
  ""Irony in dialogue at frame 80"": ""Yes"",
  ""Visual irony at frame 80"": ""yes, the woman is wearing a robe"",
  ""Irony in dialogue at frame 81"": ""No"",
  ""Visual irony at frame 81"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 82"": ""Yes"",
  ""Visual irony at frame 82"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 83"": ""Yes"",
  ""Visual irony at frame 83"": ""yes, there is a water tower"",
  ""Irony in dialogue at frame 84"": ""Yes"",
  ""Visual irony at frame 84"": ""yes - a red book with gold lettering"",
  ""Irony in dialogue at frame 85"": ""Yes"",
  ""Visual irony at frame 85"": ""yes, he is wearing a plaid shirt"",
  ""Irony in dialogue at frame 86"": ""Yes"",
  ""Visual irony at frame 86"": ""yes, a man in a hospital bed"",
  ""Irony in dialogue at frame 87"": ""Yes"",
  ""Visual irony at frame 87"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 88"": ""Yes"",
  ""Visual irony at frame 88"": ""ii. yes ii."",
  ""Irony in dialogue at frame 89"": ""No"",
  ""Visual irony at frame 89"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 90"": ""Yes"",
  ""Visual irony at frame 90"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 91"": ""Yes"",
  ""Visual irony at frame 91"": ""yes, but it's hard to tell"",
  ""Irony in dialogue at frame 92"": ""Yes"",
  ""Visual irony at frame 92"": ""yes, a man in a hospital bed"",
  ""Irony in dialogue at frame 93"": ""Yes"",
  ""Visual irony at frame 93"": ""yes person is wearing a cowboy hat"",
  ""Irony in dialogue at frame 94"": ""No"",
  ""Visual irony at frame 94"": ""yes, there is irony in this scene"",
  ""Irony in dialogue at frame 95"": ""Yes"",
  ""Visual irony at frame 95"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 96"": ""No"",
  ""Visual irony at frame 96"": ""yes, the man is standing in front of a store"",
  ""Irony in dialogue at frame 97"": ""Yes"",
  ""Visual irony at frame 97"": ""yes, he is wearing a hat"",
  ""Irony in dialogue at frame 98"": ""Yes"",
  ""Visual irony at frame 98"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 99"": ""Yes"",
  ""Visual irony at frame 99"": ""yes, there is some irony in the scene"",
  ""Irony in dialogue at frame 100"": ""Yes"",
  ""Visual irony at frame 100"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 101"": ""No"",
  ""Visual irony at frame 101"": ""yes, the woman is wearing a hat"",
  ""Irony in dialogue at frame 102"": ""No"",
  ""Visual irony at frame 102"": ""yes, the man is wearing a hat"",
  ""Irony in dialogue at frame 103"": ""No"",
  ""Visual irony at frame 103"": ""yes person, person, person, person, person"",
  ""Irony in dialogue at frame 104"": ""Yes"",
  ""Visual irony at frame 104"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 105"": ""No"",
  ""Visual irony at frame 105"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 106"": ""Yes"",
  ""Visual irony at frame 106"": ""yes - a person laying on the ground"",
  ""Irony in dialogue at frame 107"": ""Yes"",
  ""Visual irony at frame 107"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 108"": ""Yes"",
  ""Visual irony at frame 108"": ""yes person in a wheelchair in a dark room"",
  ""Irony in dialogue at frame 109"": ""Yes"",
  ""Visual irony at frame 109"": ""yes, the hand is holding a gun"",
  ""Irony in dialogue at frame 110"": ""Yes"",
  ""Visual irony at frame 110"": ""yes - a woman stares into the camera"",
  ""Irony in dialogue at frame 111"": ""Yes"",
  ""Visual irony at frame 111"": ""yes, he's wearing a green sweater"",
  ""Irony in dialogue at frame 112"": ""Yes"",
  ""Visual irony at frame 112"": ""yes - fire stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 113"": ""Yes"",
  ""Visual irony at frame 113"": ""yes - no stock videos & royalty-free footage"",
  ""Irony in dialogue at frame 115"": ""Yes"",
  ""Visual irony at frame 115"": ""yes, the man in the green shirt is laughing"",
  ""Irony in dialogue at frame 116"": ""Yes"",
  ""Visual irony at frame 116"": ""yes, no, no, no, no"",
  ""Irony in dialogue at frame 117"": ""Yes"",
  ""Visual irony at frame 117"": ""yes, but it's hard to tell"",
  ""Irony in dialogue at frame 118"": ""Yes"",
  ""Visual irony at frame 118"": ""yes, there is irony in the scene"",
  ""Irony in dialogue at frame 119"": ""No"",
  ""Visual irony at frame 119"": ""yes, he's wearing a tie""
}"|The presence of visual irony in various frames of the video, such as a lion in a movie theater, a person laying in the snow, a woman holding a typewriter, and a person in a wheelchair in a dark room, indicates that the trope of 'Irony' is relevant to the movie. Additionally, the mention of verbal irony in frame 104 further supports the presence of this trope in the film.||
yes|yes|tt0100157_73|Stealth Pun|"Is the trope ""Stealth Pun"", which means ""The writers put in a joke (almost always a pun), but never make or put in a Punch Line or explicit statement, hiding it in the set up of the joke. "", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_73(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Stealth Pun
    # Definition: A joke, typically a pun, is included by the writers but is not highlighted with a punchline or explicit statement. It's hidden within the setup of the joke, requiring the audience to notice and interpret it themselves.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame for potential visual or audio cues that might indicate a hidden joke or pun. This requires understanding both the context and the elements present in the scene.
    # 2. Contextual Analysis: Since the essence of a Stealth Pun lies in the setup and requires audience interpretation, we need to look for elements that are inconspicuously out of place or cleverly integrated into the context but might not be immediately obvious.
    # 3. Detecting Puns: This involves analyzing the text or dialogue for play on words, and visual elements for any visual puns or jokes that rely on the visual context but are not explicitly acknowledged in the video.
    # 4. Answer Selection: Use the select_answer API to determine the most probable answer based on the analyzed data, considering the subtlety and clever integration of puns within the video content.
    
    video_segment = VideoSegment(video, annotation)
    
    # Create an info dictionary to hold detected elements that might contribute to a Stealth Pun
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        
        # use llm_query to analyze dialogue
        dialogue_analysis = frame.llm_query(subtitles_info + ""Are there any puns in the dialogue?"", to_yesno=True)
        
        # use simple_query to analyze image
        visual_pun_analysis = frame.simple_query(""Are there any visual puns?"", to_yesno=True)
        
        # If either dialogue or visual analysis suggests a pun, collect this information
        if ""yes"" in dialogue_analysis or ""yes"" in visual_pun_analysis:
            info[f""Pun in dialogue at frame {i}""] = dialogue_analysis
            info[f""Visual pun at frame {i}""] = visual_pun_analysis
    
    # Since Stealth Puns are about subtlety and not explicitly pointing out the joke, we need to balance detection with the likelihood of an actual pun being present without explicit acknowledgment.
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Pun in dialogue at frame 0"": ""No"",
  ""Visual pun at frame 0"": ""yes, there is a lion in the logo"",
  ""Pun in dialogue at frame 1"": ""No"",
  ""Visual pun at frame 1"": ""'yes, no, no"",
  ""Pun in dialogue at frame 4"": ""No"",
  ""Visual pun at frame 4"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 5"": ""No"",
  ""Visual pun at frame 5"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 6"": ""No"",
  ""Visual pun at frame 6"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 8"": ""No"",
  ""Visual pun at frame 8"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 9"": ""No"",
  ""Visual pun at frame 9"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 10"": ""No"",
  ""Visual pun at frame 10"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 11"": ""No"",
  ""Visual pun at frame 11"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 12"": ""No"",
  ""Visual pun at frame 12"": "" yes ','no"",
  ""Pun in dialogue at frame 13"": ""No"",
  ""Visual pun at frame 13"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 14"": ""No"",
  ""Visual pun at frame 14"": ""yes'' yes''"",
  ""Pun in dialogue at frame 15"": ""No"",
  ""Visual pun at frame 15"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 16"": ""No"",
  ""Visual pun at frame 16"": "" yes ''  yes"",
  ""Pun in dialogue at frame 17"": ""No"",
  ""Visual pun at frame 17"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 18"": ""No"",
  ""Visual pun at frame 18"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 19"": ""No"",
  ""Visual pun at frame 19"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 20"": ""No"",
  ""Visual pun at frame 20"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 21"": ""No"",
  ""Visual pun at frame 21"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 23"": ""No"",
  ""Visual pun at frame 23"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 24"": ""No"",
  ""Visual pun at frame 24"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 25"": ""No"",
  ""Visual pun at frame 25"": ""yes - a man in a bed"",
  ""Pun in dialogue at frame 26"": ""No"",
  ""Visual pun at frame 26"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 28"": ""No"",
  ""Visual pun at frame 28"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 29"": ""No"",
  ""Visual pun at frame 29"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 30"": ""No"",
  ""Visual pun at frame 30"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 31"": ""No"",
  ""Visual pun at frame 31"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 32"": ""No"",
  ""Visual pun at frame 32"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 33"": ""No"",
  ""Visual pun at frame 33"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 34"": ""No"",
  ""Visual pun at frame 34"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 35"": ""No"",
  ""Visual pun at frame 35"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 36"": ""No"",
  ""Visual pun at frame 36"": ""yes - no stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 37"": ""No"",
  ""Visual pun at frame 37"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 38"": ""No"",
  ""Visual pun at frame 38"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 39"": ""No"",
  ""Visual pun at frame 39"": ""yes, there are visual puns throughout the film"",
  ""Pun in dialogue at frame 40"": ""No"",
  ""Visual pun at frame 40"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 41"": ""No"",
  ""Visual pun at frame 41"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 42"": ""No"",
  ""Visual pun at frame 42"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 43"": ""No"",
  ""Visual pun at frame 43"": ""yes, there are many visual puns in this episode"",
  ""Pun in dialogue at frame 44"": ""No"",
  ""Visual pun at frame 44"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 45"": ""No"",
  ""Visual pun at frame 45"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 46"": ""No"",
  ""Visual pun at frame 46"": ""yes i think there are visual puns"",
  ""Pun in dialogue at frame 47"": ""No"",
  ""Visual pun at frame 47"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 48"": ""No"",
  ""Visual pun at frame 48"": ""yes, there are a few visual puns"",
  ""Pun in dialogue at frame 49"": ""Yes"",
  ""Visual pun at frame 49"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 51"": ""No"",
  ""Visual pun at frame 51"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 52"": ""No"",
  ""Visual pun at frame 52"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 53"": ""No"",
  ""Visual pun at frame 53"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 54"": ""No"",
  ""Visual pun at frame 54"": ""yes, a penguin and a cow"",
  ""Pun in dialogue at frame 55"": ""No"",
  ""Visual pun at frame 55"": ""yes, there are many visual puns throughout the film"",
  ""Pun in dialogue at frame 56"": ""No"",
  ""Visual pun at frame 56"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 57"": ""No"",
  ""Visual pun at frame 57"": ""yes, there is a water tower in the snow"",
  ""Pun in dialogue at frame 58"": ""No"",
  ""Visual pun at frame 58"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 59"": ""No"",
  ""Visual pun at frame 59"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 60"": ""No"",
  ""Visual pun at frame 60"": ""yes, there is a visual pun in the title"",
  ""Pun in dialogue at frame 61"": ""No"",
  ""Visual pun at frame 61"": ""yes - person stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 62"": ""No"",
  ""Visual pun at frame 62"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 63"": ""No"",
  ""Visual pun at frame 63"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 64"": ""No"",
  ""Visual pun at frame 64"": ""i think so yes i think so"",
  ""Pun in dialogue at frame 65"": ""No"",
  ""Visual pun at frame 65"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 66"": ""No"",
  ""Visual pun at frame 66"": ""'yes, there are visual puns"",
  ""Pun in dialogue at frame 67"": ""No"",
  ""Visual pun at frame 67"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 68"": ""No"",
  ""Visual pun at frame 68"": ""yes - person stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 69"": ""No"",
  ""Visual pun at frame 69"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 70"": ""No"",
  ""Visual pun at frame 70"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 71"": ""No"",
  ""Visual pun at frame 71"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 72"": ""No"",
  ""Visual pun at frame 72"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 73"": ""No"",
  ""Visual pun at frame 73"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 74"": ""No"",
  ""Visual pun at frame 74"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 75"": ""No"",
  ""Visual pun at frame 75"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 76"": ""No"",
  ""Visual pun at frame 76"": ""yes - i think there are a few"",
  ""Pun in dialogue at frame 77"": ""No"",
  ""Visual pun at frame 77"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 78"": ""No"",
  ""Visual pun at frame 78"": ""yes - yes stock videos & footage"",
  ""Pun in dialogue at frame 79"": ""No"",
  ""Visual pun at frame 79"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 80"": ""No"",
  ""Visual pun at frame 80"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 81"": ""No"",
  ""Visual pun at frame 81"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 82"": ""No"",
  ""Visual pun at frame 82"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 83"": ""No"",
  ""Visual pun at frame 83"": ""yes, there are some visual puns"",
  ""Pun in dialogue at frame 84"": ""No"",
  ""Visual pun at frame 84"": ""yes, there are visual puns in the title"",
  ""Pun in dialogue at frame 85"": ""No"",
  ""Visual pun at frame 85"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 86"": ""No"",
  ""Visual pun at frame 86"": ""yes, there are visual puns in the film"",
  ""Pun in dialogue at frame 87"": ""No"",
  ""Visual pun at frame 87"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 89"": ""No"",
  ""Visual pun at frame 89"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 90"": ""No"",
  ""Visual pun at frame 90"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 91"": ""No"",
  ""Visual pun at frame 91"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 92"": ""No"",
  ""Visual pun at frame 92"": ""yes, a man in a bed"",
  ""Pun in dialogue at frame 93"": ""No"",
  ""Visual pun at frame 93"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 94"": ""No"",
  ""Visual pun at frame 94"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 95"": ""No"",
  ""Visual pun at frame 95"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 96"": ""No"",
  ""Visual pun at frame 96"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 97"": ""No"",
  ""Visual pun at frame 97"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 98"": ""No"",
  ""Visual pun at frame 98"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 99"": ""No"",
  ""Visual pun at frame 99"": "" yes ''  no"",
  ""Pun in dialogue at frame 100"": ""No"",
  ""Visual pun at frame 100"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 101"": ""No"",
  ""Visual pun at frame 101"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 102"": ""No"",
  ""Visual pun at frame 102"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 103"": ""No"",
  ""Visual pun at frame 103"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 104"": ""No"",
  ""Visual pun at frame 104"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 105"": ""No"",
  ""Visual pun at frame 105"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 106"": ""No"",
  ""Visual pun at frame 106"": ""yes, there are visual puns in the movie"",
  ""Pun in dialogue at frame 107"": ""No"",
  ""Visual pun at frame 107"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 108"": ""No"",
  ""Visual pun at frame 108"": ""yes person, person, person, person, person"",
  ""Pun in dialogue at frame 109"": ""No"",
  ""Visual pun at frame 109"": ""yes i think there are some visual puns"",
  ""Pun in dialogue at frame 110"": ""No"",
  ""Visual pun at frame 110"": ""yes - a woman in a turtleneck"",
  ""Pun in dialogue at frame 111"": ""No"",
  ""Visual pun at frame 111"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 112"": ""No"",
  ""Visual pun at frame 112"": ""yes - fire stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 113"": ""No"",
  ""Visual pun at frame 113"": ""yes - no stock videos & royalty-free footage"",
  ""Pun in dialogue at frame 115"": ""No"",
  ""Visual pun at frame 115"": ""yes, there are many visual puns"",
  ""Pun in dialogue at frame 116"": ""No"",
  ""Visual pun at frame 116"": ""yes, no, no, no, no"",
  ""Pun in dialogue at frame 117"": ""No"",
  ""Visual pun at frame 117"": ""yes, there are many visual puns in the movie"",
  ""Pun in dialogue at frame 118"": ""No"",
  ""Visual pun at frame 118"": ""yes, there are many visual puns in the film"",
  ""Pun in dialogue at frame 119"": ""No"",
  ""Visual pun at frame 119"": ""yes, there are visual puns in the movie""
}"|The movie contains various instances of visual puns and wordplay throughout, contributing to its comedic elements. The consistent presence of visual puns and plays on words aligns with the definition of the trope 'Stealth Pun', where jokes are hidden in the setup without an explicit punchline.||
|no|tt0100157_74|Bittersweet Ending|"Is the trope ""Bittersweet Ending"", which means ""When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some 
irrevocable loss has happened during the course of the events, and nothing will ever be the same again."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_74(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Bittersweet Ending
    # Definition: When victory came at a harsh price, when, for whatever reason, the heroes cannot fully enjoy the reward of their actions, when some irrevocable loss has happened during the course of the events, and nothing will ever be the same again.
    # Thought: To detect the ""Bittersweet Ending"" trope, we need to analyze the emotional and narrative elements of the video segment, focusing on the resolution and aftermath of the story.
    # 1. Emotional Analysis: Look for visual cues of sadness, loss, or sacrifice in the final frames of the video segment.
    # 2. Narrative Examination: Analyze the character arcs and plot developments to identify any significant losses or unfulfilled resolutions.
    # 3. Answer Selection: Use the select_answer API to determine if the video segment aligns with the characteristics of a bittersweet ending.
    
    video_segment = VideoSegment(video, annotation)
    
    # Assuming the last 10% of the video is a reasonable segment to analyze for the ending
    ending_segment_start = int(video_segment.num_frames * 0.9)
    ending_segment = video_segment.trim(start=ending_segment_start)
    
    # Create an info dictionary to store collected information
    info = {}
    
    for i, frame in enumerate(ending_segment.frame_iterator()):
        # Detect visual cues of sadness, tragedy, or loss
        sadness_query = frame.simple_query(""Is there sadness or mourning?"", to_yesno=True)
        tragedy_query = frame.simple_query(""Is there visible tragedy or destruction?"", to_yesno=True)

        if ""yes"" in sadness_query.lower() or ""yes"" in tragedy_query.lower():
            # Caption the frame
            caption = frame.simple_query(""What is in the frame?"")
            sadness_query = frame.simple_query(""What sadness or mourning event is in the frame?"")
            tragedy_query = frame.simple_query(""What visible tragedy or destruction event is in the frame?"")
            info[f""Caption of {ending_segment.start + 1} th frame""] = caption
            info[f""Sadness or mourning event in {ending_segment.start + 1} th frame""] = sadness_query
            info[f""Visible tragedy or destruction event in {ending_segment.start + 1} th frame""] = tragedy_query
    
    # Answer the query
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|null|||VideoSegment has duration=0
no|no|tt0100157_82|What the Hell, Hero?|"Is the trope ""What the Hell, Hero?"", which means ""When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_82(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: What the Hell, Hero?
    # Definition: When characters In-Universe call out one of the heroes for doing something clearly unheroic, if not outright heinous.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where a hero's actions are questionable or morally ambiguous.
    # 2. Character Analysis: Identify the hero and the actions that might lead to the trope being relevant.
    # 3. Answer Selection: Use the collected information to determine if the trope is applicable to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue, later use the dialogue with the query as context information
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for hero in frame.find(""hero""):
            hero_id = video_segment.face_identify(hero)
            if hero_id is None:
                continue
            hero_action = hero.simple_query(subtitles_info + ""What is the hero doing?"")
            if hero_id not in info:
                info[hero_id] = {}
            info[hero_id].update({
                f""Action in {i} frame"": hero_action
            })

    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|There is no indication in the provided information that any character in the movie calls out one of the heroes for doing something unheroic or heinous||
no|no|tt0100157_89|Chekhov's Gunman|"Is the trope ""Chekhov's Gunman"", which means ""Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_89(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Chekhov's Gunman
    # Definition: Any character who is innocuously and unimportantly introduced to the viewer, but who later proves to be important by the end of the episode.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters introduced early on but seemingly unimportant.
    # 2. Character Analysis: Track the actions and interactions of these characters throughout the video segment.
    # 3. Relevance Assessment: Determine if any of these initially unimportant characters play a significant role later on.
    # 4. Answer Selection: Use the select_answer API to decide if the ""Chekhov's Gunman"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    relevant_characters = []

    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Track the character's actions and interactions
            character_actions = character.simple_query(""What actions is this character performing?"")
            if i < video_segment.num_frames // 2:
                # Characters introduced in the first half are considered for the trope
                relevant_characters.append((character_id, character_actions))

    # Check if any of the initially unimportant characters become significant later
    relevant_characters_info = {}
    for character_id, actions in relevant_characters:
        if actions:
            # If the character has actions, they might become important later
            relevant_characters_info[character_id] = actions

    # Determine if the ""Chekhov's Gunman"" trope is relevant based on the character analysis
    if relevant_characters_info:
        answer = ""yes""
        reason = ""There are characters introduced early on with actions that might become significant later.""
    else:
        answer = ""no""
        reason = ""No characters introduced early on show signs of becoming important later.""

    return answer, reason, relevant_characters_info"|{}|No characters introduced early on show signs of becoming important later.||
no|yes|tt0100157_90|Red Herring|"Is the trope ""Red Herring"", which means ""A clue that leads in the wrong direction."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0100157.mp4|['yes', 'no']|"def execute_command_tt0100157_90(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Red Herring
    # Definition: A clue that leads in the wrong direction.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify any misleading clues or information that could divert the audience's attention.
    # 2. Contextual Analysis: Look for elements that are presented as significant but ultimately turn out to be irrelevant or misleading in the narrative.
    # 3. Detecting Red Herrings: Identify instances where certain characters, objects, or events are highlighted to mislead the audience.
    # 4. Answer Selection: Use the select_answer API to determine if the trope ""Red Herring"" is relevant to the movie based on the collected data.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for potential red herrings
        potential_red_herring = frame.simple_query(""Is there any misleading clue or information in this frame?"", to_yesno=True)
        
        if ""yes"" in potential_red_herring.lower():
            # Collect information about the potential red herring
            caption = frame.simple_query(""What is the misleading clue or information in this frame?"")
            info[f""Red Herring in frame {i}""] = caption

    # Determine if the trope ""Red Herring"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|"{
  ""Red Herring in frame 0"": ""metro goldenwyn mayer trade mark"",
  ""Red Herring in frame 3"": ""the man is driving a car in the snow"",
  ""Red Herring in frame 4"": ""the title of the film is screenplay by person"",
  ""Red Herring in frame 6"": ""person, person, person, person, person"",
  ""Red Herring in frame 8"": ""the man's face is covered in blood"",
  ""Red Herring in frame 14"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 15"": ""the woman in the vest is wearing a vest"",
  ""Red Herring in frame 17"": ""person, person, person, person, person"",
  ""Red Herring in frame 18"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 19"": ""the man in the bed is a doctor"",
  ""Red Herring in frame 20"": ""person, person, person, person, person"",
  ""Red Herring in frame 21"": ""person, person, person, person, person"",
  ""Red Herring in frame 23"": ""person is laying in a hospital bed"",
  ""Red Herring in frame 24"": ""person, person, person, person, person"",
  ""Red Herring in frame 25"": ""person is laying in a hospital bed"",
  ""Red Herring in frame 26"": ""person is laying in bed with the dog"",
  ""Red Herring in frame 28"": ""the woman is holding a glass of milk"",
  ""Red Herring in frame 30"": ""person is standing in the middle of the room"",
  ""Red Herring in frame 31"": ""person, person, person, person, person"",
  ""Red Herring in frame 32"": ""the man in the bed is a doctor"",
  ""Red Herring in frame 33"": ""person is laying on the floor in the room"",
  ""Red Herring in frame 34"": ""person is laying on the floor of the bed"",
  ""Red Herring in frame 35"": ""person, person, person, person, person"",
  ""Red Herring in frame 36"": ""water splashes on a piece of paper"",
  ""Red Herring in frame 37"": ""person, person, person, person, person"",
  ""Red Herring in frame 39"": ""the man in the bed is a doctor"",
  ""Red Herring in frame 40"": ""person, person, person, person, person"",
  ""Red Herring in frame 41"": ""person, person, person, person, person"",
  ""Red Herring in frame 42"": ""the man in the white shirt is a doctor"",
  ""Red Herring in frame 43"": ""the man is wearing a suit and tie"",
  ""Red Herring in frame 44"": ""a person is sitting on a bed"",
  ""Red Herring in frame 45"": ""person is holding a typewriter in her hand"",
  ""Red Herring in frame 46"": ""the light is coming from a light fixture"",
  ""Red Herring in frame 47"": ""person, person, person, person, person"",
  ""Red Herring in frame 48"": ""the person's finger is touching the paper"",
  ""Red Herring in frame 49"": ""the man in the red shirt is wearing a red shirt"",
  ""Red Herring in frame 52"": ""the man is sitting in a chair in a room"",
  ""Red Herring in frame 53"": ""person, person, person, person, person"",
  ""Red Herring in frame 54"": ""the penguin is wearing a hat"",
  ""Red Herring in frame 55"": ""the man in the wheelchair is not in a wheelchair"",
  ""Red Herring in frame 57"": ""the water tower is not a water tower"",
  ""Red Herring in frame 58"": ""the woman in the blue dress is wearing a dress"",
  ""Red Herring in frame 59"": ""person is wearing a jacket and hat"",
  ""Red Herring in frame 60"": ""the doorknob is a brass one"",
  ""Red Herring in frame 62"": ""the woman in the blue dress is a woman"",
  ""Red Herring in frame 63"": ""person, person, person, person, person"",
  ""Red Herring in frame 65"": ""the man in the blue shirt is wearing a blue shirt"",
  ""Red Herring in frame 68"": ""the man is wearing a t-shirt"",
  ""Red Herring in frame 69"": ""the woman is wearing a t-shirt"",
  ""Red Herring in frame 70"": ""person is sitting in a chair with a book"",
  ""Red Herring in frame 71"": ""person, person, person, person, person"",
  ""Red Herring in frame 72"": ""the woman in the gray sweater is a woman"",
  ""Red Herring in frame 73"": ""person, person, person, person, person"",
  ""Red Herring in frame 74"": ""person, person, person, person, person"",
  ""Red Herring in frame 75"": ""the woman is holding a glass of wine"",
  ""Red Herring in frame 78"": ""typewriter stock videos & royalty-free footage"",
  ""Red Herring in frame 80"": ""the woman is wearing a red robe"",
  ""Red Herring in frame 81"": ""person, person, person, person, person"",
  ""Red Herring in frame 82"": ""person, person, person, person, person"",
  ""Red Herring in frame 83"": ""the water tower is not in the foreground"",
  ""Red Herring in frame 86"": ""the man is wearing a bandage on his arm"",
  ""Red Herring in frame 87"": ""person, person, person, person, person"",
  ""Red Herring in frame 89"": ""person, person, person, person, person"",
  ""Red Herring in frame 90"": ""person, person, person, person, person"",
  ""Red Herring in frame 91"": ""person's foot is on the wooden board"",
  ""Red Herring in frame 92"": ""the man in the bed is wearing a shirt"",
  ""Red Herring in frame 93"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 94"": ""person is standing in front of a window"",
  ""Red Herring in frame 95"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 96"": ""person is standing in front of a store"",
  ""Red Herring in frame 97"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 98"": ""person, person, person, person, person"",
  ""Red Herring in frame 100"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 101"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 102"": ""person is wearing a cowboy hat"",
  ""Red Herring in frame 103"": ""the man is wearing a white hat"",
  ""Red Herring in frame 104"": ""person, person, person, person, person"",
  ""Red Herring in frame 105"": ""person, person, person, person, person"",
  ""Red Herring in frame 108"": ""person, person, person, person, person"",
  ""Red Herring in frame 109"": ""the woman's hand is on a revolver"",
  ""Red Herring in frame 111"": ""person, person, person, person, person"",
  ""Red Herring in frame 112"": ""- woman stock videos & royalty-free footage"",
  ""Red Herring in frame 113"": ""- man stock videos & royalty-free footage"",
  ""Red Herring in frame 116"": ""person, person, person, person, person"",
  ""Red Herring in frame 117"": ""person's face is obscured by a mask"",
  ""Red Herring in frame 119"": ""the man is wearing a suit and tie""
}"|The presence of various red herrings in the video frames does not necessarily mean the trope 'Red Herring' is relevant to the movie. The trope specifically refers to a clue that leads in the wrong direction, which is not explicitly mentioned or indicated in the information provided||
no|no|tt0105695_0|Big Bad|"Is the trope ""Big Bad"", which means ""The character who is the direct cause of all of the bad happenings in a story."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_0(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Big Bad
    # Definition: The character who is the direct cause of all of the bad happenings in a story.
    # Thought Process:
    # 1. Frame Selection: Analyze the entire video segment to identify the character responsible for the majority of negative events.
    # 2. Character Analysis: Identify the character's actions and their impact on the storyline.
    # 3. Answer Selection: Determine if the character fits the role of the ""Big Bad"" based on their influence on the narrative.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters and their actions
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_action = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = []
            info[character_id].append(character_action)

    # Analyze character actions to determine the ""Big Bad""
    big_bad_candidate = None
    max_negative_actions = 0
    for character_id, actions in info.items():
        negative_actions_count = sum(""bad"" in action.lower() for action in actions)
        if negative_actions_count > max_negative_actions:
            big_bad_candidate = character_id
            max_negative_actions = negative_actions_count

    if big_bad_candidate is not None:
        answer = ""yes""
        reason = f""The character '{big_bad_candidate}' is the primary cause of negative events.""
    else:
        answer = ""no""
        reason = ""No single character stands out as the 'Big Bad' in the story.""

    return answer, reason, info"|{}|No single character stands out as the 'Big Bad' in the story.||
no|no|tt0105695_3|Smug Snake|"Is the trope ""Smug Snake"", which means ""A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_3(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Smug Snake
    # Definition: A type of character (usually a villain) who tends to treat friends and enemies alike with equal disdain.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior of characters in the video to identify the presence of a character exhibiting traits of a ""Smug Snake.""
    # 2. Character Analysis: Look for characters who display arrogance, disdain, or superiority towards others, regardless of their affiliation.
    # 3. Answer Selection: Use the collected character behavior information to determine if the trope ""Smug Snake"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the behavior of the character
            character_behavior = character.simple_query(""What behavior is the character exhibiting?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id][f""Behavior in {i} frame""] = character_behavior

    # Determine if the trope ""Smug Snake"" is relevant based on character behavior
    has_smug_snake = any(""arrogance"" in behavior.lower() or ""disdain"" in behavior.lower() or ""superiority"" in behavior.lower()
                         for character_info in info.values() for behavior in character_info.values())

    answer = possible_answers[0] if has_smug_snake else possible_answers[1]
    reason = ""The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.""

    return answer, reason, info"|{}|The presence of characters exhibiting arrogance, disdain, or superiority suggests the trope of 'Smug Snake' in the movie.||
no|no|tt0105695_5|Would Hurt a Child|"Is the trope ""Would Hurt a Child"", which means ""People that do hurt children, sometimes even kill them."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_5(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Would Hurt a Child
    # Definition: People that do hurt children, sometimes even kill them.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify instances where children are in danger or harmed.
    # 2. Character Analysis: Identify characters involved in such actions and their motivations.
    # 3. Answer Selection: Determine if the trope is relevant based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Check for presence of children in the frame
        has_children = frame.exists(""child"")
        
        if has_children:
            # Analyze the actions towards children
            actions_towards_children = frame.simple_query(""What actions are directed towards the child?"")
            info[f""Actions towards child in frame {i}""] = actions_towards_children
            
            # Identify characters involved in harming children
            for character in frame.find(""person""):
                if ""hurt"" in character.simple_query(""Is this character harming the child?"").lower():
                    character_id = video_segment.face_identify(character)
                    if character_id not in info:
                        info[character_id] = []
                    info[character_id].append(f""Harming child in frame {i}"")
    
    # Determine if the trope is relevant based on the collected information
    answer = ""yes"" if any(""harming child"" in value for value in info.values()) else ""no""
    reason = ""There are instances of characters harming children in the video.""
    
    return answer, reason, info"|"{
  ""Actions towards child in frame 0"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 1"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 3"": ""person, person, person, person, person"",
  ""Actions towards child in frame 9"": ""person, person, person, person, person"",
  ""Actions towards child in frame 11"": ""person, person, person, person, person"",
  ""Actions towards child in frame 12"": ""person, person, person, person, person"",
  ""Actions towards child in frame 14"": ""person, person, person, person, person"",
  ""Actions towards child in frame 17"": ""the child's attention is directed towards the fence post"",
  ""Actions towards child in frame 19"": ""the child is thrown from the horse's back"",
  ""Actions towards child in frame 20"": ""a man on a horse approaches the child"",
  ""Actions towards child in frame 21"": ""person, person, person, person, person"",
  ""Actions towards child in frame 26"": ""he is being scolded"",
  ""Actions towards child in frame 31"": ""person, person, person, person, person"",
  ""Actions towards child in frame 33"": ""person, person, person, person, person"",
  ""Actions towards child in frame 40"": ""he tries to get the child away"",
  ""Actions towards child in frame 41"": ""person, person, person, person, person"",
  ""Actions towards child in frame 42"": ""person, person, person, person, person"",
  ""Actions towards child in frame 46"": ""person, person, person, person, person"",
  ""Actions towards child in frame 51"": ""a child is reflected in the water"",
  ""Actions towards child in frame 52"": ""the child is being chased by the dog"",
  ""Actions towards child in frame 57"": ""he screams at the child"",
  ""Actions towards child in frame 59"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 60"": ""hugs, kisses, hugs"",
  ""Actions towards child in frame 61"": ""he screams at the child"",
  ""Actions towards child in frame 66"": ""horseback riding, horseback riding, horse riding"",
  ""Actions towards child in frame 68"": ""person, person, person, person, person"",
  ""Actions towards child in frame 71"": ""person, person, person, person, person"",
  ""Actions towards child in frame 75"": ""- child stock videos & royalty-free footage"",
  ""Actions towards child in frame 78"": ""he screams and runs away"",
  ""Actions towards child in frame 82"": ""person, person, person, person, person"",
  ""Actions towards child in frame 83"": ""he looks at the child and smiles"",
  ""Actions towards child in frame 85"": ""person, person, person, person, person"",
  ""Actions towards child in frame 86"": ""person, person, person, person, person"",
  ""Actions towards child in frame 93"": ""he screams at the child"",
  ""Actions towards child in frame 94"": ""screams and screams"",
  ""Actions towards child in frame 95"": ""he is escorted away from the child"",
  ""Actions towards child in frame 96"": ""hugs, kisses, and affection"",
  ""Actions towards child in frame 97"": ""person, person, person, person, person"",
  ""Actions towards child in frame 101"": ""person, person, person, person, person"",
  ""Actions towards child in frame 107"": ""person, person, person, person, person"",
  ""Actions towards child in frame 110"": ""he screams and runs away"",
  ""Actions towards child in frame 111"": ""he screams and runs away"",
  ""Actions towards child in frame 113"": ""the child is being pushed down the stairs"",
  ""Actions towards child in frame 119"": ""the child is screamed at""
}"|There are instances of characters harming children in the video.||
no|no|tt0105695_9|Deadpan Snarker|"Is the trope ""Deadpan Snarker"", which means ""A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_9(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Deadpan Snarker
    # Definition: A character prone to gnomic, sarcastic, sometimes bitter, occasionally whimsical asides.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify characters exhibiting sarcastic or witty behavior.
    # 2. Character Analysis: Identify characters and their dialogues/actions to determine if they match the trope.
    # 3. Answer Selection: Use collected information to decide if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use subtitles to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_dialogue = character.simple_query(subtitles_info + ""What's the character saying?"")
            character_behavior = character.simple_query(subtitles_info + ""What's the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Dialogue in {i} frame"": character_dialogue,
                f""Behavior in {i} frame"": character_behavior
            })

    # Analyze the collected information to determine if the Deadpan Snarker trope is relevant
    relevant_characters = [char_id for char_id, char_info in info.items() if any(""sarcastic"" in behavior.lower() or ""witty"" in behavior.lower() for behavior in char_info.values())]

    if relevant_characters:
        answer = ""yes""
        reason = f""The characters {', '.join(relevant_characters)} exhibit traits of Deadpan Snarker.""
    else:
        answer = ""no""
        reason = ""No characters exhibit traits of Deadpan Snarker.""

    return answer, reason, info"|{}|No characters exhibit traits of Deadpan Snarker.||
yes|no|tt0105695_10|Determinator|"Is the trope ""Determinator"", which means ""A character \ good or evil, male or female, young or old \ who never gives up. Ever. No matter what."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_10(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Determinator
    # Definition: A character, good or evil, male or female, young or old, who never gives up. Ever. No matter what.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify a character exhibiting relentless determination.
    # 2. Character Analysis: Identify the character's actions, reactions, and persistence throughout the video segment.
    # 3. Trope Detection: Look for visual and behavioral cues that signify the character's unwavering resolve.
    # 4. Answer Selection: Use the collected information to determine if the ""Determinator"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Identify characters in the frame
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze the character's actions and persistence
            character_action = character.simple_query(""What is the character doing?"")
            character_reaction = character.simple_query(""How is the character reacting?"")
            # Check for signs of determination
            determination_query = character.simple_query(""Is the character showing determination?"", to_yesno=True)
            
            if ""yes"" in determination_query.lower():
                info[f""Determinator Character {character_id} in Frame {i}""] = {
                    ""Action"": character_action,
                    ""Reaction"": character_reaction
                }
    
    # Determine if the ""Determinator"" trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The character in the movie is shown to never give up, no matter the obstacles they face. This determination is a key trait of the trope 'Determinator'||
no|no|tt0105695_11|Only Sane Man|"Is the trope ""Only Sane Man"", which means ""When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only 
one who, well, isn't."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_11(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query)->[str, str, dict]:
    # Trope: Only Sane Man
    # Definition: When there is a group of characters who are all just totally weird, either in general or in a particular scenario, the Only Sane Man is the only one who, well, isn't.
    # Thought Process:
    # 1. Frame Selection: Analyze the behavior and interactions of characters in the video to identify the character who exhibits rational behavior amidst eccentricity.
    # 2. Character Analysis: Identify the traits and actions of each character to determine their level of eccentricity and rationality.
    # 3. Trope Identification: Look for instances where one character stands out as the voice of reason or the most grounded individual in contrast to the others.
    # 4. Answer Selection: Use the collected character information to determine if the trope ""Only Sane Man"" is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    sane_man = None
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            character_behavior = character.simple_query(""What is the character's behavior?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Behavior in {i} frame"": character_behavior
            })
            if ""rational"" in character_behavior.lower() and sane_man is None:
                sane_man = character_id

    if sane_man is not None:
        answer = ""yes""
        reason = f""The character '{sane_man}' exhibits rational behavior amidst eccentricity, fitting the trope of the Only Sane Man.""
    else:
        answer = ""no""
        reason = ""No character displays the characteristics of the Only Sane Man trope in the movie.""

    return answer, reason, info"|{}|No character displays the characteristics of the Only Sane Man trope in the movie.||
no|yes|tt0105695_17|Too Dumb to Live|"Is the trope ""Too Dumb to Live"", which means ""People who are so stupid that they simply do not deserve to survive."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_17(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Too Dumb to Live
    # Definition: People who are so stupid that they simply do not deserve to survive.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify characters or situations that exhibit extreme stupidity.
    # 2. Character Analysis: Identify characters displaying foolish or reckless behavior that endangers their survival.
    # 3. Answer Selection: Use the collected information to determine if the trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch.get_subtitles() to get dialogue for context
        subtitles_info = ""With subtitles '"" + "" "".join(frame.get_subtitles()) + ""'""
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Analyze character's actions and behavior
            character_action = character.simple_query(subtitles_info + ""What is the character doing?"")
            if ""foolish"" in character_action.lower() or ""reckless"" in character_action.lower():
                info[f""Character {character_id} in frame {i}""] = character_action

    # Determine if the trope is relevant based on the collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The presence of the trope `Too Dumb to Live` would require characters in the movie consistently making incredibly foolish decisions that put their lives in danger. However, the information provided does not indicate such behavior from the characters.||
no|no|tt0105695_20|Adorkable|"Is the trope ""Adorkable"", which means ""An adorkable character might be socially inept, shy or clumsy. However, rather than making them an outcast, these quirks give the character 
an endearing vulnerability."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_20(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adorkable
    # Definition: An adorkable character might be socially inept, shy, or clumsy. However, rather than making them an outcast, these quirks give the character an endearing vulnerability.
    # Thought Process:
    # 1. Frame Selection: Analyze each frame to identify characters exhibiting adorkable traits such as social ineptitude, shyness, or clumsiness.
    # 2. Character Analysis: Identify characters with these traits and collect their actions, behaviors, and interactions with others.
    # 3. Trope Detection: Look for instances where these traits make the character endearing and vulnerable, rather than negatively impacting their relationships or story arc.
    # 4. Answer Selection: Use the collected information to determine if the ""Adorkable"" trope is relevant to the movie.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Use ImagePatch methods to analyze each frame for characters and their traits
        for character in frame.find(""person""):
            character_id = video_segment.face_identify(character)
            if character_id is None:
                continue
            # Collect character traits, actions, and interactions
            character_description = character.simple_query(""Describe the character in 10 words"")
            character_behavior = character.simple_query(""What is the character doing?"")
            if character_id not in info:
                info[character_id] = {}
            info[character_id].update({
                f""Description in {i} frame"": character_description,
                f""Behavior in {i} frame"": character_behavior
            })
    
    # Analyze the collected information to determine if the ""Adorkable"" trope is relevant
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    
    return answer, reason, info"|{}|The information provided does not mention any character being socially inept, shy, or clumsy. Therefore, it is unlikely that the trope 'Adorkable' is relevant to the movie.||
yes|no|tt0105695_28|Adult Fear|"Is the trope ""Adult Fear"", which means ""Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_28(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Adult Fear
    # Definition: Things that mature, well-adjusted adults generally are concerned about, as opposed to supernatural fears.
    # Thought Process:
    # 1. Frame Selection: Analyze the frames to identify situations or themes that resonate with common adult fears.
    # 2. Contextual Analysis: Look for elements in the video that evoke feelings of unease, worry, or anxiety typically associated with adult fears.
    # 3. Answer Selection: Use the select_answer API to determine if the trope ""Adult Fear"" is relevant to the movie based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    for i, frame in tqdm(enumerate(video_segment.frame_iterator())):
        # Analyze each frame for elements that evoke adult fears
        fear_query = frame.simple_query(""Does this scene evoke feelings of unease or worry?"")
        if ""yes"" in fear_query.lower():
            # Collect information about the scene
            caption = frame.simple_query(""What is happening in this scene?"")
            fear_description = frame.simple_query(""What specific element evokes adult fear in this scene?"")
            info[f""Caption of frame {i}""] = caption
            info[f""Fear element in frame {i}""] = fear_description

    # Determine if the trope ""Adult Fear"" is relevant to the movie
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|"{
  ""Caption of frame 0"": ""silhouette of a shack at sunset"",
  ""Fear element in frame 0"": ""the silhouette of a lone tree"",
  ""Caption of frame 1"": ""a woman is in a dark room"",
  ""Fear element in frame 1"": ""screams of a young girl"",
  ""Caption of frame 2"": ""people are walking down a street at night"",
  ""Fear element in frame 2"": ""a dark alleyway with no light"",
  ""Caption of frame 3"": ""a group of men in a bar"",
  ""Fear element in frame 3"": ""the screams of a woman"",
  ""Caption of frame 4"": ""a woman is standing in front of stairs"",
  ""Fear element in frame 4"": ""a woman's screams"",
  ""Caption of frame 5"": ""a man is kissing a woman"",
  ""Fear element in frame 5"": ""a woman's screams"",
  ""Caption of frame 6"": ""a snow storm is threatening the town"",
  ""Fear element in frame 6"": ""a spooky fog and snow"",
  ""Caption of frame 7"": ""a woman is sitting in a chair"",
  ""Fear element in frame 7"": ""the screams of a woman"",
  ""Caption of frame 8"": ""a man is laying on the ground"",
  ""Fear element in frame 8"": ""cowboys, cowboy boots, cowboy boots, cowboy boots, cowboy boots"",
  ""Caption of frame 9"": ""a man is standing in a barn"",
  ""Fear element in frame 9"": ""cowboys, cowboys, cowboys, cowboys, cowboys, cowboys, cowboys, cowboys"",
  ""Caption of frame 10"": ""a man is talking to a woman"",
  ""Fear element in frame 10"": ""a dead body in a dark room"",
  ""Caption of frame 11"": ""a man is standing in the doorway"",
  ""Fear element in frame 11"": ""a child's fear of the dark"",
  ""Caption of frame 12"": ""a man is standing in front of a door"",
  ""Fear element in frame 12"": ""person, person, person, person, person"",
  ""Caption of frame 16"": ""a woman is looking at a sign"",
  ""Fear element in frame 16"": ""a woman in a cowboy hat"",
  ""Caption of frame 19"": ""a cowboy is riding a horse"",
  ""Fear element in frame 19"": ""a horse's hooves"",
  ""Caption of frame 20"": ""a man is riding a horse in a field"",
  ""Fear element in frame 20"": ""a cowboy riding a horse in a field"",
  ""Caption of frame 21"": ""a man is building a wooden house"",
  ""Fear element in frame 21"": ""person, person, person, person, person"",
  ""Caption of frame 22"": ""a man is standing in a field"",
  ""Fear element in frame 22"": ""a cowboy in a hat"",
  ""Caption of frame 23"": ""a woman is standing in a field"",
  ""Fear element in frame 23"": ""a woman in a kimono"",
  ""Caption of frame 24"": ""a man is talking to a woman"",
  ""Fear element in frame 24"": ""person, person, person, person, person"",
  ""Caption of frame 25"": ""a man is standing in a room"",
  ""Fear element in frame 25"": ""person, person, person, person, person"",
  ""Caption of frame 28"": ""a man is staring into the dark"",
  ""Fear element in frame 28"": ""the blackness of the night and the darkness"",
  ""Caption of frame 29"": ""two cowboys are talking to each other"",
  ""Fear element in frame 29"": ""a cowboy's scream"",
  ""Caption of frame 30"": ""a train is coming down a hill"",
  ""Fear element in frame 30"": ""a train roaring past the scene"",
  ""Caption of frame 31"": ""a woman is looking out a window"",
  ""Fear element in frame 31"": ""a horse drawn buggy in the distance"",
  ""Caption of frame 32"": ""a man in a cowboy hat"",
  ""Fear element in frame 32"": ""the cowboy's cowboy hat"",
  ""Caption of frame 33"": ""a man is standing at a desk"",
  ""Fear element in frame 33"": ""ghosts, ghosts, ghosts, ghosts, ghosts, ghosts"",
  ""Caption of frame 34"": ""a man is talking to a man"",
  ""Fear element in frame 34"": ""a wolf in a hat"",
  ""Caption of frame 35"": ""a man is standing in a room"",
  ""Fear element in frame 35"": ""a man in a striped shirt"",
  ""Caption of frame 36"": ""a man is standing in a bar"",
  ""Fear element in frame 36"": ""a man in a tux"",
  ""Caption of frame 37"": ""a group of cowboys are shooting guns"",
  ""Fear element in frame 37"": ""a gunshot to the back of the head"",
  ""Caption of frame 39"": ""a group of men are standing outside a store"",
  ""Fear element in frame 39"": ""a gun in the hands of a man"",
  ""Caption of frame 42"": ""a group of people are walking down the street"",
  ""Fear element in frame 42"": ""person, person, person, person, person"",
  ""Caption of frame 44"": ""a woman is standing outside a house"",
  ""Fear element in frame 44"": ""person, person, person, person, person"",
  ""Caption of frame 45"": ""a man is laying on the ground"",
  ""Fear element in frame 45"": ""a man in a suit and tie"",
  ""Caption of frame 46"": ""a group of people are standing in front of a building"",
  ""Fear element in frame 46"": ""a cowboy in a hat"",
  ""Caption of frame 47"": ""a man is laying on the ground"",
  ""Fear element in frame 47"": ""a man falling off a cliff"",
  ""Caption of frame 50"": ""a man is smoking a cigarette"",
  ""Fear element in frame 50"": ""the shadow of a tree in the distance"",
  ""Caption of frame 52"": ""a dog is running through the grasses"",
  ""Fear element in frame 52"": ""the sound of a wolf howling"",
  ""Caption of frame 54"": ""a man is in a jail cell"",
  ""Fear element in frame 54"": ""a man in a suit and tie"",
  ""Caption of frame 55"": ""a man is reading a book at a table"",
  ""Fear element in frame 55"": ""a lamp in a darkened room"",
  ""Caption of frame 56"": ""a man is standing in a jail cell"",
  ""Fear element in frame 56"": ""a prisoner in a prison cell"",
  ""Caption of frame 57"": ""a man is in a jail cell"",
  ""Fear element in frame 57"": ""a man in a suit and tie"",
  ""Caption of frame 58"": ""a man is sleeping by a fire"",
  ""Fear element in frame 58"": ""screams of a young girl"",
  ""Caption of frame 59"": ""a man is sitting by a fire"",
  ""Fear element in frame 59"": ""fire stock videos & royalty-free footage"",
  ""Caption of frame 60"": ""a man is lying down in the dark"",
  ""Fear element in frame 60"": ""screams and screams"",
  ""Caption of frame 61"": ""two men are talking in a dark room"",
  ""Fear element in frame 61"": ""a man in a dark room with a flashlight"",
  ""Caption of frame 62"": ""a man is in a jail cell"",
  ""Fear element in frame 62"": ""a man in a tuxedo"",
  ""Caption of frame 63"": ""a man is standing in a dark room"",
  ""Fear element in frame 63"": ""the shadow of a man in the dark"",
  ""Caption of frame 64"": ""a man is standing in a dark room"",
  ""Fear element in frame 64"": ""a dark, spooky room"",
  ""Caption of frame 65"": ""a man is in a jail cell"",
  ""Fear element in frame 65"": ""a man in a prison cell holding a gun"",
  ""Caption of frame 66"": ""people riding horses in a foggy night"",
  ""Fear element in frame 66"": ""the spooky, eerie atmosphere"",
  ""Caption of frame 68"": ""a group of cowboys riding horses"",
  ""Fear element in frame 68"": ""the shadow of a horse in the dark"",
  ""Caption of frame 69"": ""a man is sitting at a table"",
  ""Fear element in frame 69"": ""a candle burning in a dark room"",
  ""Caption of frame 70"": ""two men are sitting at a table talking"",
  ""Fear element in frame 70"": ""person, person, person, person, person"",
  ""Caption of frame 71"": ""a group of people are in a bar"",
  ""Fear element in frame 71"": ""a man in a black hat"",
  ""Caption of frame 72"": ""a man is sitting at a table"",
  ""Fear element in frame 72"": ""a man in a cowboy hat"",
  ""Caption of frame 73"": ""a man is in a dark room"",
  ""Fear element in frame 73"": ""a man in a cowboy hat"",
  ""Caption of frame 74"": ""two men are talking in a dark room"",
  ""Fear element in frame 74"": ""the shadow of a man's face"",
  ""Caption of frame 75"": ""a man is standing on a staircase"",
  ""Fear element in frame 75"": ""a stairwell with a candle"",
  ""Caption of frame 76"": ""a man is standing in a dark room"",
  ""Fear element in frame 76"": ""a man in a black hat"",
  ""Caption of frame 77"": ""a man is laying on the floor"",
  ""Fear element in frame 77"": ""a man crouching on the floor"",
  ""Caption of frame 78"": ""a man riding a horse in the dark"",
  ""Fear element in frame 78"": ""a dark, dreary street"",
  ""Caption of frame 79"": ""a man is sleeping in a bed"",
  ""Fear element in frame 79"": ""sleeping in a hayloft"",
  ""Caption of frame 80"": ""a man is looking at something in the dark"",
  ""Fear element in frame 80"": ""a man in a cowboy hat"",
  ""Caption of frame 81"": ""a man is sitting by a fire"",
  ""Fear element in frame 81"": ""- fire stock videos & royalty-free footage"",
  ""Caption of frame 82"": ""a woman is talking to a man"",
  ""Fear element in frame 82"": ""a woman's screams"",
  ""Caption of frame 83"": ""a woman is talking to a man"",
  ""Fear element in frame 83"": ""a woman's screams"",
  ""Caption of frame 84"": ""a man is looking at a mountain"",
  ""Fear element in frame 84"": ""a solitary figure in the distance"",
  ""Caption of frame 85"": ""a group of people are crossing a river"",
  ""Fear element in frame 85"": ""person, person, person, person, person"",
  ""Caption of frame 86"": ""two cowboys are standing on a hill"",
  ""Fear element in frame 86"": ""the presence of a saber"",
  ""Caption of frame 87"": ""a man is aiming a gun"",
  ""Fear element in frame 87"": ""a shotgun aimed at the man"",
  ""Caption of frame 88"": ""a cowboy is holding a gun"",
  ""Fear element in frame 88"": ""a saber-tooth"",
  ""Caption of frame 90"": ""a man is laying in the grass"",
  ""Fear element in frame 90"": ""person, person, person, person, person"",
  ""Caption of frame 91"": ""a man is laying on the ground"",
  ""Fear element in frame 91"": ""the screams of a child"",
  ""Caption of frame 92"": ""a man in a cowboy hat"",
  ""Fear element in frame 92"": ""a cowboy in a hat"",
  ""Caption of frame 93"": ""a man is carrying wood to a house"",
  ""Fear element in frame 93"": ""a shivering man with a knife"",
  ""Caption of frame 94"": ""three women are sitting in a dark room"",
  ""Fear element in frame 94"": ""a woman's bare breasts"",
  ""Caption of frame 97"": ""a group of men are sitting around a table"",
  ""Fear element in frame 97"": ""the screams of a child"",
  ""Caption of frame 98"": ""a cowboy is opening a door"",
  ""Fear element in frame 98"": ""a gun in the man's hand"",
  ""Caption of frame 99"": ""a man is reaching for a gun"",
  ""Fear element in frame 99"": ""a man's hand reaching out of the door"",
  ""Caption of frame 100"": ""a cowboy is holding a gun"",
  ""Fear element in frame 100"": ""a gun in a cowboy hat"",
  ""Caption of frame 101"": ""a group of men are running through the woods"",
  ""Fear element in frame 101"": ""a gunshot is heard in the background"",
  ""Caption of frame 103"": ""a man is looking at a stormy sky"",
  ""Fear element in frame 103"": ""a dark sky with a storm cloud"",
  ""Caption of frame 104"": ""two men are standing next to a tree"",
  ""Fear element in frame 104"": ""the presence of a large tree in the distance"",
  ""Caption of frame 105"": ""a man is looking at a man"",
  ""Fear element in frame 105"": ""the screams of the old man"",
  ""Caption of frame 106"": ""two men are talking in the middle of the desert"",
  ""Fear element in frame 106"": ""person, person, person, person, person"",
  ""Caption of frame 108"": ""a car drives down a dark road"",
  ""Fear element in frame 108"": ""the dripping water on the road surface"",
  ""Caption of frame 109"": ""a cowboy is holding a gun"",
  ""Fear element in frame 109"": ""a man in a cowboy hat"",
  ""Caption of frame 110"": ""a group of men are standing in the dark"",
  ""Fear element in frame 110"": ""the shadow of a man in the dark"",
  ""Caption of frame 111"": ""a group of men are standing in the dark"",
  ""Fear element in frame 111"": ""the shadows of the stairwells"",
  ""Caption of frame 112"": ""a man is staring at the camera"",
  ""Fear element in frame 112"": ""a man in a suit and tie"",
  ""Caption of frame 113"": ""a person is walking down a staircase"",
  ""Fear element in frame 113"": ""a stairwell with a ladder"",
  ""Caption of frame 114"": ""a person is laying on the floor"",
  ""Fear element in frame 114"": ""the shadow of a person on the floor"",
  ""Caption of frame 115"": ""a man is holding a gun in his hand"",
  ""Fear element in frame 115"": ""a gun in the man's hand"",
  ""Caption of frame 116"": ""a man is laying in the dark"",
  ""Fear element in frame 116"": ""the screams of a woman"",
  ""Caption of frame 117"": ""a man is laying on the ground"",
  ""Fear element in frame 117"": ""the screams of a woman"",
  ""Caption of frame 118"": ""a man is opening a door in the dark"",
  ""Fear element in frame 118"": ""the shadow of the man in the doorway"",
  ""Caption of frame 119"": ""a woman is standing in a dark room"",
  ""Fear element in frame 119"": ""a woman in a dark room standing alone""
}"|The presence of fear elements such as screams, dark settings, men holding guns, and shadows in the series of frames suggest that the trope 'Adult Fear' may be relevant to the movie. These elements evoke a sense of mature, well-adjusted adults being concerned about their safety and well-being in potentially dangerous or threatening situations.||
no|yes|tt0105695_29|Not So Different|"Is the trope ""Not So Different"", which means ""When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more 
than the other character would want to believe."", relevant to the movie?"|/project/mira/dataset/MovieNet/videos/tt0105695.mp4|['yes', 'no']|"def execute_command_tt0105695_29(video, annotation, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is:def execute_command(video, annotation, possible_answers, query):
    # Trope: Not So Different
    # Definition: When one character in a pair (who'd otherwise be different and/or unrelated) discovers that they actually have some things in common, more than the other character would want to believe.
    # Thought Process:
    # 1. Frame Selection: Analyze frames to identify pairs of characters who seem different but might have similarities.
    # 2. Character Analysis: Look for actions, dialogues, or visual cues that suggest similarities between seemingly different characters.
    # 3. Trope Detection: Determine if the characters exhibit traits or behaviors that indicate they are ""Not So Different"" after all.
    # 4. Answer Selection: Use the select_answer API to choose the most likely answer based on the collected information.

    video_segment = VideoSegment(video, annotation)
    info = {}
    
    # Implement your logic to detect the ""Not So Different"" trope here
    
    # Return the answer, reason, and collected information
    answer, reason = video_segment.select_answer(info, query, possible_answers)
    return answer, reason, info"|{}|The information provided does not suggest any similarity or connection between two characters that would indicate the presence of the trope `Not So Different`||
